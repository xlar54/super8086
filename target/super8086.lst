
; 64tass Turbo Assembler Macro V1.53.1515 listing file
; 64tass -a -l target\super8086.lbl -L target\super8086.lst -o target\super8086 src\super8086.asm
; Sat Mar 12 20:38:28 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: src\super8086.asm


;******  Processing file: src\macros.asm


;******  Return to file: src\super8086.asm

=$020000				BANK = $020000
>0801	0b 08 d5 07			    .word (+), 2005
>0805	9e 32 35 37 35 00		    .null $9e, format("%d",start)
>080b	00 00				 +  .word 0
=$42					AX  = $42   ; the accumulator reg
=$42					AL  = $42
=$43					AH  = $43
=$44					BX  = $44   ; the base addr reg
=$44					BL  = $44
=$45					BH  = $45
=$46					CX  = $46   ; the count reg
=$46					CL  = $46
=$47					CH  = $47
=$48					DX  = $48   ; the data reg
=$48					DL  = $48
=$49					DH  = $49
=$4a					CS  = $4a   ; code segment reg
=$4c					DS  = $4c   ; data segment reg
=$4e					ES  = $4e   ; extra segment reg
=$50					SS  = $50   ; stack segment reg
=$52					IP  = $52   ; instruction pointer
=$54					FR  = $54   ; flags register
=$56					SP  = $56   ; stack pointer reg
=$58					BP  = $58   ; base pointer reg
=$5a					SI  = $5a   ; source index reg
=$5c					DI  = $5c   ; destination index reg
=$5e					TMP1 = $5e
.080d					JUMPTBL:
>080d	cd 0a d0 0a d3 0a d6 0a		    .word j00, j01, j02, j03, j04, j05, j06, j07, j08, j09, j0a, j0b, j0c, j0d, j0e, j0f
>0815	d9 0a dc 0a df 0a e2 0a e5 0a e8 0a eb 0a ee 0a
>0825	f1 0a f4 0a f7 0a fa 0a
>082d	fd 0a 00 0b 03 0b 06 0b		    .word j10, j11, j12, j13, j14, j15, j16, j17, j18, j19, j1a, j1b, j1c, j1d, j1e, j1f
>0835	09 0b 0c 0b 0f 0b 12 0b 15 0b 18 0b 1b 0b 1e 0b
>0845	21 0b 24 0b 27 0b 2a 0b
>084d	2d 0b 30 0b 33 0b 36 0b		    .word j20, j21, j22, j23, j24, j25, j26, j27, j28, j29, j2a, j2b, j2c, j2d, j2e, j2f
>0855	39 0b 3c 0b 3f 0b 42 0b 45 0b 48 0b 4b 0b 4e 0b
>0865	51 0b 54 0b 57 0b 5a 0b
>086d	5d 0b 60 0b 63 0b 66 0b		    .word j30, j31, j32, j33, j34, j35, j36, j37, j38, j39, j3a, j3b, j3c, j3d, j3e, j3f
>0875	69 0b 6c 0b 6f 0b 72 0b 75 0b 78 0b 7b 0b 7e 0b
>0885	81 0b 84 0b 87 0b 8a 0b
>088d	8d 0b 9c 0b 9f 0b a2 0b		    .word j40, j41, j42, j43, j44, j45, j46, j47, j48, j49, j4a, j4b, j4c, j4d, j4e, j4f
>0895	a5 0b a8 0b ab 0b ae 0b b1 0b b4 0b b7 0b ba 0b
>08a5	bd 0b c0 0b c3 0b c6 0b
>08ad	c9 0b cc 0b cf 0b d2 0b		    .word j50, j51, j52, j53, j54, j55, j56, j57, j58, j59, j5a, j5b, j5c, j5d, j5e, j5f
>08b5	d5 0b d8 0b db 0b de 0b e1 0b e4 0b e7 0b ea 0b
>08c5	ed 0b f0 0b f3 0b f6 0b
>08cd	f9 0b fc 0b ff 0b 02 0c		    .word j60, j61, j62, j63, j64, j65, j66, j67, j68, j69, j6a, j6b, j6c, j6d, j6e, j6f
>08d5	05 0c 08 0c 0b 0c 0e 0c 11 0c 14 0c 17 0c 1a 0c
>08e5	1d 0c 20 0c 23 0c 26 0c
>08ed	29 0c 2c 0c 2f 0c 32 0c		    .word j70, j71, j72, j73, j74, j75, j76, j77, j78, j79, j7a, j7b, j7c, j7d, j7e, j7f
>08f5	35 0c 38 0c 3b 0c 3e 0c 41 0c 44 0c 47 0c 4a 0c
>0905	4d 0c 50 0c 53 0c 56 0c
>090d	59 0c 5c 0c 5f 0c 62 0c		    .word j80, j81, j82, j83, j84, j85, j86, j87, j88, j89, j8a, j8b, j8c, j8d, j8e, j8f
>0915	65 0c 68 0c 6b 0c 6e 0c 71 0c 74 0c 77 0c 7a 0c
>0925	7d 0c 80 0c 83 0c 86 0c
>092d	89 0c 8c 0c 8f 0c 92 0c		    .word j90, j91, j92, j93, j94, j95, j96, j97, j98, j99, j9a, j9b, j9c, j9d, j9e, j9f
>0935	95 0c 98 0c 9b 0c 9e 0c a1 0c a4 0c a7 0c aa 0c
>0945	ad 0c b0 0c b3 0c b6 0c
>094d	b9 0c bc 0c bf 0c c2 0c		    .word ja0, ja1, ja2, ja3, ja4, ja5, ja6, ja7, ja8, ja9, jaa, jab, jac, jad, jae, jaf
>0955	c5 0c c8 0c cb 0c ce 0c d1 0c d4 0c d7 0c da 0c
>0965	dd 0c e0 0c e3 0c e6 0c
>096d	e9 0c ec 0c ef 0c 00 0d		    .word jb0, jb1, jb2, jb3, jb4, jb5, jb6, jb7, jb8, jb9, jba, jbb, jbc, jbd, jbe, jbf
>0975	03 0d 14 0d 17 0d 1a 0d 1d 0d 20 0d 23 0d 26 0d
>0985	29 0d 2c 0d 2f 0d 32 0d
>098d	35 0d 38 0d 3b 0d 3e 0d		    .word jc0, jc1, jc2, jc3, jc4, jc5, jc6, jc7, jc8, jc9, jca, jcb, jcc, jcd, jce, jcf
>0995	41 0d 44 0d 47 0d 4a 0d 4d 0d 50 0d 53 0d 56 0d
>09a5	59 0d 5c 0d 7e 0d 81 0d
>09ad	84 0d 87 0d 8a 0d 8d 0d		    .word jd0, jd1, jd2, jd3, jd4, jd5, jd6, jd7, jd8, jd9, jda, jdb, jdc, jdd, jde, jdf
>09b5	90 0d 93 0d 96 0d 99 0d 9c 0d 9f 0d a2 0d a5 0d
>09c5	a8 0d ab 0d ae 0d b1 0d
>09cd	b4 0d b7 0d ba 0d bd 0d		    .word je0, je1, je2, je3, je4, je5, je6, je7, je8, je9, jea, jeb, jec, jed, jee, jef
>09d5	c0 0d c3 0d c6 0d c9 0d cc 0d cf 0d d2 0d d5 0d
>09e5	07 0e 0a 0e 0d 0e 10 0e
>09ed	13 0e 16 0e 19 0e 1c 0e		    .word jf0, jf1, jf2, jf3, jf4, jf5, jf6, jf7, jf8, jf9, jfa, jfb, jfc, jfd, jfe, jff
>09f5	1f 0e 22 0e 25 0e 28 0e 2b 0e 2e 0e 31 0e 34 0e
>0a05	37 0e 3a 0e 3d 0e 64 0e
.0a0d					JUMPADDR:
>0a0d	00 00				    .word $0000
.0a0f					start:
.0a0f	a9 aa		lda #$aa	    lda #<msg1      ; print the startup message
.0a11	85 fe		sta $fe		    sta $fe
.0a13	a9 0a		lda #$0a	    lda #>msg1
.0a15	85 ff		sta $ff		    sta $ff
.0a17	20 9c 0a	jsr $0a9c	    jsr print
.0a1a	18		clc		                clc
.0a1b	fb		xce		                xce
.0a1c	c2 20		rep #$20	                REP #$20
.0a1e	a9 00 01	lda #$0100	    lda #$0100
.0a21	85 52		sta $52		    sta IP
.0a23	e2 30		sep #$30	                SEP #$30
.0a25	a0 00		ldy #$00	    ldy #$00
.0a27					LOAD:
.0a27	b9 40 0a	lda $0a40,y	    lda X86PRG,y
.0a2a	48		pha		                pha
.0a2b	a9 02		lda #$02	                lda #$02
.0a2d	48		pha		                pha                     ; push the value to the stack
.0a2e	ab		plb		                plb                     ; pull value from stack to data bank register
.0a2f	68		pla		                pla
.0a30	91 52		sta ($52),y	    sta (IP),y
.0a32	c8		iny		    iny
.0a33	c0 08		cpy #$08	    cpy #$08
.0a35	f0 12		beq $0a49	    beq MAINLOOP
.0a37	48		pha		                pha
.0a38	a9 00		lda #$00	                lda #$00
.0a3a	48		pha		                pha                     ; push the value to the stack
.0a3b	ab		plb		                plb                     ; pull value from stack to data bank register
.0a3c	68		pla		                pla
.0a3d	4c 27 0a	jmp $0a27	    jmp LOAD
.0a40					X86PRG:
>0a40	b2 58 b4 02 cd 21 eb f8		    .byte $b2, $58, $b4, $02, $cd, $21, $eb, $f8, $00
>0a48	00
.0a49					MAINLOOP:
.0a49	a9 00		lda #$00	    lda #$00
.0a4b	eb		xba		    xba
.0a4c	20 93 0a	jsr $0a93	    jsr FETCH_IP
.0a4f	48		pha		                pha
.0a50	a9 00		lda #$00	                lda #$00
.0a52	48		pha		                pha                     ; push the value to the stack
.0a53	ab		plb		                plb                     ; pull value from stack to data bank register
.0a54	68		pla		                pla
.0a55	c2 30		rep #$30	                REP #$30
.0a57	0a		asl a		    asl
.0a58	a8		tay		    tay
.0a59	b9 0d 08	lda $080d,y	    lda JUMPTBL,y
.0a5c	8d 0d 0a	sta $0a0d	    sta JUMPADDR
.0a5f	e2 30		sep #$30	                SEP #$30
.0a61	6c 0d 0a	jmp ($0a0d)	    jmp (JUMPADDR)
.0a64					MAINLOOP_END:
.0a64	20 80 0a	jsr $0a80	    jsr INC_IP
.0a67	4c 49 0a	jmp $0a49	    jmp MAINLOOP
.0a6a					EXIT:
.0a6a	e2 30		sep #$30	                SEP #$30
.0a6c	48		pha		                pha
.0a6d	a9 00		lda #$00	                lda #$00
.0a6f	48		pha		                pha                     ; push the value to the stack
.0a70	ab		plb		                plb                     ; pull value from stack to data bank register
.0a71	68		pla		                pla
.0a72	a9 c0		lda #$c0	    lda #<msg2      ; print the startup message
.0a74	85 fe		sta $fe		    sta $fe
.0a76	a9 0a		lda #$0a	    lda #>msg2
.0a78	85 ff		sta $ff		    sta $ff
.0a7a	20 9c 0a	jsr $0a9c	    jsr print
.0a7d	38		sec		                sec
.0a7e	fb		xce		                xce
.0a7f	60		rts		    rts
.0a80					INC_IP:
.0a80	48		pha		                pha
.0a81	a9 00		lda #$00	                lda #$00
.0a83	48		pha		                pha                     ; push the value to the stack
.0a84	ab		plb		                plb                     ; pull value from stack to data bank register
.0a85	68		pla		                pla
.0a86	c2 20		rep #$20	                REP #$20
.0a88	a5 52		lda $52		    lda IP
.0a8a	18		clc		    clc
.0a8b	69 01 00	adc #$0001	    adc #$01
.0a8e	85 52		sta $52		    sta IP      ; increment IP
.0a90	e2 20		sep #$20	                SEP #$20
.0a92	60		rts		    rts
.0a93					FETCH_IP:
.0a93	48		pha		                pha
.0a94	a9 02		lda #$02	                lda #$02
.0a96	48		pha		                pha                     ; push the value to the stack
.0a97	ab		plb		                plb                     ; pull value from stack to data bank register
.0a98	68		pla		                pla
.0a99	b2 52		lda ($52)	    lda (IP)    ; get next value
.0a9b	60		rts		    rts
.0a9c					print:
.0a9c	a0 00		ldy #$00	    ldy #$00
.0a9e					nextch:
.0a9e	b1 fe		lda ($fe),y	    lda ($fe),y
.0aa0	f0 07		beq $0aa9	    beq +
.0aa2	20 d2 ff	jsr $ffd2	    jsr $FFD2
.0aa5	c8		iny		    iny
.0aa6	4c 9e 0a	jmp $0a9e	    jmp nextch
.0aa9	60		rts		+   rts
.0aaa					msg1:
>0aaa	93 0e d3 55 50 45 52 38		    .text $93,$0e,"Super8086 Emulator",$0d,$00
>0ab2	30 38 36 20 c5 4d 55 4c 41 54 4f 52 0d 00
.0ac0					msg2:
>0ac0	0d d4 45 52 4d 49 4e 41		    .text $0d,"Terminated",$0d,$00
>0ac8	54 45 44 0d 00
.0acd					j00:
.0acd	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0ad0					j01:
.0ad0	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0ad3					j02:
.0ad3	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0ad6					j03:
.0ad6	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0ad9					j04:
.0ad9	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0adc					j05:
.0adc	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0adf					j06:
.0adf	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0ae2					j07:
.0ae2	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0ae5					j08:
.0ae5	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0ae8					j09:
.0ae8	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0aeb					j0a:
.0aeb	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0aee					j0b:
.0aee	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0af1					j0c:
.0af1	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0af4					j0d:
.0af4	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0af7					j0e:
.0af7	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0afa					j0f:
.0afa	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0afd					j10:
.0afd	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0b00					j11:
.0b00	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0b03					j12:
.0b03	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0b06					j13:
.0b06	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0b09					j14:
.0b09	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0b0c					j15:
.0b0c	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0b0f					j16:
.0b0f	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0b12					j17:
.0b12	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0b15					j18:
.0b15	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0b18					j19:
.0b18	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0b1b					j1a:
.0b1b	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0b1e					j1b:
.0b1e	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0b21					j1c:
.0b21	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0b24					j1d:
.0b24	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0b27					j1e:
.0b27	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0b2a					j1f:
.0b2a	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0b2d					j20:
.0b2d	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0b30					j21:
.0b30	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0b33					j22:
.0b33	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0b36					j23:
.0b36	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0b39					j24:
.0b39	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0b3c					j25:
.0b3c	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0b3f					j26:
.0b3f	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0b42					j27:
.0b42	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0b45					j28:
.0b45	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0b48					j29:
.0b48	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0b4b					j2a:
.0b4b	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0b4e					j2b:
.0b4e	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0b51					j2c:
.0b51	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0b54					j2d:
.0b54	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0b57					j2e:
.0b57	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0b5a					j2f:
.0b5a	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0b5d					j30:
.0b5d	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0b60					j31:
.0b60	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0b63					j32:
.0b63	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0b66					j33:
.0b66	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0b69					j34:
.0b69	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0b6c					j35:
.0b6c	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0b6f					j36:
.0b6f	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0b72					j37:
.0b72	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0b75					j38:
.0b75	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0b78					j39:
.0b78	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0b7b					j3a:
.0b7b	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0b7e					j3b:
.0b7e	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0b81					j3c:
.0b81	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0b84					j3d:
.0b84	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0b87					j3e:
.0b87	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0b8a					j3f:
.0b8a	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0b8d					j40:
.0b8d	48		pha		                pha
.0b8e	a9 00		lda #$00	                lda #$00
.0b90	48		pha		                pha                     ; push the value to the stack
.0b91	ab		plb		                plb                     ; pull value from stack to data bank register
.0b92	68		pla		                pla
.0b93	c2 20		rep #$20	                REP #$20
.0b95	e6 42		inc $42		    inc AX
.0b97	e2 20		sep #$20	                SEP #$20
.0b99	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0b9c					j41:
.0b9c	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0b9f					j42:
.0b9f	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0ba2					j43:
.0ba2	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0ba5					j44:
.0ba5	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0ba8					j45:
.0ba8	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0bab					j46:
.0bab	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0bae					j47:
.0bae	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0bb1					j48:
.0bb1	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0bb4					j49:
.0bb4	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0bb7					j4a:
.0bb7	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0bba					j4b:
.0bba	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0bbd					j4c:
.0bbd	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0bc0					j4d:
.0bc0	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0bc3					j4e:
.0bc3	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0bc6					j4f:
.0bc6	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0bc9					j50:
.0bc9	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0bcc					j51:
.0bcc	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0bcf					j52:
.0bcf	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0bd2					j53:
.0bd2	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0bd5					j54:
.0bd5	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0bd8					j55:
.0bd8	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0bdb					j56:
.0bdb	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0bde					j57:
.0bde	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0be1					j58:
.0be1	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0be4					j59:
.0be4	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0be7					j5a:
.0be7	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0bea					j5b:
.0bea	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0bed					j5c:
.0bed	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0bf0					j5d:
.0bf0	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0bf3					j5e:
.0bf3	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0bf6					j5f:
.0bf6	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0bf9					j60:
.0bf9	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0bfc					j61:
.0bfc	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0bff					j62:
.0bff	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c02					j63:
.0c02	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c05					j64:
.0c05	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c08					j65:
.0c08	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c0b					j66:
.0c0b	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c0e					j67:
.0c0e	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c11					j68:
.0c11	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c14					j69:
.0c14	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c17					j6a:
.0c17	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c1a					j6b:
.0c1a	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c1d					j6c:
.0c1d	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c20					j6d:
.0c20	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c23					j6e:
.0c23	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c26					j6f:
.0c26	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c29					j70:
.0c29	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c2c					j71:
.0c2c	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c2f					j72:
.0c2f	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c32					j73:
.0c32	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c35					j74:
.0c35	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c38					j75:
.0c38	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c3b					j76:
.0c3b	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c3e					j77:
.0c3e	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c41					j78:
.0c41	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c44					j79:
.0c44	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c47					j7a:
.0c47	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c4a					j7b:
.0c4a	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c4d					j7c:
.0c4d	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c50					j7d:
.0c50	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c53					j7e:
.0c53	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c56					j7f:
.0c56	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c59					j80:
.0c59	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c5c					j81:
.0c5c	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c5f					j82:
.0c5f	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c62					j83:
.0c62	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c65					j84:
.0c65	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c68					j85:
.0c68	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c6b					j86:
.0c6b	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c6e					j87:
.0c6e	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c71					j88:
.0c71	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c74					j89:
.0c74	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c77					j8a:
.0c77	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c7a					j8b:
.0c7a	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c7d					j8c:
.0c7d	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c80					j8d:
.0c80	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c83					j8e:
.0c83	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c86					j8f:
.0c86	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c89					j90:
.0c89	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c8c					j91:
.0c8c	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c8f					j92:
.0c8f	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c92					j93:
.0c92	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c95					j94:
.0c95	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c98					j95:
.0c98	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c9b					j96:
.0c9b	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0c9e					j97:
.0c9e	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0ca1					j98:
.0ca1	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0ca4					j99:
.0ca4	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0ca7					j9a:
.0ca7	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0caa					j9b:
.0caa	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0cad					j9c:
.0cad	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0cb0					j9d:
.0cb0	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0cb3					j9e:
.0cb3	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0cb6					j9f:
.0cb6	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0cb9					ja0:
.0cb9	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0cbc					ja1:
.0cbc	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0cbf					ja2:
.0cbf	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0cc2					ja3:
.0cc2	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0cc5					ja4:
.0cc5	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0cc8					ja5:
.0cc8	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0ccb					ja6:
.0ccb	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0cce					ja7:
.0cce	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0cd1					ja8:
.0cd1	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0cd4					ja9:
.0cd4	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0cd7					jaa:
.0cd7	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0cda					jab:
.0cda	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0cdd					jac:
.0cdd	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0ce0					jad:
.0ce0	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0ce3					jae:
.0ce3	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0ce6					jaf:
.0ce6	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0ce9					jb0:
.0ce9	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0cec					jb1:
.0cec	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0cef					jb2:
.0cef	20 80 0a	jsr $0a80	    jsr INC_IP
.0cf2	20 93 0a	jsr $0a93	    jsr FETCH_IP
.0cf5	48		pha		                pha
.0cf6	a9 00		lda #$00	                lda #$00
.0cf8	48		pha		                pha                     ; push the value to the stack
.0cf9	ab		plb		                plb                     ; pull value from stack to data bank register
.0cfa	68		pla		                pla
.0cfb	85 48		sta $48		    sta DL      ; store it
.0cfd	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0d00					jb3:
.0d00	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0d03					jb4:
.0d03	20 80 0a	jsr $0a80	    jsr INC_IP
.0d06	20 93 0a	jsr $0a93	    jsr FETCH_IP
.0d09	48		pha		                pha
.0d0a	a9 00		lda #$00	                lda #$00
.0d0c	48		pha		                pha                     ; push the value to the stack
.0d0d	ab		plb		                plb                     ; pull value from stack to data bank register
.0d0e	68		pla		                pla
.0d0f	85 43		sta $43		    sta AH      ; store it
.0d11	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0d14					jb5:
.0d14	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0d17					jb6:
.0d17	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0d1a					jb7:
.0d1a	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0d1d					jb8:
.0d1d	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0d20					jb9:
.0d20	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0d23					jba:
.0d23	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0d26					jbb:
.0d26	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0d29					jbc:
.0d29	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0d2c					jbd:
.0d2c	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0d2f					jbe:
.0d2f	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0d32					jbf:
.0d32	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0d35					jc0:
.0d35	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0d38					jc1:
.0d38	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0d3b					jc2:
.0d3b	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0d3e					jc3:
.0d3e	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0d41					jc4:
.0d41	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0d44					jc5:
.0d44	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0d47					jc6:
.0d47	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0d4a					jc7:
.0d4a	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0d4d					jc8:
.0d4d	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0d50					jc9:
.0d50	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0d53					jca:
.0d53	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0d56					jcb:
.0d56	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0d59					jcc:
.0d59	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0d5c					jcd:
.0d5c	20 80 0a	jsr $0a80	    jsr INC_IP
.0d5f	20 93 0a	jsr $0a93	    jsr FETCH_IP
.0d62	c9 21		cmp #$21	    cmp #$21
.0d64	f0 07		beq $0d6d	    beq jcd_putc
.0d66	c9 20		cmp #$20	    cmp #$20
.0d68	f0 11		beq $0d7b	    beq jcd_exit
.0d6a	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0d6d					    jcd_putc:
.0d6d	48		pha		                pha
.0d6e	a9 00		lda #$00	                lda #$00
.0d70	48		pha		                pha                     ; push the value to the stack
.0d71	ab		plb		                plb                     ; pull value from stack to data bank register
.0d72	68		pla		                pla
.0d73	a5 48		lda $48		        lda DL
.0d75	20 d2 ff	jsr $ffd2	        jsr $FFD2
.0d78	4c 64 0a	jmp $0a64	        jmp MAINLOOP_END
.0d7b					    jcd_exit:
.0d7b	4c 6a 0a	jmp $0a6a	        jmp EXIT
.0d7e					jce:
.0d7e	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0d81					jcf:
.0d81	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0d84					jd0:
.0d84	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0d87					jd1:
.0d87	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0d8a					jd2:
.0d8a	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0d8d					jd3:
.0d8d	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0d90					jd4:
.0d90	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0d93					jd5:
.0d93	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0d96					jd6:
.0d96	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0d99					jd7:
.0d99	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0d9c					jd8:
.0d9c	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0d9f					jd9:
.0d9f	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0da2					jda:
.0da2	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0da5					jdb:
.0da5	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0da8					jdc:
.0da8	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0dab					jdd:
.0dab	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0dae					jde:
.0dae	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0db1					jdf:
.0db1	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0db4					je0:
.0db4	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0db7					je1:
.0db7	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0dba					je2:
.0dba	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0dbd					je3:
.0dbd	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0dc0					je4:
.0dc0	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0dc3					je5:
.0dc3	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0dc6					je6:
.0dc6	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0dc9					je7:
.0dc9	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0dcc					je8:
.0dcc	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0dcf					je9:
.0dcf	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0dd2					jea:
.0dd2	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0dd5					jeb:
.0dd5	20 80 0a	jsr $0a80	    jsr INC_IP
.0dd8	20 93 0a	jsr $0a93	    jsr FETCH_IP
.0ddb	48		pha		                pha
.0ddc	a9 00		lda #$00	                lda #$00
.0dde	48		pha		                pha                     ; push the value to the stack
.0ddf	ab		plb		                plb                     ; pull value from stack to data bank register
.0de0	68		pla		                pla
.0de1	c9 80		cmp #$80	    cmp #$80
.0de3	b0 10		bcs $0df5	    bcs jeb_back
.0de5					    jeb_forward:
.0de5	85 5e		sta $5e		        sta TMP1
.0de7	c2 20		rep #$20	                REP #$20
.0de9	a5 52		lda $52		        lda IP
.0deb	18		clc		        clc
.0dec	65 5e		adc $5e		        adc TMP1
.0dee	85 52		sta $52		        sta IP
.0df0	e2 20		sep #$20	                SEP #$20
.0df2	4c 49 0a	jmp $0a49	        jmp MAINLOOP
.0df5					    jeb_back:
.0df5	49 ff		eor #$ff	        eor #$ff
.0df7	85 5e		sta $5e		        sta TMP1
.0df9	c2 20		rep #$20	                REP #$20
.0dfb	a5 52		lda $52		        lda IP
.0dfd	38		sec		        sec
.0dfe	e5 5e		sbc $5e		        sbc TMP1
.0e00	85 52		sta $52		        sta IP
.0e02	e2 20		sep #$20	                SEP #$20
.0e04	4c 49 0a	jmp $0a49	        jmp MAINLOOP
.0e07					jec:
.0e07	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0e0a					jed:
.0e0a	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0e0d					jee:
.0e0d	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0e10					jef:
.0e10	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0e13					jf0:
.0e13	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0e16					jf1:
.0e16	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0e19					jf2:
.0e19	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0e1c					jf3:
.0e1c	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0e1f					jf4:
.0e1f	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0e22					jf5:
.0e22	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0e25					jf6:
.0e25	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0e28					jf7:
.0e28	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0e2b					jf8:
.0e2b	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0e2e					jf9:
.0e2e	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0e31					jfa:
.0e31	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0e34					jfb:
.0e34	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0e37					jfc:
.0e37	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0e3a					jfd:
.0e3a	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0e3d					jfe:
.0e3d	20 80 0a	jsr $0a80	    jsr INC_IP
.0e40	20 93 0a	jsr $0a93	    jsr FETCH_IP
.0e43	c9 c0		cmp #$c0	    cmp #$c0
.0e45	f0 07		beq $0e4e	    beq jfe_al
.0e47	c9 c4		cmp #$c4	    cmp #$c4
.0e49	f0 0e		beq $0e59	    beq jfe_ah
.0e4b	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END
.0e4e					    jfe_al:
.0e4e	48		pha		                pha
.0e4f	a9 00		lda #$00	                lda #$00
.0e51	48		pha		                pha                     ; push the value to the stack
.0e52	ab		plb		                plb                     ; pull value from stack to data bank register
.0e53	68		pla		                pla
.0e54	e6 42		inc $42		        inc AL
.0e56	4c 64 0a	jmp $0a64	        jmp MAINLOOP_END
.0e59					    jfe_ah:
.0e59	48		pha		                pha
.0e5a	a9 00		lda #$00	                lda #$00
.0e5c	48		pha		                pha                     ; push the value to the stack
.0e5d	ab		plb		                plb                     ; pull value from stack to data bank register
.0e5e	68		pla		                pla
.0e5f	e6 43		inc $43		        inc AH
.0e61	4c 64 0a	jmp $0a64	        jmp MAINLOOP_END
.0e64					jff:
.0e64	4c 64 0a	jmp $0a64	    jmp MAINLOOP_END

;******  End of listing
