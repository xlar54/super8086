
; 64tass Turbo Assembler Macro V1.53.1515 listing file
; 64tass -a -l target\super8086.lbl -L target\super8086.lst -o target\super8086 src\super8086.asm
; Sun Mar 20 11:27:46 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: src\super8086.asm


;******  Processing file: src\macros.asm


;******  Return to file: src\super8086.asm

=$020000				BANK = $020000
>0801	0b 08 d5 07			    .word (+), 2005
>0805	9e 32 35 37 35 00		    .null $9e, format("%d",start)
>080b	00 00				 +  .word 0
=$42					AX  = $42   ; the accumulator reg
=$42					AL  = $42
=$43					AH  = $43
=$44					BX  = $44   ; the base addr reg
=$44					BL  = $44
=$45					BH  = $45
=$46					CX  = $46   ; the count reg
=$46					CL  = $46
=$47					CH  = $47
=$48					DX  = $48   ; the data reg
=$48					DL  = $48
=$49					DH  = $49
=$4a					CS  = $4a   ; code segment reg
=$4c					DS  = $4c   ; data segment reg
=$4e					ES  = $4e   ; extra segment reg
=$50					SS  = $50   ; stack segment reg
=$52					IP  = $52   ; instruction pointer
=$54					FR  = $54   ; flags register
=$54					FRH = $54
=$55					FRL = $55
=$56					SP  = $56   ; stack pointer reg
=$58					BP  = $58   ; base pointer reg
=$5a					SI  = $5a   ; source index reg
=$5c					DI  = $5c   ; destination index reg
=$5e					TMP1 = $5e
.080d					JUMPTBL:
>080d	68 0e 02 0f 05 0f 08 0f		    .word j00, j01, j02, j03, j04, j05, j06, j07, j08, j09, j0a, j0b, j0c, j0d, j0e, j0f
>0815	0b 0f 0e 0f 11 0f 34 0f 5b 0f 5e 0f 61 0f 64 0f
>0825	67 0f 6a 0f 6d 0f 90 0f
>082d	b7 0f ba 0f bd 0f c0 0f		    .word j10, j11, j12, j13, j14, j15, j16, j17, j18, j19, j1a, j1b, j1c, j1d, j1e, j1f
>0835	c3 0f c6 0f c9 0f ec 0f 13 10 16 10 19 10 1c 10
>0845	1f 10 22 10 25 10 48 10
>084d	6f 10 72 10 91 11 94 11		    .word j20, j21, j22, j23, j24, j25, j26, j27, j28, j29, j2a, j2b, j2c, j2d, j2e, j2f
>0855	97 11 9a 11 9d 11 a0 11 a3 11 a6 11 a9 11 ac 11
>0865	af 11 b2 11 b5 11 b8 11
>086d	bb 11 be 11 c1 11 c4 11		    .word j30, j31, j32, j33, j34, j35, j36, j37, j38, j39, j3a, j3b, j3c, j3d, j3e, j3f
>0875	c7 11 ca 11 cd 11 d0 11 d3 11 d6 11 d9 11 dc 11
>0885	df 11 e2 11 e5 11 e8 11
>088d	eb 11 fa 11 09 12 18 12		    .word j40, j41, j42, j43, j44, j45, j46, j47, j48, j49, j4a, j4b, j4c, j4d, j4e, j4f
>0895	27 12 2a 12 2d 12 30 12 33 12 36 12 39 12 3c 12
>08a5	3f 12 42 12 45 12 48 12
>08ad	4b 12 6e 12 91 12 b4 12		    .word j50, j51, j52, j53, j54, j55, j56, j57, j58, j59, j5a, j5b, j5c, j5d, j5e, j5f
>08b5	d7 12 da 12 fd 12 20 13 43 13 6a 13 91 13 b8 13
>08c5	df 13 e2 13 09 14 30 14
>08cd	57 14 5a 14 5d 14 60 14		    .word j60, j61, j62, j63, j64, j65, j66, j67, j68, j69, j6a, j6b, j6c, j6d, j6e, j6f
>08d5	63 14 66 14 69 14 6c 14 6f 14 72 14 75 14 78 14
>08e5	7b 14 7e 14 81 14 84 14
>08ed	87 14 8a 14 8d 14 90 14		    .word j70, j71, j72, j73, j74, j75, j76, j77, j78, j79, j7a, j7b, j7c, j7d, j7e, j7f
>08f5	93 14 96 14 99 14 9c 14 ce 14 d1 14 d4 14 d7 14
>0905	da 14 dd 14 e0 14 e3 14
>090d	e6 14 e9 14 ec 14 ef 14		    .word j80, j81, j82, j83, j84, j85, j86, j87, j88, j89, j8a, j8b, j8c, j8d, j8e, j8f
>0915	f2 14 f5 14 f8 14 fb 14 fe 14 01 15 57 16 5a 16
>0925	5d 16 60 16 63 16 66 16
>092d	69 16 6c 16 6f 16 72 16		    .word j90, j91, j92, j93, j94, j95, j96, j97, j98, j99, j9a, j9b, j9c, j9d, j9e, j9f
>0935	75 16 78 16 7b 16 7e 16 81 16 84 16 87 16 8a 16
>0945	8d 16 b0 16 d7 16 e4 16
>094d	f1 16 f4 16 f7 16 fa 16		    .word ja0, ja1, ja2, ja3, ja4, ja5, ja6, ja7, ja8, ja9, jaa, jab, jac, jad, jae, jaf
>0955	fd 16 00 17 03 17 06 17 09 17 0c 17 0f 17 12 17
>0965	15 17 18 17 1b 17 1e 17
>096d	21 17 2f 17 3d 17 4b 17		    .word jb0, jb1, jb2, jb3, jb4, jb5, jb6, jb7, jb8, jb9, jba, jbb, jbc, jbd, jbe, jbf
>0975	59 17 67 17 75 17 83 17 91 17 aa 17 c3 17 dc 17
>0985	f5 17 f8 17 fb 17 fe 17
>098d	01 18 04 18 07 18 0a 18		    .word jc0, jc1, jc2, jc3, jc4, jc5, jc6, jc7, jc8, jc9, jca, jcb, jcc, jcd, jce, jcf
>0995	0d 18 10 18 13 18 16 18 19 18 1c 18 1f 18 22 18
>09a5	25 18 28 18 6b 18 6e 18
>09ad	71 18 74 18 77 18 7a 18		    .word jd0, jd1, jd2, jd3, jd4, jd5, jd6, jd7, jd8, jd9, jda, jdb, jdc, jdd, jde, jdf
>09b5	7d 18 80 18 83 18 86 18 89 18 8c 18 8f 18 92 18
>09c5	95 18 98 18 9b 18 9e 18
>09cd	a1 18 a4 18 a7 18 e8 18		    .word je0, je1, je2, je3, je4, je5, je6, je7, je8, je9, jea, jeb, jec, jed, jee, jef
>09d5	eb 18 ee 18 f1 18 f4 18 f7 18 fa 18 fd 18 00 19
>09e5	2f 19 32 19 35 19 38 19
>09ed	3b 19 3e 19 41 19 44 19		    .word jf0, jf1, jf2, jf3, jf4, jf5, jf6, jf7, jf8, jf9, jfa, jfb, jfc, jfd, jfe, jff
>09f5	47 19 4a 19 4d 19 50 19 53 19 56 19 59 19 5c 19
>0a05	5f 19 62 19 65 19 e3 19
.0a0d					JUMPADDR:
>0a0d	00 00				    .word $0000
.0a0f					start:
.0a0f	a9 48		lda #$48	    lda #<msg1      ; print the startup message
.0a11	85 fe		sta $fe		    sta $fe
.0a13	a9 0d		lda #$0d	    lda #>msg1
.0a15	85 ff		sta $ff		    sta $ff
.0a17	20 12 0d	jsr $0d12	    jsr print
.0a1a	18		clc		                clc
.0a1b	fb		xce		                xce
.0a1c	c2 20		rep #$20	                REP #$20
.0a1e	64 42		stz $42		    stz AX
.0a20	64 44		stz $44		    stz BX
.0a22	64 46		stz $46		    stz CX
.0a24	64 48		stz $48		    stz DX
.0a26	64 4a		stz $4a		    stz CS
.0a28	64 4c		stz $4c		    stz DS
.0a2a	64 4e		stz $4e		    stz ES
.0a2c	64 50		stz $50		    stz SS
.0a2e	64 54		stz $54		    stz FR
.0a30	a9 00 01	lda #$0100	    lda #$0100
.0a33	85 52		sta $52		    sta IP
.0a35	a9 fe ff	lda #$fffe	    lda #$FFFE
.0a38	85 56		sta $56		    sta SP
.0a3a	e2 30		sep #$30	                SEP #$30
.0a3c	a0 00		ldy #$00	    ldy #$00
.0a3e					LOAD:
.0a3e	b9 57 0a	lda $0a57,y	    lda X86PRG,y
.0a41	48		pha		                pha
.0a42	a9 02		lda #$02	                lda #$02
.0a44	48		pha		                pha                     ; push the value to the stack
.0a45	ab		plb		                plb                     ; pull value from stack to data bank register
.0a46	68		pla		                pla
.0a47	91 52		sta ($52),y	    sta (IP),y
.0a49	c8		iny		    iny
.0a4a	c0 2a		cpy #$2a	    cpy #$2a
.0a4c	f0 25		beq $0a73	    beq MAINLOOP
.0a4e	48		pha		                pha
.0a4f	a9 00		lda #$00	                lda #$00
.0a51	48		pha		                pha                     ; push the value to the stack
.0a52	ab		plb		                plb                     ; pull value from stack to data bank register
.0a53	68		pla		                pla
.0a54	4c 3e 0a	jmp $0a3e	    jmp LOAD
.0a57					X86PRG:
>0a57	b0 01				    .byte $b0, $01
>0a59	b3 00				    .byte $b3, $00
>0a5b	00 d8				    .byte $00, $d8
>0a5d	cd 20				    .byte $cd, $20
>0a5f	48 45 4c 4c 4f 20 57 4f		    .text "hello world$"
>0a67	52 4c 44 24
>0a6b	cd 20				    .byte $cd, $20      ; int 21
>0a6d	fe c2				    .byte $fe, $c2      ; inc DL
>0a6f	e2 f8				    .byte $e2, $f8      ; loop 0105
>0a71	cd 20				    .byte $cd, $20      ; int 20
.0a73					MAINLOOP:
.0a73	a9 00		lda #$00	    lda #$00
.0a75	eb		xba		    xba
.0a76	20 09 0d	jsr $0d09	    jsr FETCH_IP
.0a79	48		pha		                pha
.0a7a	a9 00		lda #$00	                lda #$00
.0a7c	48		pha		                pha                     ; push the value to the stack
.0a7d	ab		plb		                plb                     ; pull value from stack to data bank register
.0a7e	68		pla		                pla
.0a7f	c2 30		rep #$30	                REP #$30
.0a81	0a		asl a		    asl
.0a82	a8		tay		    tay
.0a83	b9 0d 08	lda $080d,y	    lda JUMPTBL,y
.0a86	8d 0d 0a	sta $0a0d	    sta JUMPADDR
.0a89	e2 30		sep #$30	                SEP #$30
.0a8b	6c 0d 0a	jmp ($0a0d)	    jmp (JUMPADDR)
.0a8e					MAINLOOP_END:
.0a8e	20 f6 0c	jsr $0cf6	    jsr INC_IP
.0a91	4c 73 0a	jmp $0a73	    jmp MAINLOOP
.0a94					EXIT:
.0a94	e2 30		sep #$30	                SEP #$30
.0a96	48		pha		                pha
.0a97	a9 00		lda #$00	                lda #$00
.0a99	48		pha		                pha                     ; push the value to the stack
.0a9a	ab		plb		                plb                     ; pull value from stack to data bank register
.0a9b	68		pla		                pla
.0a9c	a9 5e		lda #$5e	    lda #<txt_ax      ; print the startup message
.0a9e	85 fe		sta $fe		    sta $fe
.0aa0	a9 0d		lda #$0d	    lda #>txt_ax
.0aa2	85 ff		sta $ff		    sta $ff
.0aa4	20 12 0d	jsr $0d12	    jsr print
.0aa7	a5 43		lda $43		    lda AH
.0aa9	20 20 0d	jsr $0d20	    jsr prhex
.0aac	a5 42		lda $42		    lda AL
.0aae	20 20 0d	jsr $0d20	    jsr prhex
.0ab1	a9 20		lda #$20	    lda #' '
.0ab3	20 d2 ff	jsr $ffd2	    jsr $FFD2
.0ab6	a9 64		lda #$64	    lda #<txt_bx      ; print the startup message
.0ab8	85 fe		sta $fe		    sta $fe
.0aba	a9 0d		lda #$0d	    lda #>txt_bx
.0abc	85 ff		sta $ff		    sta $ff
.0abe	20 12 0d	jsr $0d12	    jsr print
.0ac1	a5 45		lda $45		    lda BH
.0ac3	20 20 0d	jsr $0d20	    jsr prhex
.0ac6	a5 44		lda $44		    lda BL
.0ac8	20 20 0d	jsr $0d20	    jsr prhex
.0acb	a9 20		lda #$20	    lda #' '
.0acd	20 d2 ff	jsr $ffd2	    jsr $FFD2
.0ad0	a9 68		lda #$68	    lda #<txt_cx      ; print the startup message
.0ad2	85 fe		sta $fe		    sta $fe
.0ad4	a9 0d		lda #$0d	    lda #>txt_cx
.0ad6	85 ff		sta $ff		    sta $ff
.0ad8	20 12 0d	jsr $0d12	    jsr print
.0adb	a5 47		lda $47		    lda CH
.0add	20 20 0d	jsr $0d20	    jsr prhex
.0ae0	a5 46		lda $46		    lda CL
.0ae2	20 20 0d	jsr $0d20	    jsr prhex
.0ae5	a9 20		lda #$20	    lda #' '
.0ae7	20 d2 ff	jsr $ffd2	    jsr $FFD2
.0aea	a9 6c		lda #$6c	    lda #<txt_dx      ; print the startup message
.0aec	85 fe		sta $fe		    sta $fe
.0aee	a9 0d		lda #$0d	    lda #>txt_dx
.0af0	85 ff		sta $ff		    sta $ff
.0af2	20 12 0d	jsr $0d12	    jsr print
.0af5	a5 49		lda $49		    lda DH
.0af7	20 20 0d	jsr $0d20	    jsr prhex
.0afa	a5 48		lda $48		    lda DL
.0afc	20 20 0d	jsr $0d20	    jsr prhex
.0aff	a9 70		lda #$70	    lda #<txt_sp      ; print the startup message
.0b01	85 fe		sta $fe		    sta $fe
.0b03	a9 0d		lda #$0d	    lda #>txt_sp
.0b05	85 ff		sta $ff		    sta $ff
.0b07	20 12 0d	jsr $0d12	    jsr print
.0b0a	a5 56		lda $56		    lda SP
.0b0c	20 20 0d	jsr $0d20	    jsr prhex
.0b0f	a5 57		lda $57		    lda SP+1
.0b11	20 20 0d	jsr $0d20	    jsr prhex
.0b14	a9 20		lda #$20	    lda #' '
.0b16	20 d2 ff	jsr $ffd2	    jsr $FFD2
.0b19	a9 75		lda #$75	    lda #<txt_bp      ; print the startup message
.0b1b	85 fe		sta $fe		    sta $fe
.0b1d	a9 0d		lda #$0d	    lda #>txt_bp
.0b1f	85 ff		sta $ff		    sta $ff
.0b21	20 12 0d	jsr $0d12	    jsr print
.0b24	a5 58		lda $58		    lda BP
.0b26	20 20 0d	jsr $0d20	    jsr prhex
.0b29	a5 5a		lda $5a		    lda BP+2
.0b2b	20 20 0d	jsr $0d20	    jsr prhex
.0b2e	a9 20		lda #$20	    lda #' '
.0b30	20 d2 ff	jsr $ffd2	    jsr $FFD2
.0b33	a9 79		lda #$79	    lda #<txt_si      ; print the startup message
.0b35	85 fe		sta $fe		    sta $fe
.0b37	a9 0d		lda #$0d	    lda #>txt_si
.0b39	85 ff		sta $ff		    sta $ff
.0b3b	20 12 0d	jsr $0d12	    jsr print
.0b3e	a5 5a		lda $5a		    lda SI
.0b40	20 20 0d	jsr $0d20	    jsr prhex
.0b43	a5 5c		lda $5c		    lda SI+2
.0b45	20 20 0d	jsr $0d20	    jsr prhex
.0b48	a9 20		lda #$20	    lda #' '
.0b4a	20 d2 ff	jsr $ffd2	    jsr $FFD2
.0b4d	a9 7d		lda #$7d	    lda #<txt_di      ; print the startup message
.0b4f	85 fe		sta $fe		    sta $fe
.0b51	a9 0d		lda #$0d	    lda #>txt_di
.0b53	85 ff		sta $ff		    sta $ff
.0b55	20 12 0d	jsr $0d12	    jsr print
.0b58	a5 5c		lda $5c		    lda DI
.0b5a	20 20 0d	jsr $0d20	    jsr prhex
.0b5d	a5 5e		lda $5e		    lda DI+2
.0b5f	20 20 0d	jsr $0d20	    jsr prhex
.0b62	a9 81		lda #$81	    lda #<txt_ds      ; print the startup message
.0b64	85 fe		sta $fe		    sta $fe
.0b66	a9 0d		lda #$0d	    lda #>txt_ds
.0b68	85 ff		sta $ff		    sta $ff
.0b6a	20 12 0d	jsr $0d12	    jsr print
.0b6d	a5 4c		lda $4c		    lda DS
.0b6f	20 20 0d	jsr $0d20	    jsr prhex
.0b72	a5 4d		lda $4d		    lda DS+1
.0b74	20 20 0d	jsr $0d20	    jsr prhex
.0b77	a9 20		lda #$20	    lda #' '
.0b79	20 d2 ff	jsr $ffd2	    jsr $FFD2
.0b7c	a9 86		lda #$86	    lda #<txt_es      ; print the startup message
.0b7e	85 fe		sta $fe		    sta $fe
.0b80	a9 0d		lda #$0d	    lda #>txt_es
.0b82	85 ff		sta $ff		    sta $ff
.0b84	20 12 0d	jsr $0d12	    jsr print
.0b87	a5 4e		lda $4e		    lda ES
.0b89	20 20 0d	jsr $0d20	    jsr prhex
.0b8c	a5 50		lda $50		    lda ES+2
.0b8e	20 20 0d	jsr $0d20	    jsr prhex
.0b91	a9 20		lda #$20	    lda #' '
.0b93	20 d2 ff	jsr $ffd2	    jsr $FFD2
.0b96	a9 8a		lda #$8a	    lda #<txt_ss      ; print the startup message
.0b98	85 fe		sta $fe		    sta $fe
.0b9a	a9 0d		lda #$0d	    lda #>txt_ss
.0b9c	85 ff		sta $ff		    sta $ff
.0b9e	20 12 0d	jsr $0d12	    jsr print
.0ba1	a5 50		lda $50		    lda SS
.0ba3	20 20 0d	jsr $0d20	    jsr prhex
.0ba6	a5 52		lda $52		    lda SS+2
.0ba8	20 20 0d	jsr $0d20	    jsr prhex
.0bab	a9 20		lda #$20	    lda #' '
.0bad	20 d2 ff	jsr $ffd2	    jsr $FFD2
.0bb0	a9 8e		lda #$8e	    lda #<txt_cs      ; print the startup message
.0bb2	85 fe		sta $fe		    sta $fe
.0bb4	a9 0d		lda #$0d	    lda #>txt_cs
.0bb6	85 ff		sta $ff		    sta $ff
.0bb8	20 12 0d	jsr $0d12	    jsr print
.0bbb	a5 4a		lda $4a		    lda CS
.0bbd	20 20 0d	jsr $0d20	    jsr prhex
.0bc0	a5 4c		lda $4c		    lda CS+2
.0bc2	20 20 0d	jsr $0d20	    jsr prhex
.0bc5	a9 92		lda #$92	    lda #<txt_ip      ; print the startup message
.0bc7	85 fe		sta $fe		    sta $fe
.0bc9	a9 0d		lda #$0d	    lda #>txt_ip
.0bcb	85 ff		sta $ff		    sta $ff
.0bcd	20 12 0d	jsr $0d12	    jsr print
.0bd0	a5 53		lda $53		    lda IP+1
.0bd2	20 20 0d	jsr $0d20	    jsr prhex
.0bd5	a5 52		lda $52		    lda IP
.0bd7	20 20 0d	jsr $0d20	    jsr prhex
.0bda	a9 20		lda #$20	    lda #' '
.0bdc	20 d2 ff	jsr $ffd2	    jsr $FFD2
.0bdf	a9 97		lda #$97	    lda #<txt_fr      ; print the startup message
.0be1	85 fe		sta $fe		    sta $fe
.0be3	a9 0d		lda #$0d	    lda #>txt_fr
.0be5	85 ff		sta $ff		    sta $ff
.0be7	20 12 0d	jsr $0d12	    jsr print
.0bea	a5 54		lda $54		    lda FRH
.0bec	20 20 0d	jsr $0d20	    jsr prhex
.0bef	a5 55		lda $55		    lda FRL
.0bf1	20 20 0d	jsr $0d20	    jsr prhex
.0bf4					fl_ovnv
.0bf4	a5 54		lda $54		    lda FRH
.0bf6	29 08		and #$08	    and #$08
.0bf8	f0 0e		beq $0c08	    beq +
.0bfa	a9 9e		lda #$9e	    lda #<txt_fr_ov      ; print the startup message
.0bfc	85 fe		sta $fe		    sta $fe
.0bfe	a9 0d		lda #$0d	    lda #>txt_fr_ov
.0c00	85 ff		sta $ff		    sta $ff
.0c02	20 12 0d	jsr $0d12	    jsr print
.0c05	4c 13 0c	jmp $0c13	    jmp fl_updn
.0c08	a9 a3		lda #$a3	+   lda #<txt_fr_nv      ; print the startup message
.0c0a	85 fe		sta $fe		    sta $fe
.0c0c	a9 0d		lda #$0d	    lda #>txt_fr_nv
.0c0e	85 ff		sta $ff		    sta $ff
.0c10	20 12 0d	jsr $0d12	    jsr print
.0c13					fl_updn
.0c13	a5 54		lda $54		    lda FRH
.0c15	29 04		and #$04	    and #$04
.0c17	f0 0e		beq $0c27	    beq +
.0c19	a9 ac		lda #$ac	    lda #<txt_fr_dn      ; print the startup message
.0c1b	85 fe		sta $fe		    sta $fe
.0c1d	a9 0d		lda #$0d	    lda #>txt_fr_dn
.0c1f	85 ff		sta $ff		    sta $ff
.0c21	20 12 0d	jsr $0d12	    jsr print
.0c24	4c 32 0c	jmp $0c32	    jmp fl_eidi
.0c27	a9 a8		lda #$a8	+   lda #<txt_fr_up      ; print the startup message
.0c29	85 fe		sta $fe		    sta $fe
.0c2b	a9 0d		lda #$0d	    lda #>txt_fr_up
.0c2d	85 ff		sta $ff		    sta $ff
.0c2f	20 12 0d	jsr $0d12	    jsr print
.0c32					fl_eidi
.0c32	a5 54		lda $54		    lda FRH
.0c34	29 02		and #$02	    and #$02
.0c36	f0 0e		beq $0c46	    beq +
.0c38	a9 b0		lda #$b0	    lda #<txt_fr_ei      ; print the startup message
.0c3a	85 fe		sta $fe		    sta $fe
.0c3c	a9 0d		lda #$0d	    lda #>txt_fr_ei
.0c3e	85 ff		sta $ff		    sta $ff
.0c40	20 12 0d	jsr $0d12	    jsr print
.0c43	4c 51 0c	jmp $0c51	    jmp fl_plng
.0c46	a9 b4		lda #$b4	+   lda #<txt_fr_di      ; print the startup message
.0c48	85 fe		sta $fe		    sta $fe
.0c4a	a9 0d		lda #$0d	    lda #>txt_fr_di
.0c4c	85 ff		sta $ff		    sta $ff
.0c4e	20 12 0d	jsr $0d12	    jsr print
.0c51					fl_plng
.0c51	a5 55		lda $55		    lda FRL
.0c53	29 80		and #$80	    and #$80
.0c55	f0 0e		beq $0c65	    beq +
.0c57	a9 b8		lda #$b8	    lda #<txt_fr_ng      ; print the startup message
.0c59	85 fe		sta $fe		    sta $fe
.0c5b	a9 0d		lda #$0d	    lda #>txt_fr_ng
.0c5d	85 ff		sta $ff		    sta $ff
.0c5f	20 12 0d	jsr $0d12	    jsr print
.0c62	4c 70 0c	jmp $0c70	    jmp fl_zrnz
.0c65	a9 bc		lda #$bc	+   lda #<txt_fr_pl      ; print the startup message
.0c67	85 fe		sta $fe		    sta $fe
.0c69	a9 0d		lda #$0d	    lda #>txt_fr_pl
.0c6b	85 ff		sta $ff		    sta $ff
.0c6d	20 12 0d	jsr $0d12	    jsr print
.0c70					fl_zrnz
.0c70	a5 55		lda $55		    lda FRL
.0c72	29 40		and #$40	    and #$40
.0c74	f0 0e		beq $0c84	    beq +
.0c76	a9 c0		lda #$c0	    lda #<txt_fr_zr      ; print the startup message
.0c78	85 fe		sta $fe		    sta $fe
.0c7a	a9 0d		lda #$0d	    lda #>txt_fr_zr
.0c7c	85 ff		sta $ff		    sta $ff
.0c7e	20 12 0d	jsr $0d12	    jsr print
.0c81	4c 8f 0c	jmp $0c8f	    jmp fl_acna
.0c84	a9 c4		lda #$c4	+   lda #<txt_fr_nz      ; print the startup message
.0c86	85 fe		sta $fe		    sta $fe
.0c88	a9 0d		lda #$0d	    lda #>txt_fr_nz
.0c8a	85 ff		sta $ff		    sta $ff
.0c8c	20 12 0d	jsr $0d12	    jsr print
.0c8f					fl_acna
.0c8f	a5 55		lda $55		    lda FRL
.0c91	29 10		and #$10	    and #$10
.0c93	f0 0e		beq $0ca3	    beq +
.0c95	a9 c8		lda #$c8	    lda #<txt_fr_ac      ; print the startup message
.0c97	85 fe		sta $fe		    sta $fe
.0c99	a9 0d		lda #$0d	    lda #>txt_fr_ac
.0c9b	85 ff		sta $ff		    sta $ff
.0c9d	20 12 0d	jsr $0d12	    jsr print
.0ca0	4c ae 0c	jmp $0cae	    jmp fl_pepo
.0ca3	a9 cc		lda #$cc	+   lda #<txt_fr_na      ; print the startup message
.0ca5	85 fe		sta $fe		    sta $fe
.0ca7	a9 0d		lda #$0d	    lda #>txt_fr_na
.0ca9	85 ff		sta $ff		    sta $ff
.0cab	20 12 0d	jsr $0d12	    jsr print
.0cae					fl_pepo
.0cae	a5 55		lda $55		    lda FRL
.0cb0	29 04		and #$04	    and #$04
.0cb2	f0 0e		beq $0cc2	    beq +
.0cb4	a9 d0		lda #$d0	    lda #<txt_fr_pe      ; print the startup message
.0cb6	85 fe		sta $fe		    sta $fe
.0cb8	a9 0d		lda #$0d	    lda #>txt_fr_pe
.0cba	85 ff		sta $ff		    sta $ff
.0cbc	20 12 0d	jsr $0d12	    jsr print
.0cbf	4c cd 0c	jmp $0ccd	    jmp fl_cync
.0cc2	a9 d4		lda #$d4	+   lda #<txt_fr_po      ; print the startup message
.0cc4	85 fe		sta $fe		    sta $fe
.0cc6	a9 0d		lda #$0d	    lda #>txt_fr_po
.0cc8	85 ff		sta $ff		    sta $ff
.0cca	20 12 0d	jsr $0d12	    jsr print
.0ccd					fl_cync
.0ccd	a5 55		lda $55		    lda FRL
.0ccf	29 01		and #$01	    and #$01
.0cd1	f0 0e		beq $0ce1	    beq +
.0cd3	a9 d8		lda #$d8	    lda #<txt_fr_cy      ; print the startup message
.0cd5	85 fe		sta $fe		    sta $fe
.0cd7	a9 0d		lda #$0d	    lda #>txt_fr_cy
.0cd9	85 ff		sta $ff		    sta $ff
.0cdb	20 12 0d	jsr $0d12	    jsr print
.0cde	4c ec 0c	jmp $0cec	    jmp fl_done
.0ce1	a9 dc		lda #$dc	+   lda #<txt_fr_nc      ; print the startup message
.0ce3	85 fe		sta $fe		    sta $fe
.0ce5	a9 0d		lda #$0d	    lda #>txt_fr_nc
.0ce7	85 ff		sta $ff		    sta $ff
.0ce9	20 12 0d	jsr $0d12	    jsr print
.0cec					fl_done
.0cec	38		sec		                sec
.0ced	fb		xce		                xce
.0cee	60		rts		    rts
.0cef					GETNEXT:
.0cef	20 f6 0c	jsr $0cf6	    jsr INC_IP
.0cf2	20 09 0d	jsr $0d09	    jsr FETCH_IP
.0cf5	60		rts		    rts
.0cf6					INC_IP:
.0cf6	48		pha		                pha
.0cf7	a9 00		lda #$00	                lda #$00
.0cf9	48		pha		                pha                     ; push the value to the stack
.0cfa	ab		plb		                plb                     ; pull value from stack to data bank register
.0cfb	68		pla		                pla
.0cfc	c2 20		rep #$20	                REP #$20
.0cfe	a5 52		lda $52		    lda IP
.0d00	18		clc		    clc
.0d01	69 01 00	adc #$0001	    adc #$01
.0d04	85 52		sta $52		    sta IP      ; increment IP
.0d06	e2 20		sep #$20	                SEP #$20
.0d08	60		rts		    rts
.0d09					FETCH_IP:
.0d09	48		pha		                pha
.0d0a	a9 02		lda #$02	                lda #$02
.0d0c	48		pha		                pha                     ; push the value to the stack
.0d0d	ab		plb		                plb                     ; pull value from stack to data bank register
.0d0e	68		pla		                pla
.0d0f	b2 52		lda ($52)	    lda (IP)    ; get next value
.0d11	60		rts		    rts
.0d12					print:
.0d12	a0 00		ldy #$00	    ldy #$00
.0d14					nextch:
.0d14	b1 fe		lda ($fe),y	    lda ($fe),y
.0d16	f0 07		beq $0d1f	    beq +
.0d18	20 d2 ff	jsr $ffd2	    jsr $FFD2
.0d1b	c8		iny		    iny
.0d1c	4c 14 0d	jmp $0d14	    jmp nextch
.0d1f	60		rts		+   rts
.0d20					prhex
.0d20	48		pha		                pha
.0d21	a9 00		lda #$00	                lda #$00
.0d23	48		pha		                pha                     ; push the value to the stack
.0d24	ab		plb		                plb                     ; pull value from stack to data bank register
.0d25	68		pla		                pla
.0d26	da		phx		        phx                 ; save x
.0d27	20 33 0d	jsr $0d33	        jsr asctwo          ; get hex chars for byte in x (lower) and a (upper)
.0d2a	20 d2 ff	jsr $ffd2	        jsr $ffd2          ; output upper nybble
.0d2d	8a		txa		        txa                 ; transfer lower to a
.0d2e	fa		plx		        plx                 ; restore x
.0d2f	20 d2 ff	jsr $ffd2	        jsr $ffd2          ; output lower nybble
.0d32	60		rts		        rts
.0d33	48		pha		asctwo  pha                 ; save byte
.0d34	20 3d 0d	jsr $0d3d	        jsr ascii           ; do low nybble
.0d37	aa		tax		        tax                 ; save in x
.0d38	68		pla		        pla                 ; restore byte
.0d39	4a		lsr a		        lsr                 ; shift upper nybble down
.0d3a	4a		lsr a		        lsr
.0d3b	4a		lsr a		        lsr
.0d3c	4a		lsr a		        lsr
.0d3d	29 0f		and #$0f	ascii   and #$0f            ; clear upper nibble
.0d3f	c9 0a		cmp #$0a	        cmp #$0a            ; if less than a, skip next step
.0d41	90 02		bcc $0d45	        bcc asc1
.0d43	69 06		adc #$06	        adc #6              ; skip ascii chars between 9 and a
.0d45	69 30		adc #$30	asc1    adc #$30            ; add ascii char 0 to value
.0d47	60		rts		        rts
.0d48					msg1:
>0d48	93 0e d3 55 50 45 52 38		    .text $93,$0e,"Super8086 Emulator",$0d,$00
>0d50	30 38 36 20 c5 4d 55 4c 41 54 4f 52 0d 00
.0d5e					txt_ax:
>0d5e	0d 0d 41 58 3d 00		    .text $0d,$0d,"ax=",$00
.0d64					txt_bx:
>0d64	42 58 3d 00			    .text "bx=",$00
.0d68					txt_cx
>0d68	43 58 3d 00			    .text "cx=",$00
.0d6c					txt_dx
>0d6c	44 58 3d 00			    .text "dx=",$00
.0d70					txt_sp:
>0d70	0d 53 50 3d 00			    .text $0d,"sp=",$00
.0d75					txt_bp:
>0d75	42 50 3d 00			    .text "bp=",$00
.0d79					txt_si
>0d79	53 49 3d 00			    .text "si=",$00
.0d7d					txt_di
>0d7d	44 49 3d 00			    .text "di=",$00
.0d81					txt_ds:
>0d81	0d 44 53 3d 00			    .text $0d,"ds=",$00
.0d86					txt_es:
>0d86	45 53 3d 00			    .text "es=",$00
.0d8a					txt_ss
>0d8a	53 53 3d 00			    .text "ss=",$00
.0d8e					txt_cs
>0d8e	43 53 3d 00			    .text "cs=",$00
.0d92					txt_ip:
>0d92	0d 49 50 3d 00			    .text $0d,"ip=",$00
.0d97					txt_fr:
>0d97	46 4c 41 47 53 3d 00		    .text "flags=",$00
.0d9e					txt_fr_ov:
>0d9e	0d cf d6 20 00			    .text $0d,"OV ",$00
.0da3					txt_fr_nv:
>0da3	0d ce d6 20 00			    .text $0d,"NV ",$00
.0da8					txt_fr_up:
>0da8	d5 d0 20 00			    .text "UP ",$00
.0dac					txt_fr_dn:
>0dac	c4 ce 20 00			    .text "DN ",$00
.0db0					txt_fr_ei:
>0db0	c5 c9 20 00			    .text "EI ",$00
.0db4					txt_fr_di:
>0db4	c4 c9 20 00			    .text "DI ",$00
.0db8					txt_fr_ng:
>0db8	ce c7 20 00			    .text "NG ",$00
.0dbc					txt_fr_pl:
>0dbc	d0 cc 20 00			    .text "PL ",$00
.0dc0					txt_fr_zr:
>0dc0	da d2 20 00			    .text "ZR ",$00
.0dc4					txt_fr_nz:
>0dc4	ce da 20 00			    .text "NZ ",$00
.0dc8					txt_fr_ac:
>0dc8	c1 c3 20 00			    .text "AC ",$00
.0dcc					txt_fr_na:
>0dcc	ce c1 20 00			    .text "NA ",$00
.0dd0					txt_fr_pe:
>0dd0	d0 c5 20 00			    .text "PE ",$00
.0dd4					txt_fr_po:
>0dd4	d0 cf 20 00			    .text "PO ",$00
.0dd8					txt_fr_cy:
>0dd8	c3 d9 20 00			    .text "CY ",$00
.0ddc					txt_fr_nc:
>0ddc	ce c3 20 00			    .text "NC ",$00
.0de0					cflag:
.0de0	08		php		    php
.0de1	90 08		bcc $0deb	    bcc +
.0de3	a5 55		lda $55		    lda FRL
.0de5	09 01		ora #$01	    ora #$01
.0de7	85 55		sta $55		    sta FRL
.0de9	28		plp		    plp
.0dea	60		rts		    rts
.0deb	a5 55		lda $55		+   lda FRL
.0ded	29 fe		and #$fe	    and #$fe
.0def	85 55		sta $55		    sta FRL
.0df1	28		plp		    plp
.0df2	60		rts		    rts
.0df3					zflag:
.0df3	08		php		    php
.0df4	d0 08		bne $0dfe	    bne +
.0df6	a5 55		lda $55		    lda FRL
.0df8	09 40		ora #$40	    ora #$40
.0dfa	85 55		sta $55		    sta FRL
.0dfc	28		plp		    plp
.0dfd	60		rts		    rts
.0dfe	a5 55		lda $55		+   lda FRL
.0e00	29 bf		and #$bf	    and #$bf
.0e02	85 55		sta $55		    sta FRL
.0e04	28		plp		    plp
.0e05	60		rts		    rts
.0e06					sflag:
.0e06	08		php		    php
.0e07	c9 80		cmp #$80	    cmp #$80
.0e09	90 08		bcc $0e13	    bcc +
.0e0b	a5 55		lda $55		    lda FRL
.0e0d	29 7f		and #$7f	    and #$7f
.0e0f	85 55		sta $55		    sta FRL
.0e11	28		plp		    plp
.0e12	60		rts		    rts
.0e13	a5 55		lda $55		+   lda FRL
.0e15	09 80		ora #$80	    ora #$80
.0e17	85 55		sta $55		    sta FRL
.0e19	28		plp		    plp
.0e1a	60		rts		    rts
.0e1b					pflag:
.0e1b	08		php		    php
.0e1c					pflag_loop2:
.0e1c	4a		lsr a		    lsr
.0e1d	f0 07		beq $0e26	    beq pflag_done2
.0e1f	90 fb		bcc $0e1c	    bcc pflag_loop2
.0e21	49 01		eor #$01	    eor #$01
.0e23	4c 1c 0e	jmp $0e1c	    jmp pflag_loop2
.0e26					pflag_done2:
.0e26	b0 08		bcs $0e30	    bcs +
.0e28	a5 55		lda $55		    lda FRL             ; get the 8086 register flag
.0e2a	09 04		ora #$04	    ora #$04            ; set bit 4
.0e2c	85 55		sta $55		    sta FRL             ; store it
.0e2e	28		plp		    plp
.0e2f	60		rts		    rts
.0e30	a5 55		lda $55		+   lda FRL             ; its an off number. get the 8086 register flag
.0e32	29 fb		and #$fb	    and #$fb            ; clear bit 4
.0e34	85 55		sta $55		    sta FRL             ; store it
.0e36	28		plp		    plp
.0e37	60		rts		    rts
.0e38					pflag2:
.0e38	08		php		    php                 ; save status reg
.0e39	aa		tax		    tax                 ; accumulator holds value of last calculation
.0e3a	9c 67 0e	stz $0e67	    stz pflag_tmp       ; clear the temp value holder
.0e3d	8a		txa		    txa
.0e3e	48		pha		    pha                 ; save accumulator for exit
.0e3f	a0 08		ldy #$08	    ldy #$08            ; we are going to loop through each bit
.0e41					pflag_loop:
.0e41	18		clc		    clc                 ; clear the carry
.0e42	2a		rol a		    rol                 ; roll the bits left, putting leftmost in carry flg
.0e43	90 03		bcc $0e48	    bcc +               ; if carry is clear, this bit should be skipped
.0e45	ee 67 0e	inc $0e67	    inc pflag_tmp       ; otherwise, temp value = temp value + 1
.0e48	88		dey		+   dey                 ; count down
.0e49	f0 03		beq $0e4e	    beq pflag_clrset    ; if zero, move on
.0e4b	4c 41 0e	jmp $0e41	    jmp pflag_loop      ; loop and roll next bit
.0e4e					pflag_clrset:
.0e4e	ad 67 0e	lda $0e67	    lda pflag_tmp       ; get the temp value (number of bits with 1's in them)
.0e51	29 01		and #$01	    and #$01            ; is the 0th bit = 1?  (if so, its an odd number)
.0e53	d0 09		bne $0e5e	    bne pflag_clr       ; its an even number - skip ahead
.0e55	a5 55		lda $55		    lda FRL             ; get the 8086 register flag
.0e57	09 04		ora #$04	    ora #$04            ; set bit 4
.0e59	85 55		sta $55		    sta FRL             ; store it
.0e5b	4c 64 0e	jmp $0e64	    jmp pflag_done      ; we are done
.0e5e					pflag_clr:
.0e5e	a5 55		lda $55		    lda FRL             ; its an off number. get the 8086 register flag
.0e60	29 fb		and #$fb	    and #$fb            ; clear bit 4
.0e62	85 55		sta $55		    sta FRL             ; store it
.0e64					pflag_done:
.0e64	68		pla		    pla                 ; get our original A value
.0e65	28		plp		    plp                 ; get original status reg
.0e66	60		rts		    rts                 ; done
.0e67					pflag_tmp:
>0e67	00				.byte $00
.0e68					j00:
.0e68	20 ef 0c	jsr $0cef	    jsr GETNEXT
.0e6b	48		pha		                pha
.0e6c	a9 00		lda #$00	                lda #$00
.0e6e	48		pha		                pha                     ; push the value to the stack
.0e6f	ab		plb		                plb                     ; pull value from stack to data bank register
.0e70	68		pla		                pla
.0e71	c9 c0		cmp #$c0	    cmp #$c0            ; add al,al
.0e73	d0 0d		bne $0e82	    bne +
.0e75	a5 42		lda $42		    lda AL
.0e77	18		clc		    clc
.0e78	65 42		adc $42		    adc AL
.0e7a	85 42		sta $42		    sta AL
.0e7c	20 e0 0d	jsr $0de0	    jsr cflag
.0e7f	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0e82	c9 d8		cmp #$d8	+   cmp #$d8            ; add al, bl
.0e84	d0 16		bne $0e9c	    bne +
.0e86	a5 44		lda $44		    lda BL
.0e88	18		clc		    clc
.0e89	65 42		adc $42		    adc AL
.0e8b	85 42		sta $42		    sta AL
.0e8d	20 1b 0e	jsr $0e1b	    jsr pflag
.0e90	20 e0 0d	jsr $0de0	    jsr cflag
.0e93	20 06 0e	jsr $0e06	    jsr sflag
.0e96	20 f3 0d	jsr $0df3	    jsr zflag
.0e99	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0e9c	c9 c8		cmp #$c8	+   cmp #$c8
.0e9e	d0 0d		bne $0ead	    bne +
.0ea0	a5 46		lda $46		    lda CL
.0ea2	18		clc		    clc
.0ea3	65 42		adc $42		    adc AL
.0ea5	85 42		sta $42		    sta AL
.0ea7	20 e0 0d	jsr $0de0	    jsr cflag
.0eaa	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0ead	c9 d0		cmp #$d0	+   cmp #$d0
.0eaf	d0 0d		bne $0ebe	    bne +
.0eb1	a5 48		lda $48		    lda DL
.0eb3	18		clc		    clc
.0eb4	65 42		adc $42		    adc AL
.0eb6	85 42		sta $42		    sta AL
.0eb8	20 e0 0d	jsr $0de0	    jsr cflag
.0ebb	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0ebe	c9 c4		cmp #$c4	+   cmp #$c4
.0ec0	d0 0d		bne $0ecf	    bne +
.0ec2	a5 42		lda $42		    lda AL
.0ec4	18		clc		    clc
.0ec5	65 43		adc $43		    adc AH
.0ec7	85 43		sta $43		    sta AH
.0ec9	20 e0 0d	jsr $0de0	    jsr cflag
.0ecc	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0ecf	c9 dc		cmp #$dc	+   cmp #$dc
.0ed1	d0 0d		bne $0ee0	    bne +
.0ed3	a5 44		lda $44		    lda BL
.0ed5	18		clc		    clc
.0ed6	65 43		adc $43		    adc AH
.0ed8	85 43		sta $43		    sta AH
.0eda	20 e0 0d	jsr $0de0	    jsr cflag
.0edd	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0ee0	c9 cc		cmp #$cc	+   cmp #$cc
.0ee2	d0 0d		bne $0ef1	    bne +
.0ee4	a5 46		lda $46		    lda CL
.0ee6	18		clc		    clc
.0ee7	65 43		adc $43		    adc AH
.0ee9	85 43		sta $43		    sta AH
.0eeb	20 e0 0d	jsr $0de0	    jsr cflag
.0eee	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0ef1	c9 d4		cmp #$d4	+   cmp #$d4
.0ef3	d0 0a		bne $0eff	    bne +
.0ef5	a5 48		lda $48		    lda DL
.0ef7	18		clc		    clc
.0ef8	65 43		adc $43		    adc AH
.0efa	85 43		sta $43		    sta AH
.0efc	20 e0 0d	jsr $0de0	    jsr cflag
.0eff	4c 8e 0a	jmp $0a8e	+   jmp MAINLOOP_END
.0f02					j01:
.0f02	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0f05					j02:
.0f05	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0f08					j03:
.0f08	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0f0b					j04:
.0f0b	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0f0e					j05:
.0f0e	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0f11					j06:
.0f11	48		pha		                pha
.0f12	a9 00		lda #$00	                lda #$00
.0f14	48		pha		                pha                     ; push the value to the stack
.0f15	ab		plb		                plb                     ; pull value from stack to data bank register
.0f16	68		pla		                pla
.0f17	c2 20		rep #$20	                REP #$20
.0f19	a5 56		lda $56		    lda SP
.0f1b	38		sec		    sec
.0f1c	e9 02 00	sbc #$0002	    sbc #$02
.0f1f	85 56		sta $56		    sta SP
.0f21	a5 4e		lda $4e		    lda ES
.0f23	48		pha		                pha
.0f24	e2 20		sep #$20	                SEP #$20
.0f26	a9 02		lda #$02	                lda #$02
.0f28	48		pha		                pha                     ; push the value to the stack
.0f29	ab		plb		                plb                     ; pull value from stack to data bank register
.0f2a	c2 20		rep #$20	                REP #$20
.0f2c	68		pla		                pla
.0f2d	92 56		sta ($56)	    sta (SP)
.0f2f	e2 20		sep #$20	                SEP #$20
.0f31	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0f34					j07:
.0f34	c2 20		rep #$20	                REP #$20
.0f36	48		pha		                pha
.0f37	e2 20		sep #$20	                SEP #$20
.0f39	a9 02		lda #$02	                lda #$02
.0f3b	48		pha		                pha                     ; push the value to the stack
.0f3c	ab		plb		                plb                     ; pull value from stack to data bank register
.0f3d	c2 20		rep #$20	                REP #$20
.0f3f	68		pla		                pla
.0f40	b2 56		lda ($56)	    lda (SP)
.0f42	48		pha		                pha
.0f43	e2 20		sep #$20	                SEP #$20
.0f45	a9 00		lda #$00	                lda #$00
.0f47	48		pha		                pha                     ; push the value to the stack
.0f48	ab		plb		                plb                     ; pull value from stack to data bank register
.0f49	c2 20		rep #$20	                REP #$20
.0f4b	68		pla		                pla
.0f4c	85 4e		sta $4e		    sta ES
.0f4e	a5 56		lda $56		    lda SP
.0f50	18		clc		    clc
.0f51	69 02 00	adc #$0002	    adc #$02
.0f54	85 56		sta $56		    sta SP
.0f56	e2 20		sep #$20	                SEP #$20
.0f58	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0f5b					j08:
.0f5b	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0f5e					j09:
.0f5e	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0f61					j0a:
.0f61	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0f64					j0b:
.0f64	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0f67					j0c:
.0f67	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0f6a					j0d:
.0f6a	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0f6d					j0e:
.0f6d	48		pha		                pha
.0f6e	a9 00		lda #$00	                lda #$00
.0f70	48		pha		                pha                     ; push the value to the stack
.0f71	ab		plb		                plb                     ; pull value from stack to data bank register
.0f72	68		pla		                pla
.0f73	c2 20		rep #$20	                REP #$20
.0f75	a5 56		lda $56		    lda SP
.0f77	38		sec		    sec
.0f78	e9 02 00	sbc #$0002	    sbc #$02
.0f7b	85 56		sta $56		    sta SP
.0f7d	a5 4a		lda $4a		    lda CS
.0f7f	48		pha		                pha
.0f80	e2 20		sep #$20	                SEP #$20
.0f82	a9 02		lda #$02	                lda #$02
.0f84	48		pha		                pha                     ; push the value to the stack
.0f85	ab		plb		                plb                     ; pull value from stack to data bank register
.0f86	c2 20		rep #$20	                REP #$20
.0f88	68		pla		                pla
.0f89	92 56		sta ($56)	    sta (SP)
.0f8b	e2 20		sep #$20	                SEP #$20
.0f8d	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0f90					j0f:
.0f90	c2 20		rep #$20	                REP #$20
.0f92	48		pha		                pha
.0f93	e2 20		sep #$20	                SEP #$20
.0f95	a9 02		lda #$02	                lda #$02
.0f97	48		pha		                pha                     ; push the value to the stack
.0f98	ab		plb		                plb                     ; pull value from stack to data bank register
.0f99	c2 20		rep #$20	                REP #$20
.0f9b	68		pla		                pla
.0f9c	b2 56		lda ($56)	    lda (SP)
.0f9e	48		pha		                pha
.0f9f	e2 20		sep #$20	                SEP #$20
.0fa1	a9 00		lda #$00	                lda #$00
.0fa3	48		pha		                pha                     ; push the value to the stack
.0fa4	ab		plb		                plb                     ; pull value from stack to data bank register
.0fa5	c2 20		rep #$20	                REP #$20
.0fa7	68		pla		                pla
.0fa8	85 4a		sta $4a		    sta CS
.0faa	a5 56		lda $56		    lda SP
.0fac	18		clc		    clc
.0fad	69 02 00	adc #$0002	    adc #$02
.0fb0	85 56		sta $56		    sta SP
.0fb2	e2 20		sep #$20	                SEP #$20
.0fb4	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0fb7					j10:
.0fb7	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0fba					j11:
.0fba	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0fbd					j12:
.0fbd	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0fc0					j13:
.0fc0	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0fc3					j14:
.0fc3	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0fc6					j15:
.0fc6	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0fc9					j16:
.0fc9	48		pha		                pha
.0fca	a9 00		lda #$00	                lda #$00
.0fcc	48		pha		                pha                     ; push the value to the stack
.0fcd	ab		plb		                plb                     ; pull value from stack to data bank register
.0fce	68		pla		                pla
.0fcf	c2 20		rep #$20	                REP #$20
.0fd1	a5 56		lda $56		    lda SP
.0fd3	38		sec		    sec
.0fd4	e9 02 00	sbc #$0002	    sbc #$02
.0fd7	85 56		sta $56		    sta SP
.0fd9	a5 50		lda $50		    lda SS
.0fdb	48		pha		                pha
.0fdc	e2 20		sep #$20	                SEP #$20
.0fde	a9 02		lda #$02	                lda #$02
.0fe0	48		pha		                pha                     ; push the value to the stack
.0fe1	ab		plb		                plb                     ; pull value from stack to data bank register
.0fe2	c2 20		rep #$20	                REP #$20
.0fe4	68		pla		                pla
.0fe5	92 56		sta ($56)	    sta (SP)
.0fe7	e2 20		sep #$20	                SEP #$20
.0fe9	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0fec					j17:
.0fec	c2 20		rep #$20	                REP #$20
.0fee	48		pha		                pha
.0fef	e2 20		sep #$20	                SEP #$20
.0ff1	a9 02		lda #$02	                lda #$02
.0ff3	48		pha		                pha                     ; push the value to the stack
.0ff4	ab		plb		                plb                     ; pull value from stack to data bank register
.0ff5	c2 20		rep #$20	                REP #$20
.0ff7	68		pla		                pla
.0ff8	b2 56		lda ($56)	    lda (SP)
.0ffa	48		pha		                pha
.0ffb	e2 20		sep #$20	                SEP #$20
.0ffd	a9 00		lda #$00	                lda #$00
.0fff	48		pha		                pha                     ; push the value to the stack
.1000	ab		plb		                plb                     ; pull value from stack to data bank register
.1001	c2 20		rep #$20	                REP #$20
.1003	68		pla		                pla
.1004	85 50		sta $50		    sta SS
.1006	a5 56		lda $56		    lda SP
.1008	18		clc		    clc
.1009	69 02 00	adc #$0002	    adc #$02
.100c	85 56		sta $56		    sta SP
.100e	e2 20		sep #$20	                SEP #$20
.1010	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1013					j18:
.1013	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1016					j19:
.1016	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1019					j1a:
.1019	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.101c					j1b:
.101c	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.101f					j1c:
.101f	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1022					j1d:
.1022	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1025					j1e:
.1025	48		pha		                pha
.1026	a9 00		lda #$00	                lda #$00
.1028	48		pha		                pha                     ; push the value to the stack
.1029	ab		plb		                plb                     ; pull value from stack to data bank register
.102a	68		pla		                pla
.102b	c2 20		rep #$20	                REP #$20
.102d	a5 56		lda $56		    lda SP
.102f	38		sec		    sec
.1030	e9 02 00	sbc #$0002	    sbc #$02
.1033	85 56		sta $56		    sta SP
.1035	a5 4e		lda $4e		    lda ES
.1037	48		pha		                pha
.1038	e2 20		sep #$20	                SEP #$20
.103a	a9 02		lda #$02	                lda #$02
.103c	48		pha		                pha                     ; push the value to the stack
.103d	ab		plb		                plb                     ; pull value from stack to data bank register
.103e	c2 20		rep #$20	                REP #$20
.1040	68		pla		                pla
.1041	92 56		sta ($56)	    sta (SP)
.1043	e2 20		sep #$20	                SEP #$20
.1045	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1048					j1f:
.1048	c2 20		rep #$20	                REP #$20
.104a	48		pha		                pha
.104b	e2 20		sep #$20	                SEP #$20
.104d	a9 02		lda #$02	                lda #$02
.104f	48		pha		                pha                     ; push the value to the stack
.1050	ab		plb		                plb                     ; pull value from stack to data bank register
.1051	c2 20		rep #$20	                REP #$20
.1053	68		pla		                pla
.1054	b2 56		lda ($56)	    lda (SP)
.1056	48		pha		                pha
.1057	e2 20		sep #$20	                SEP #$20
.1059	a9 00		lda #$00	                lda #$00
.105b	48		pha		                pha                     ; push the value to the stack
.105c	ab		plb		                plb                     ; pull value from stack to data bank register
.105d	c2 20		rep #$20	                REP #$20
.105f	68		pla		                pla
.1060	85 4c		sta $4c		    sta DS
.1062	a5 56		lda $56		    lda SP
.1064	18		clc		    clc
.1065	69 02 00	adc #$0002	    adc #$02
.1068	85 56		sta $56		    sta SP
.106a	e2 20		sep #$20	                SEP #$20
.106c	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.106f					j20:
.106f	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1072					j21:
.1072	20 ef 0c	jsr $0cef	    jsr GETNEXT
.1075	48		pha		                pha
.1076	a9 00		lda #$00	                lda #$00
.1078	48		pha		                pha                     ; push the value to the stack
.1079	ab		plb		                plb                     ; pull value from stack to data bank register
.107a	68		pla		                pla
.107b	c9 c0		cmp #$c0	    cmp #$c0
.107d	f0 1f		beq $109e	    beq j21_ax_ax
.107f	c9 d8		cmp #$d8	    cmp #$d8
.1081	f0 28		beq $10ab	    beq j21_ax_bx
.1083	c9 d8		cmp #$d8	    cmp #$d8
.1085	f0 31		beq $10b8	    beq j21_ax_cx
.1087	c9 d8		cmp #$d8	    cmp #$d8
.1089	f0 3a		beq $10c5	    beq j21_ax_dx
.108b	c9 d8		cmp #$d8	    cmp #$d8
.108d	f0 43		beq $10d2	    beq j21_bx_ax
.108f	c9 d8		cmp #$d8	    cmp #$d8
.1091	f0 4c		beq $10df	    beq j21_bx_bx
.1093	c9 d8		cmp #$d8	    cmp #$d8
.1095	f0 55		beq $10ec	    beq j21_bx_cx
.1097	c9 d8		cmp #$d8	    cmp #$d8
.1099	f0 5e		beq $10f9	    beq j21_bx_dx
.109b	4c 06 11	jmp $1106	    jmp j21_cmp2
.109e					    j21_ax_ax:
.109e	c2 20		rep #$20	                REP #$20
.10a0	a5 42		lda $42		        lda AX
.10a2	25 42		and $42		        and AX
.10a4	85 42		sta $42		        sta AX
.10a6	e2 20		sep #$20	                SEP #$20
.10a8	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.10ab					    j21_ax_bx:
.10ab	c2 20		rep #$20	                REP #$20
.10ad	a5 44		lda $44		        lda BX
.10af	25 42		and $42		        and AX
.10b1	85 42		sta $42		        sta AX
.10b3	e2 20		sep #$20	                SEP #$20
.10b5	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.10b8					    j21_ax_cx:
.10b8	c2 20		rep #$20	                REP #$20
.10ba	a5 46		lda $46		        lda CX
.10bc	25 42		and $42		        and AX
.10be	85 42		sta $42		        sta AX
.10c0	e2 20		sep #$20	                SEP #$20
.10c2	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.10c5					    j21_ax_dx:
.10c5	c2 20		rep #$20	                REP #$20
.10c7	a5 48		lda $48		        lda DX
.10c9	25 42		and $42		        and AX
.10cb	85 42		sta $42		        sta AX
.10cd	e2 20		sep #$20	                SEP #$20
.10cf	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.10d2					    j21_bx_ax:
.10d2	c2 20		rep #$20	                REP #$20
.10d4	a5 42		lda $42		        lda AX
.10d6	25 44		and $44		        and BX
.10d8	85 44		sta $44		        sta BX
.10da	e2 20		sep #$20	                SEP #$20
.10dc	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.10df					    j21_bx_bx:
.10df	c2 20		rep #$20	                REP #$20
.10e1	a5 44		lda $44		        lda BX
.10e3	25 44		and $44		        and BX
.10e5	85 44		sta $44		        sta BX
.10e7	e2 20		sep #$20	                SEP #$20
.10e9	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.10ec					    j21_bx_cx:
.10ec	c2 20		rep #$20	                REP #$20
.10ee	a5 46		lda $46		        lda CX
.10f0	25 44		and $44		        and BX
.10f2	85 44		sta $44		        sta BX
.10f4	e2 20		sep #$20	                SEP #$20
.10f6	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.10f9					    j21_bx_dx:
.10f9	c2 20		rep #$20	                REP #$20
.10fb	a5 48		lda $48		        lda DX
.10fd	25 44		and $44		        and BX
.10ff	85 44		sta $44		        sta BX
.1101	e2 20		sep #$20	                SEP #$20
.1103	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.1106					    j21_cmp2:
.1106	c9 d8		cmp #$d8	        cmp #$d8
.1108	f0 1f		beq $1129	        beq j21_cx_ax
.110a	c9 d8		cmp #$d8	        cmp #$d8
.110c	f0 28		beq $1136	        beq j21_cx_bx
.110e	c9 d8		cmp #$d8	        cmp #$d8
.1110	f0 31		beq $1143	        beq j21_cx_cx
.1112	c9 d8		cmp #$d8	        cmp #$d8
.1114	f0 3a		beq $1150	        beq j21_cx_dx
.1116	c9 d8		cmp #$d8	        cmp #$d8
.1118	f0 43		beq $115d	        beq j21_dx_ax
.111a	c9 d8		cmp #$d8	        cmp #$d8
.111c	f0 4c		beq $116a	        beq j21_dx_bx
.111e	c9 d8		cmp #$d8	        cmp #$d8
.1120	f0 55		beq $1177	        beq j21_dx_cx
.1122	c9 d8		cmp #$d8	        cmp #$d8
.1124	f0 5e		beq $1184	        beq j21_dx_dx
.1126	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.1129					    j21_cx_ax:
.1129	c2 20		rep #$20	                REP #$20
.112b	a5 42		lda $42		        lda AX
.112d	25 46		and $46		        and CX
.112f	85 46		sta $46		        sta CX
.1131	e2 20		sep #$20	                SEP #$20
.1133	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.1136					    j21_cx_bx:
.1136	c2 20		rep #$20	                REP #$20
.1138	a5 44		lda $44		        lda BX
.113a	25 46		and $46		        and CX
.113c	85 46		sta $46		        sta CX
.113e	e2 20		sep #$20	                SEP #$20
.1140	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.1143					    j21_cx_cx:
.1143	c2 20		rep #$20	                REP #$20
.1145	a5 46		lda $46		        lda CX
.1147	25 46		and $46		        and CX
.1149	85 46		sta $46		        sta CX
.114b	e2 20		sep #$20	                SEP #$20
.114d	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.1150					    j21_cx_dx:
.1150	c2 20		rep #$20	                REP #$20
.1152	a5 48		lda $48		        lda DX
.1154	25 46		and $46		        and CX
.1156	85 46		sta $46		        sta CX
.1158	e2 20		sep #$20	                SEP #$20
.115a	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.115d					    j21_dx_ax:
.115d	c2 20		rep #$20	                REP #$20
.115f	a5 42		lda $42		        lda AX
.1161	25 48		and $48		        and DX
.1163	85 48		sta $48		        sta DX
.1165	e2 20		sep #$20	                SEP #$20
.1167	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.116a					    j21_dx_bx:
.116a	c2 20		rep #$20	                REP #$20
.116c	a5 44		lda $44		        lda BX
.116e	25 48		and $48		        and DX
.1170	85 48		sta $48		        sta DX
.1172	e2 20		sep #$20	                SEP #$20
.1174	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.1177					    j21_dx_cx:
.1177	c2 20		rep #$20	                REP #$20
.1179	a5 46		lda $46		        lda CX
.117b	25 48		and $48		        and DX
.117d	85 48		sta $48		        sta DX
.117f	e2 20		sep #$20	                SEP #$20
.1181	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.1184					    j21_dx_dx:
.1184	c2 20		rep #$20	                REP #$20
.1186	a5 48		lda $48		        lda DX
.1188	25 48		and $48		        and DX
.118a	85 48		sta $48		        sta DX
.118c	e2 20		sep #$20	                SEP #$20
.118e	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.1191					j22:
.1191	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1194					j23:
.1194	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1197					j24:
.1197	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.119a					j25:
.119a	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.119d					j26:
.119d	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.11a0					j27:
.11a0	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.11a3					j28:
.11a3	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.11a6					j29:
.11a6	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.11a9					j2a:
.11a9	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.11ac					j2b:
.11ac	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.11af					j2c:
.11af	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.11b2					j2d:
.11b2	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.11b5					j2e:
.11b5	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.11b8					j2f:
.11b8	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.11bb					j30:
.11bb	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.11be					j31:
.11be	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.11c1					j32:
.11c1	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.11c4					j33:
.11c4	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.11c7					j34:
.11c7	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.11ca					j35:
.11ca	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.11cd					j36:
.11cd	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.11d0					j37:
.11d0	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.11d3					j38:
.11d3	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.11d6					j39:
.11d6	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.11d9					j3a:
.11d9	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.11dc					j3b:
.11dc	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.11df					j3c:
.11df	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.11e2					j3d:
.11e2	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.11e5					j3e:
.11e5	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.11e8					j3f:
.11e8	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.11eb					j40:
.11eb	48		pha		                pha
.11ec	a9 00		lda #$00	                lda #$00
.11ee	48		pha		                pha                     ; push the value to the stack
.11ef	ab		plb		                plb                     ; pull value from stack to data bank register
.11f0	68		pla		                pla
.11f1	c2 20		rep #$20	                REP #$20
.11f3	e6 42		inc $42		    inc AX
.11f5	e2 20		sep #$20	                SEP #$20
.11f7	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.11fa					j41:
.11fa	48		pha		                pha
.11fb	a9 00		lda #$00	                lda #$00
.11fd	48		pha		                pha                     ; push the value to the stack
.11fe	ab		plb		                plb                     ; pull value from stack to data bank register
.11ff	68		pla		                pla
.1200	c2 20		rep #$20	                REP #$20
.1202	e6 46		inc $46		    inc CX
.1204	e2 20		sep #$20	                SEP #$20
.1206	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1209					j42:
.1209	48		pha		                pha
.120a	a9 00		lda #$00	                lda #$00
.120c	48		pha		                pha                     ; push the value to the stack
.120d	ab		plb		                plb                     ; pull value from stack to data bank register
.120e	68		pla		                pla
.120f	c2 20		rep #$20	                REP #$20
.1211	e6 48		inc $48		    inc DX
.1213	e2 20		sep #$20	                SEP #$20
.1215	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1218					j43:
.1218	48		pha		                pha
.1219	a9 00		lda #$00	                lda #$00
.121b	48		pha		                pha                     ; push the value to the stack
.121c	ab		plb		                plb                     ; pull value from stack to data bank register
.121d	68		pla		                pla
.121e	c2 20		rep #$20	                REP #$20
.1220	e6 44		inc $44		    inc BX
.1222	e2 20		sep #$20	                SEP #$20
.1224	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1227					j44:
.1227	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.122a					j45:
.122a	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.122d					j46:
.122d	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1230					j47:
.1230	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1233					j48:
.1233	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1236					j49:
.1236	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1239					j4a:
.1239	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.123c					j4b:
.123c	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.123f					j4c:
.123f	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1242					j4d:
.1242	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1245					j4e:
.1245	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1248					j4f:
.1248	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.124b					j50:
.124b	48		pha		                pha
.124c	a9 00		lda #$00	                lda #$00
.124e	48		pha		                pha                     ; push the value to the stack
.124f	ab		plb		                plb                     ; pull value from stack to data bank register
.1250	68		pla		                pla
.1251	c2 20		rep #$20	                REP #$20
.1253	a5 56		lda $56		    lda SP
.1255	38		sec		    sec
.1256	e9 02 00	sbc #$0002	    sbc #$02
.1259	85 56		sta $56		    sta SP
.125b	a5 42		lda $42		    lda AX
.125d	48		pha		                pha
.125e	e2 20		sep #$20	                SEP #$20
.1260	a9 02		lda #$02	                lda #$02
.1262	48		pha		                pha                     ; push the value to the stack
.1263	ab		plb		                plb                     ; pull value from stack to data bank register
.1264	c2 20		rep #$20	                REP #$20
.1266	68		pla		                pla
.1267	92 56		sta ($56)	    sta (SP)
.1269	e2 20		sep #$20	                SEP #$20
.126b	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.126e					j51:
.126e	48		pha		                pha
.126f	a9 00		lda #$00	                lda #$00
.1271	48		pha		                pha                     ; push the value to the stack
.1272	ab		plb		                plb                     ; pull value from stack to data bank register
.1273	68		pla		                pla
.1274	c2 20		rep #$20	                REP #$20
.1276	a5 56		lda $56		    lda SP
.1278	38		sec		    sec
.1279	e9 02 00	sbc #$0002	    sbc #$02
.127c	85 56		sta $56		    sta SP
.127e	a5 46		lda $46		    lda CX
.1280	48		pha		                pha
.1281	e2 20		sep #$20	                SEP #$20
.1283	a9 02		lda #$02	                lda #$02
.1285	48		pha		                pha                     ; push the value to the stack
.1286	ab		plb		                plb                     ; pull value from stack to data bank register
.1287	c2 20		rep #$20	                REP #$20
.1289	68		pla		                pla
.128a	92 56		sta ($56)	    sta (SP)
.128c	e2 20		sep #$20	                SEP #$20
.128e	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1291					j52:
.1291	48		pha		                pha
.1292	a9 00		lda #$00	                lda #$00
.1294	48		pha		                pha                     ; push the value to the stack
.1295	ab		plb		                plb                     ; pull value from stack to data bank register
.1296	68		pla		                pla
.1297	c2 20		rep #$20	                REP #$20
.1299	a5 56		lda $56		    lda SP
.129b	38		sec		    sec
.129c	e9 02 00	sbc #$0002	    sbc #$02
.129f	85 56		sta $56		    sta SP
.12a1	a5 48		lda $48		    lda DX
.12a3	48		pha		                pha
.12a4	e2 20		sep #$20	                SEP #$20
.12a6	a9 02		lda #$02	                lda #$02
.12a8	48		pha		                pha                     ; push the value to the stack
.12a9	ab		plb		                plb                     ; pull value from stack to data bank register
.12aa	c2 20		rep #$20	                REP #$20
.12ac	68		pla		                pla
.12ad	92 56		sta ($56)	    sta (SP)
.12af	e2 20		sep #$20	                SEP #$20
.12b1	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.12b4					j53:
.12b4	48		pha		                pha
.12b5	a9 00		lda #$00	                lda #$00
.12b7	48		pha		                pha                     ; push the value to the stack
.12b8	ab		plb		                plb                     ; pull value from stack to data bank register
.12b9	68		pla		                pla
.12ba	c2 20		rep #$20	                REP #$20
.12bc	a5 56		lda $56		    lda SP
.12be	38		sec		    sec
.12bf	e9 02 00	sbc #$0002	    sbc #$02
.12c2	85 56		sta $56		    sta SP
.12c4	a5 44		lda $44		    lda BX
.12c6	48		pha		                pha
.12c7	e2 20		sep #$20	                SEP #$20
.12c9	a9 02		lda #$02	                lda #$02
.12cb	48		pha		                pha                     ; push the value to the stack
.12cc	ab		plb		                plb                     ; pull value from stack to data bank register
.12cd	c2 20		rep #$20	                REP #$20
.12cf	68		pla		                pla
.12d0	92 56		sta ($56)	    sta (SP)
.12d2	e2 20		sep #$20	                SEP #$20
.12d4	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.12d7					j54:
.12d7	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.12da					j55:
.12da	48		pha		                pha
.12db	a9 00		lda #$00	                lda #$00
.12dd	48		pha		                pha                     ; push the value to the stack
.12de	ab		plb		                plb                     ; pull value from stack to data bank register
.12df	68		pla		                pla
.12e0	c2 20		rep #$20	                REP #$20
.12e2	a5 56		lda $56		    lda SP
.12e4	38		sec		    sec
.12e5	e9 02 00	sbc #$0002	    sbc #$02
.12e8	85 56		sta $56		    sta SP
.12ea	a5 58		lda $58		    lda BP
.12ec	48		pha		                pha
.12ed	e2 20		sep #$20	                SEP #$20
.12ef	a9 02		lda #$02	                lda #$02
.12f1	48		pha		                pha                     ; push the value to the stack
.12f2	ab		plb		                plb                     ; pull value from stack to data bank register
.12f3	c2 20		rep #$20	                REP #$20
.12f5	68		pla		                pla
.12f6	92 56		sta ($56)	    sta (SP)
.12f8	e2 20		sep #$20	                SEP #$20
.12fa	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.12fd					j56:
.12fd	48		pha		                pha
.12fe	a9 00		lda #$00	                lda #$00
.1300	48		pha		                pha                     ; push the value to the stack
.1301	ab		plb		                plb                     ; pull value from stack to data bank register
.1302	68		pla		                pla
.1303	c2 20		rep #$20	                REP #$20
.1305	a5 56		lda $56		    lda SP
.1307	38		sec		    sec
.1308	e9 02 00	sbc #$0002	    sbc #$02
.130b	85 56		sta $56		    sta SP
.130d	a5 5a		lda $5a		    lda SI
.130f	48		pha		                pha
.1310	e2 20		sep #$20	                SEP #$20
.1312	a9 02		lda #$02	                lda #$02
.1314	48		pha		                pha                     ; push the value to the stack
.1315	ab		plb		                plb                     ; pull value from stack to data bank register
.1316	c2 20		rep #$20	                REP #$20
.1318	68		pla		                pla
.1319	92 56		sta ($56)	    sta (SP)
.131b	e2 20		sep #$20	                SEP #$20
.131d	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1320					j57:
.1320	48		pha		                pha
.1321	a9 00		lda #$00	                lda #$00
.1323	48		pha		                pha                     ; push the value to the stack
.1324	ab		plb		                plb                     ; pull value from stack to data bank register
.1325	68		pla		                pla
.1326	c2 20		rep #$20	                REP #$20
.1328	a5 56		lda $56		    lda SP
.132a	38		sec		    sec
.132b	e9 02 00	sbc #$0002	    sbc #$02
.132e	85 56		sta $56		    sta SP
.1330	a5 5c		lda $5c		    lda DI
.1332	48		pha		                pha
.1333	e2 20		sep #$20	                SEP #$20
.1335	a9 02		lda #$02	                lda #$02
.1337	48		pha		                pha                     ; push the value to the stack
.1338	ab		plb		                plb                     ; pull value from stack to data bank register
.1339	c2 20		rep #$20	                REP #$20
.133b	68		pla		                pla
.133c	92 56		sta ($56)	    sta (SP)
.133e	e2 20		sep #$20	                SEP #$20
.1340	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1343					j58:
.1343	c2 20		rep #$20	                REP #$20
.1345	48		pha		                pha
.1346	e2 20		sep #$20	                SEP #$20
.1348	a9 02		lda #$02	                lda #$02
.134a	48		pha		                pha                     ; push the value to the stack
.134b	ab		plb		                plb                     ; pull value from stack to data bank register
.134c	c2 20		rep #$20	                REP #$20
.134e	68		pla		                pla
.134f	b2 56		lda ($56)	    lda (SP)
.1351	48		pha		                pha
.1352	e2 20		sep #$20	                SEP #$20
.1354	a9 00		lda #$00	                lda #$00
.1356	48		pha		                pha                     ; push the value to the stack
.1357	ab		plb		                plb                     ; pull value from stack to data bank register
.1358	c2 20		rep #$20	                REP #$20
.135a	68		pla		                pla
.135b	85 42		sta $42		    sta AX
.135d	a5 56		lda $56		    lda SP
.135f	18		clc		    clc
.1360	69 02 00	adc #$0002	    adc #$02
.1363	85 56		sta $56		    sta SP
.1365	e2 20		sep #$20	                SEP #$20
.1367	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.136a					j59:
.136a	c2 20		rep #$20	                REP #$20
.136c	48		pha		                pha
.136d	e2 20		sep #$20	                SEP #$20
.136f	a9 02		lda #$02	                lda #$02
.1371	48		pha		                pha                     ; push the value to the stack
.1372	ab		plb		                plb                     ; pull value from stack to data bank register
.1373	c2 20		rep #$20	                REP #$20
.1375	68		pla		                pla
.1376	b2 56		lda ($56)	    lda (SP)
.1378	48		pha		                pha
.1379	e2 20		sep #$20	                SEP #$20
.137b	a9 00		lda #$00	                lda #$00
.137d	48		pha		                pha                     ; push the value to the stack
.137e	ab		plb		                plb                     ; pull value from stack to data bank register
.137f	c2 20		rep #$20	                REP #$20
.1381	68		pla		                pla
.1382	85 46		sta $46		    sta CX
.1384	a5 56		lda $56		    lda SP
.1386	18		clc		    clc
.1387	69 02 00	adc #$0002	    adc #$02
.138a	85 56		sta $56		    sta SP
.138c	e2 20		sep #$20	                SEP #$20
.138e	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1391					j5a:
.1391	c2 20		rep #$20	                REP #$20
.1393	48		pha		                pha
.1394	e2 20		sep #$20	                SEP #$20
.1396	a9 02		lda #$02	                lda #$02
.1398	48		pha		                pha                     ; push the value to the stack
.1399	ab		plb		                plb                     ; pull value from stack to data bank register
.139a	c2 20		rep #$20	                REP #$20
.139c	68		pla		                pla
.139d	b2 56		lda ($56)	    lda (SP)
.139f	48		pha		                pha
.13a0	e2 20		sep #$20	                SEP #$20
.13a2	a9 00		lda #$00	                lda #$00
.13a4	48		pha		                pha                     ; push the value to the stack
.13a5	ab		plb		                plb                     ; pull value from stack to data bank register
.13a6	c2 20		rep #$20	                REP #$20
.13a8	68		pla		                pla
.13a9	85 48		sta $48		    sta DX
.13ab	a5 56		lda $56		    lda SP
.13ad	18		clc		    clc
.13ae	69 02 00	adc #$0002	    adc #$02
.13b1	85 56		sta $56		    sta SP
.13b3	e2 20		sep #$20	                SEP #$20
.13b5	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.13b8					j5b:
.13b8	c2 20		rep #$20	                REP #$20
.13ba	48		pha		                pha
.13bb	e2 20		sep #$20	                SEP #$20
.13bd	a9 02		lda #$02	                lda #$02
.13bf	48		pha		                pha                     ; push the value to the stack
.13c0	ab		plb		                plb                     ; pull value from stack to data bank register
.13c1	c2 20		rep #$20	                REP #$20
.13c3	68		pla		                pla
.13c4	b2 56		lda ($56)	    lda (SP)
.13c6	48		pha		                pha
.13c7	e2 20		sep #$20	                SEP #$20
.13c9	a9 00		lda #$00	                lda #$00
.13cb	48		pha		                pha                     ; push the value to the stack
.13cc	ab		plb		                plb                     ; pull value from stack to data bank register
.13cd	c2 20		rep #$20	                REP #$20
.13cf	68		pla		                pla
.13d0	85 44		sta $44		    sta BX
.13d2	a5 56		lda $56		    lda SP
.13d4	18		clc		    clc
.13d5	69 02 00	adc #$0002	    adc #$02
.13d8	85 56		sta $56		    sta SP
.13da	e2 20		sep #$20	                SEP #$20
.13dc	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.13df					j5c:
.13df	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.13e2					j5d:
.13e2	c2 20		rep #$20	                REP #$20
.13e4	48		pha		                pha
.13e5	e2 20		sep #$20	                SEP #$20
.13e7	a9 02		lda #$02	                lda #$02
.13e9	48		pha		                pha                     ; push the value to the stack
.13ea	ab		plb		                plb                     ; pull value from stack to data bank register
.13eb	c2 20		rep #$20	                REP #$20
.13ed	68		pla		                pla
.13ee	b2 56		lda ($56)	    lda (SP)
.13f0	48		pha		                pha
.13f1	e2 20		sep #$20	                SEP #$20
.13f3	a9 00		lda #$00	                lda #$00
.13f5	48		pha		                pha                     ; push the value to the stack
.13f6	ab		plb		                plb                     ; pull value from stack to data bank register
.13f7	c2 20		rep #$20	                REP #$20
.13f9	68		pla		                pla
.13fa	85 58		sta $58		    sta BP
.13fc	a5 56		lda $56		    lda SP
.13fe	18		clc		    clc
.13ff	69 02 00	adc #$0002	    adc #$02
.1402	85 56		sta $56		    sta SP
.1404	e2 20		sep #$20	                SEP #$20
.1406	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1409					j5e:
.1409	c2 20		rep #$20	                REP #$20
.140b	48		pha		                pha
.140c	e2 20		sep #$20	                SEP #$20
.140e	a9 02		lda #$02	                lda #$02
.1410	48		pha		                pha                     ; push the value to the stack
.1411	ab		plb		                plb                     ; pull value from stack to data bank register
.1412	c2 20		rep #$20	                REP #$20
.1414	68		pla		                pla
.1415	b2 56		lda ($56)	    lda (SP)
.1417	48		pha		                pha
.1418	e2 20		sep #$20	                SEP #$20
.141a	a9 00		lda #$00	                lda #$00
.141c	48		pha		                pha                     ; push the value to the stack
.141d	ab		plb		                plb                     ; pull value from stack to data bank register
.141e	c2 20		rep #$20	                REP #$20
.1420	68		pla		                pla
.1421	85 5a		sta $5a		    sta SI
.1423	a5 56		lda $56		    lda SP
.1425	18		clc		    clc
.1426	69 02 00	adc #$0002	    adc #$02
.1429	85 56		sta $56		    sta SP
.142b	e2 20		sep #$20	                SEP #$20
.142d	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1430					j5f:
.1430	c2 20		rep #$20	                REP #$20
.1432	48		pha		                pha
.1433	e2 20		sep #$20	                SEP #$20
.1435	a9 02		lda #$02	                lda #$02
.1437	48		pha		                pha                     ; push the value to the stack
.1438	ab		plb		                plb                     ; pull value from stack to data bank register
.1439	c2 20		rep #$20	                REP #$20
.143b	68		pla		                pla
.143c	b2 56		lda ($56)	    lda (SP)
.143e	48		pha		                pha
.143f	e2 20		sep #$20	                SEP #$20
.1441	a9 00		lda #$00	                lda #$00
.1443	48		pha		                pha                     ; push the value to the stack
.1444	ab		plb		                plb                     ; pull value from stack to data bank register
.1445	c2 20		rep #$20	                REP #$20
.1447	68		pla		                pla
.1448	85 5c		sta $5c		    sta DI
.144a	a5 56		lda $56		    lda SP
.144c	18		clc		    clc
.144d	69 02 00	adc #$0002	    adc #$02
.1450	85 56		sta $56		    sta SP
.1452	e2 20		sep #$20	                SEP #$20
.1454	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1457					j60:
.1457	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.145a					j61:
.145a	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.145d					j62:
.145d	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1460					j63:
.1460	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1463					j64:
.1463	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1466					j65:
.1466	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1469					j66:
.1469	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.146c					j67:
.146c	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.146f					j68:
.146f	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1472					j69:
.1472	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1475					j6a:
.1475	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1478					j6b:
.1478	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.147b					j6c:
.147b	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.147e					j6d:
.147e	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1481					j6e:
.1481	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1484					j6f:
.1484	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1487					j70:
.1487	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.148a					j71:
.148a	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.148d					j72:
.148d	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1490					j73:
.1490	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1493					j74:
.1493	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1496					j75:
.1496	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1499					j76:
.1499	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.149c					j77:
.149c	20 ef 0c	jsr $0cef	    jsr GETNEXT
.149f	c9 80		cmp #$80	    cmp #$80
.14a1	b0 10		bcs $14b3	    bcs j77_back
.14a3					    j77_forward:
.14a3	85 5e		sta $5e		        sta TMP1
.14a5	c2 20		rep #$20	                REP #$20
.14a7	a5 52		lda $52		        lda IP
.14a9	18		clc		        clc
.14aa	65 5e		adc $5e		        adc TMP1
.14ac	85 52		sta $52		        sta IP
.14ae	e2 20		sep #$20	                SEP #$20
.14b0	4c 73 0a	jmp $0a73	        jmp MAINLOOP
.14b3					    j77_back:
.14b3	49 ff		eor #$ff	        eor #$ff
.14b5	85 5e		sta $5e		        sta TMP1
.14b7	c2 20		rep #$20	                REP #$20
.14b9	a5 52		lda $52		        lda IP
.14bb	38		sec		        sec
.14bc	e5 5e		sbc $5e		        sbc TMP1
.14be	85 52		sta $52		        sta IP
.14c0	e2 20		sep #$20	                SEP #$20
.14c2	4c 73 0a	jmp $0a73	        jmp MAINLOOP
.14c5	48		pha		                pha
.14c6	a9 00		lda #$00	                lda #$00
.14c8	48		pha		                pha                     ; push the value to the stack
.14c9	ab		plb		                plb                     ; pull value from stack to data bank register
.14ca	68		pla		                pla
.14cb					    a
.14cb	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.14ce					j78:
.14ce	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.14d1					j79:
.14d1	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.14d4					j7a:
.14d4	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.14d7					j7b:
.14d7	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.14da					j7c:
.14da	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.14dd					j7d:
.14dd	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.14e0					j7e:
.14e0	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.14e3					j7f:
.14e3	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.14e6					j80:
.14e6	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.14e9					j81:
.14e9	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.14ec					j82:
.14ec	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.14ef					j83:
.14ef	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.14f2					j84:
.14f2	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.14f5					j85:
.14f5	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.14f8					j86:
.14f8	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.14fb					j87:
.14fb	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.14fe					j88:
.14fe	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1501					j89:
.1501	20 ef 0c	jsr $0cef	    jsr GETNEXT
.1504	c9 c0		cmp #$c0	    cmp #$c0
.1506	d0 11		bne $1519	    bne +
.1508	48		pha		                pha
.1509	a9 00		lda #$00	                lda #$00
.150b	48		pha		                pha                     ; push the value to the stack
.150c	ab		plb		                plb                     ; pull value from stack to data bank register
.150d	68		pla		                pla
.150e	c2 20		rep #$20	                REP #$20
.1510	a5 42		lda $42		        lda AX
.1512	85 42		sta $42		        sta AX
.1514	e2 20		sep #$20	                SEP #$20
.1516	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.1519	c9 d8		cmp #$d8	+   cmp #$d8
.151b	d0 11		bne $152e	    bne +
.151d	48		pha		                pha
.151e	a9 00		lda #$00	                lda #$00
.1520	48		pha		                pha                     ; push the value to the stack
.1521	ab		plb		                plb                     ; pull value from stack to data bank register
.1522	68		pla		                pla
.1523	c2 20		rep #$20	                REP #$20
.1525	a5 44		lda $44		        lda BX
.1527	85 42		sta $42		        sta AX
.1529	e2 20		sep #$20	                SEP #$20
.152b	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.152e	c9 c8		cmp #$c8	+   cmp #$c8
.1530	d0 11		bne $1543	    bne +
.1532	48		pha		                pha
.1533	a9 00		lda #$00	                lda #$00
.1535	48		pha		                pha                     ; push the value to the stack
.1536	ab		plb		                plb                     ; pull value from stack to data bank register
.1537	68		pla		                pla
.1538	c2 20		rep #$20	                REP #$20
.153a	a5 46		lda $46		        lda CX
.153c	85 42		sta $42		        sta AX
.153e	e2 20		sep #$20	                SEP #$20
.1540	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.1543	c9 d0		cmp #$d0	+   cmp #$d0
.1545	d0 11		bne $1558	    bne +
.1547	48		pha		                pha
.1548	a9 00		lda #$00	                lda #$00
.154a	48		pha		                pha                     ; push the value to the stack
.154b	ab		plb		                plb                     ; pull value from stack to data bank register
.154c	68		pla		                pla
.154d	c2 20		rep #$20	                REP #$20
.154f	a5 48		lda $48		        lda DX
.1551	85 42		sta $42		        sta AX
.1553	e2 20		sep #$20	                SEP #$20
.1555	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.1558	c9 c3		cmp #$c3	+   cmp #$c3
.155a	d0 11		bne $156d	    bne +
.155c	48		pha		                pha
.155d	a9 00		lda #$00	                lda #$00
.155f	48		pha		                pha                     ; push the value to the stack
.1560	ab		plb		                plb                     ; pull value from stack to data bank register
.1561	68		pla		                pla
.1562	c2 20		rep #$20	                REP #$20
.1564	a5 42		lda $42		        lda AX
.1566	85 44		sta $44		        sta BX
.1568	e2 20		sep #$20	                SEP #$20
.156a	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.156d	c9 db		cmp #$db	+   cmp #$db
.156f	d0 11		bne $1582	    bne +
.1571	48		pha		                pha
.1572	a9 00		lda #$00	                lda #$00
.1574	48		pha		                pha                     ; push the value to the stack
.1575	ab		plb		                plb                     ; pull value from stack to data bank register
.1576	68		pla		                pla
.1577	c2 20		rep #$20	                REP #$20
.1579	a5 44		lda $44		        lda BX
.157b	85 44		sta $44		        sta BX
.157d	e2 20		sep #$20	                SEP #$20
.157f	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.1582	c9 cb		cmp #$cb	+   cmp #$cb
.1584	d0 11		bne $1597	    bne +
.1586	48		pha		                pha
.1587	a9 00		lda #$00	                lda #$00
.1589	48		pha		                pha                     ; push the value to the stack
.158a	ab		plb		                plb                     ; pull value from stack to data bank register
.158b	68		pla		                pla
.158c	c2 20		rep #$20	                REP #$20
.158e	a5 46		lda $46		        lda CX
.1590	85 44		sta $44		        sta BX
.1592	e2 20		sep #$20	                SEP #$20
.1594	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.1597	c9 d3		cmp #$d3	+   cmp #$d3
.1599	d0 11		bne $15ac	    bne +
.159b	48		pha		                pha
.159c	a9 00		lda #$00	                lda #$00
.159e	48		pha		                pha                     ; push the value to the stack
.159f	ab		plb		                plb                     ; pull value from stack to data bank register
.15a0	68		pla		                pla
.15a1	c2 20		rep #$20	                REP #$20
.15a3	a5 48		lda $48		        lda DX
.15a5	85 44		sta $44		        sta BX
.15a7	e2 20		sep #$20	                SEP #$20
.15a9	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.15ac	c9 c1		cmp #$c1	+   cmp #$c1
.15ae	d0 11		bne $15c1	    bne +
.15b0	48		pha		                pha
.15b1	a9 00		lda #$00	                lda #$00
.15b3	48		pha		                pha                     ; push the value to the stack
.15b4	ab		plb		                plb                     ; pull value from stack to data bank register
.15b5	68		pla		                pla
.15b6	c2 20		rep #$20	                REP #$20
.15b8	a5 42		lda $42		        lda AX
.15ba	85 46		sta $46		        sta CX
.15bc	e2 20		sep #$20	                SEP #$20
.15be	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.15c1	c9 d9		cmp #$d9	+   cmp #$d9
.15c3	d0 11		bne $15d6	    bne +
.15c5	48		pha		                pha
.15c6	a9 00		lda #$00	                lda #$00
.15c8	48		pha		                pha                     ; push the value to the stack
.15c9	ab		plb		                plb                     ; pull value from stack to data bank register
.15ca	68		pla		                pla
.15cb	c2 20		rep #$20	                REP #$20
.15cd	a5 44		lda $44		        lda BX
.15cf	85 46		sta $46		        sta CX
.15d1	e2 20		sep #$20	                SEP #$20
.15d3	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.15d6	c9 c9		cmp #$c9	+   cmp #$c9
.15d8	d0 11		bne $15eb	    bne +
.15da	48		pha		                pha
.15db	a9 00		lda #$00	                lda #$00
.15dd	48		pha		                pha                     ; push the value to the stack
.15de	ab		plb		                plb                     ; pull value from stack to data bank register
.15df	68		pla		                pla
.15e0	c2 20		rep #$20	                REP #$20
.15e2	a5 46		lda $46		        lda CX
.15e4	85 46		sta $46		        sta CX
.15e6	e2 20		sep #$20	                SEP #$20
.15e8	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.15eb	c9 d1		cmp #$d1	+   cmp #$d1
.15ed	d0 11		bne $1600	    bne +
.15ef	48		pha		                pha
.15f0	a9 00		lda #$00	                lda #$00
.15f2	48		pha		                pha                     ; push the value to the stack
.15f3	ab		plb		                plb                     ; pull value from stack to data bank register
.15f4	68		pla		                pla
.15f5	c2 20		rep #$20	                REP #$20
.15f7	a5 48		lda $48		        lda DX
.15f9	85 46		sta $46		        sta CX
.15fb	e2 20		sep #$20	                SEP #$20
.15fd	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.1600	c9 c2		cmp #$c2	+   cmp #$c2
.1602	d0 11		bne $1615	    bne +
.1604	48		pha		                pha
.1605	a9 00		lda #$00	                lda #$00
.1607	48		pha		                pha                     ; push the value to the stack
.1608	ab		plb		                plb                     ; pull value from stack to data bank register
.1609	68		pla		                pla
.160a	c2 20		rep #$20	                REP #$20
.160c	a5 42		lda $42		        lda AX
.160e	85 48		sta $48		        sta DX
.1610	e2 20		sep #$20	                SEP #$20
.1612	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.1615	c9 da		cmp #$da	+   cmp #$da
.1617	d0 11		bne $162a	    bne +
.1619	48		pha		                pha
.161a	a9 00		lda #$00	                lda #$00
.161c	48		pha		                pha                     ; push the value to the stack
.161d	ab		plb		                plb                     ; pull value from stack to data bank register
.161e	68		pla		                pla
.161f	c2 20		rep #$20	                REP #$20
.1621	a5 44		lda $44		        lda BX
.1623	85 48		sta $48		        sta DX
.1625	e2 20		sep #$20	                SEP #$20
.1627	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.162a	c9 ca		cmp #$ca	+   cmp #$ca
.162c	d0 11		bne $163f	    bne +
.162e	48		pha		                pha
.162f	a9 00		lda #$00	                lda #$00
.1631	48		pha		                pha                     ; push the value to the stack
.1632	ab		plb		                plb                     ; pull value from stack to data bank register
.1633	68		pla		                pla
.1634	c2 20		rep #$20	                REP #$20
.1636	a5 46		lda $46		        lda CX
.1638	85 48		sta $48		        sta DX
.163a	e2 20		sep #$20	                SEP #$20
.163c	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.163f	c9 d2		cmp #$d2	+   cmp #$d2
.1641	d0 11		bne $1654	    bne +
.1643	48		pha		                pha
.1644	a9 00		lda #$00	                lda #$00
.1646	48		pha		                pha                     ; push the value to the stack
.1647	ab		plb		                plb                     ; pull value from stack to data bank register
.1648	68		pla		                pla
.1649	c2 20		rep #$20	                REP #$20
.164b	a5 48		lda $48		        lda DX
.164d	85 48		sta $48		        sta DX
.164f	e2 20		sep #$20	                SEP #$20
.1651	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.1654	4c 8e 0a	jmp $0a8e	+    jmp MAINLOOP_END
.1657					j8a:
.1657	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.165a					j8b:
.165a	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.165d					j8c:
.165d	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1660					j8d:
.1660	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1663					j8e:
.1663	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1666					j8f:
.1666	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1669					j90:
.1669	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.166c					j91:
.166c	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.166f					j92:
.166f	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1672					j93:
.1672	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1675					j94:
.1675	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1678					j95:
.1678	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.167b					j96:
.167b	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.167e					j97:
.167e	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1681					j98:
.1681	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1684					j99:
.1684	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1687					j9a:
.1687	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.168a					j9b:
.168a	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.168d					j9c:
.168d	48		pha		                pha
.168e	a9 00		lda #$00	                lda #$00
.1690	48		pha		                pha                     ; push the value to the stack
.1691	ab		plb		                plb                     ; pull value from stack to data bank register
.1692	68		pla		                pla
.1693	c2 20		rep #$20	                REP #$20
.1695	a5 56		lda $56		    lda SP
.1697	38		sec		    sec
.1698	e9 02 00	sbc #$0002	    sbc #$02
.169b	85 56		sta $56		    sta SP
.169d	a5 54		lda $54		    lda FR
.169f	48		pha		                pha
.16a0	e2 20		sep #$20	                SEP #$20
.16a2	a9 02		lda #$02	                lda #$02
.16a4	48		pha		                pha                     ; push the value to the stack
.16a5	ab		plb		                plb                     ; pull value from stack to data bank register
.16a6	c2 20		rep #$20	                REP #$20
.16a8	68		pla		                pla
.16a9	92 56		sta ($56)	    sta (SP)
.16ab	e2 20		sep #$20	                SEP #$20
.16ad	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.16b0					j9d:
.16b0	c2 20		rep #$20	                REP #$20
.16b2	48		pha		                pha
.16b3	e2 20		sep #$20	                SEP #$20
.16b5	a9 02		lda #$02	                lda #$02
.16b7	48		pha		                pha                     ; push the value to the stack
.16b8	ab		plb		                plb                     ; pull value from stack to data bank register
.16b9	c2 20		rep #$20	                REP #$20
.16bb	68		pla		                pla
.16bc	b2 56		lda ($56)	    lda (SP)
.16be	48		pha		                pha
.16bf	e2 20		sep #$20	                SEP #$20
.16c1	a9 00		lda #$00	                lda #$00
.16c3	48		pha		                pha                     ; push the value to the stack
.16c4	ab		plb		                plb                     ; pull value from stack to data bank register
.16c5	c2 20		rep #$20	                REP #$20
.16c7	68		pla		                pla
.16c8	85 54		sta $54		    sta FR
.16ca	a5 56		lda $56		    lda SP
.16cc	18		clc		    clc
.16cd	69 02 00	adc #$0002	    adc #$02
.16d0	85 56		sta $56		    sta SP
.16d2	e2 20		sep #$20	                SEP #$20
.16d4	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.16d7					j9e:
.16d7	48		pha		                pha
.16d8	a9 00		lda #$00	                lda #$00
.16da	48		pha		                pha                     ; push the value to the stack
.16db	ab		plb		                plb                     ; pull value from stack to data bank register
.16dc	68		pla		                pla
.16dd	a5 43		lda $43		    lda AH
.16df	85 55		sta $55		    sta FRL
.16e1	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.16e4					j9f:
.16e4	48		pha		                pha
.16e5	a9 00		lda #$00	                lda #$00
.16e7	48		pha		                pha                     ; push the value to the stack
.16e8	ab		plb		                plb                     ; pull value from stack to data bank register
.16e9	68		pla		                pla
.16ea	85 55		sta $55		    sta FRL
.16ec	a5 43		lda $43		    lda AH
.16ee	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.16f1					ja0:
.16f1	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.16f4					ja1:
.16f4	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.16f7					ja2:
.16f7	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.16fa					ja3:
.16fa	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.16fd					ja4:
.16fd	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1700					ja5:
.1700	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1703					ja6:
.1703	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1706					ja7:
.1706	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1709					ja8:
.1709	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.170c					ja9:
.170c	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.170f					jaa:
.170f	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1712					jab:
.1712	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1715					jac:
.1715	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1718					jad:
.1718	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.171b					jae:
.171b	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.171e					jaf:
.171e	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1721					jb0:
.1721	20 ef 0c	jsr $0cef	    jsr GETNEXT
.1724	48		pha		                pha
.1725	a9 00		lda #$00	                lda #$00
.1727	48		pha		                pha                     ; push the value to the stack
.1728	ab		plb		                plb                     ; pull value from stack to data bank register
.1729	68		pla		                pla
.172a	85 42		sta $42		    sta AL
.172c	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.172f					jb1:
.172f	20 ef 0c	jsr $0cef	    jsr GETNEXT
.1732	48		pha		                pha
.1733	a9 00		lda #$00	                lda #$00
.1735	48		pha		                pha                     ; push the value to the stack
.1736	ab		plb		                plb                     ; pull value from stack to data bank register
.1737	68		pla		                pla
.1738	85 46		sta $46		    sta CL
.173a	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.173d					jb2:
.173d	20 ef 0c	jsr $0cef	    jsr GETNEXT
.1740	48		pha		                pha
.1741	a9 00		lda #$00	                lda #$00
.1743	48		pha		                pha                     ; push the value to the stack
.1744	ab		plb		                plb                     ; pull value from stack to data bank register
.1745	68		pla		                pla
.1746	85 48		sta $48		    sta DL      ; store it
.1748	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.174b					jb3:
.174b	20 ef 0c	jsr $0cef	    jsr GETNEXT
.174e	48		pha		                pha
.174f	a9 00		lda #$00	                lda #$00
.1751	48		pha		                pha                     ; push the value to the stack
.1752	ab		plb		                plb                     ; pull value from stack to data bank register
.1753	68		pla		                pla
.1754	85 44		sta $44		    sta BL
.1756	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1759					jb4:
.1759	20 ef 0c	jsr $0cef	    jsr GETNEXT
.175c	48		pha		                pha
.175d	a9 00		lda #$00	                lda #$00
.175f	48		pha		                pha                     ; push the value to the stack
.1760	ab		plb		                plb                     ; pull value from stack to data bank register
.1761	68		pla		                pla
.1762	85 43		sta $43		    sta AH      ; store it
.1764	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1767					jb5:
.1767	20 ef 0c	jsr $0cef	    jsr GETNEXT
.176a	48		pha		                pha
.176b	a9 00		lda #$00	                lda #$00
.176d	48		pha		                pha                     ; push the value to the stack
.176e	ab		plb		                plb                     ; pull value from stack to data bank register
.176f	68		pla		                pla
.1770	85 47		sta $47		    sta CH
.1772	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1775					jb6:
.1775	20 ef 0c	jsr $0cef	    jsr GETNEXT
.1778	48		pha		                pha
.1779	a9 00		lda #$00	                lda #$00
.177b	48		pha		                pha                     ; push the value to the stack
.177c	ab		plb		                plb                     ; pull value from stack to data bank register
.177d	68		pla		                pla
.177e	85 49		sta $49		    sta DH
.1780	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1783					jb7:
.1783	20 ef 0c	jsr $0cef	    jsr GETNEXT
.1786	48		pha		                pha
.1787	a9 00		lda #$00	                lda #$00
.1789	48		pha		                pha                     ; push the value to the stack
.178a	ab		plb		                plb                     ; pull value from stack to data bank register
.178b	68		pla		                pla
.178c	85 45		sta $45		    sta BH
.178e	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1791					jb8:
.1791	20 ef 0c	jsr $0cef	    jsr GETNEXT
.1794	48		pha		                pha
.1795	a9 00		lda #$00	                lda #$00
.1797	48		pha		                pha                     ; push the value to the stack
.1798	ab		plb		                plb                     ; pull value from stack to data bank register
.1799	68		pla		                pla
.179a	85 42		sta $42		    sta AL
.179c	20 ef 0c	jsr $0cef	    jsr GETNEXT
.179f	48		pha		                pha
.17a0	a9 00		lda #$00	                lda #$00
.17a2	48		pha		                pha                     ; push the value to the stack
.17a3	ab		plb		                plb                     ; pull value from stack to data bank register
.17a4	68		pla		                pla
.17a5	85 43		sta $43		    sta AH
.17a7	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.17aa					jb9:
.17aa	20 ef 0c	jsr $0cef	    jsr GETNEXT
.17ad	48		pha		                pha
.17ae	a9 00		lda #$00	                lda #$00
.17b0	48		pha		                pha                     ; push the value to the stack
.17b1	ab		plb		                plb                     ; pull value from stack to data bank register
.17b2	68		pla		                pla
.17b3	85 46		sta $46		    sta CL
.17b5	20 ef 0c	jsr $0cef	    jsr GETNEXT
.17b8	48		pha		                pha
.17b9	a9 00		lda #$00	                lda #$00
.17bb	48		pha		                pha                     ; push the value to the stack
.17bc	ab		plb		                plb                     ; pull value from stack to data bank register
.17bd	68		pla		                pla
.17be	85 47		sta $47		    sta CH
.17c0	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.17c3					jba:
.17c3	20 ef 0c	jsr $0cef	    jsr GETNEXT
.17c6	48		pha		                pha
.17c7	a9 00		lda #$00	                lda #$00
.17c9	48		pha		                pha                     ; push the value to the stack
.17ca	ab		plb		                plb                     ; pull value from stack to data bank register
.17cb	68		pla		                pla
.17cc	85 48		sta $48		    sta DL
.17ce	20 ef 0c	jsr $0cef	    jsr GETNEXT
.17d1	48		pha		                pha
.17d2	a9 00		lda #$00	                lda #$00
.17d4	48		pha		                pha                     ; push the value to the stack
.17d5	ab		plb		                plb                     ; pull value from stack to data bank register
.17d6	68		pla		                pla
.17d7	85 49		sta $49		    sta DH
.17d9	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.17dc					jbb:
.17dc	20 ef 0c	jsr $0cef	    jsr GETNEXT
.17df	48		pha		                pha
.17e0	a9 00		lda #$00	                lda #$00
.17e2	48		pha		                pha                     ; push the value to the stack
.17e3	ab		plb		                plb                     ; pull value from stack to data bank register
.17e4	68		pla		                pla
.17e5	85 44		sta $44		    sta BL
.17e7	20 ef 0c	jsr $0cef	    jsr GETNEXT
.17ea	48		pha		                pha
.17eb	a9 00		lda #$00	                lda #$00
.17ed	48		pha		                pha                     ; push the value to the stack
.17ee	ab		plb		                plb                     ; pull value from stack to data bank register
.17ef	68		pla		                pla
.17f0	85 45		sta $45		    sta BH
.17f2	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.17f5					jbc:
.17f5	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.17f8					jbd:
.17f8	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.17fb					jbe:
.17fb	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.17fe					jbf:
.17fe	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1801					jc0:
.1801	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1804					jc1:
.1804	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1807					jc2:
.1807	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.180a					jc3:
.180a	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.180d					jc4:
.180d	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1810					jc5:
.1810	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1813					jc6:
.1813	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1816					jc7:
.1816	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1819					jc8:
.1819	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.181c					jc9:
.181c	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.181f					jca:
.181f	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1822					jcb:
.1822	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1825					jcc:
.1825	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1828					jcd:
.1828	20 ef 0c	jsr $0cef	    jsr GETNEXT
.182b	c9 21		cmp #$21	    cmp #$21
.182d	f0 07		beq $1836	    beq jcd_putc
.182f	c9 20		cmp #$20	    cmp #$20
.1831	f0 35		beq $1868	    beq jcd_exit
.1833	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1836					    jcd_putc:
.1836	48		pha		                pha
.1837	a9 00		lda #$00	                lda #$00
.1839	48		pha		                pha                     ; push the value to the stack
.183a	ab		plb		                plb                     ; pull value from stack to data bank register
.183b	68		pla		                pla
.183c	a5 43		lda $43		        lda AH
.183e	c9 09		cmp #$09	        cmp #$09
.1840	d0 1e		bne $1860	        bne +
.1842	a0 00		ldy #$00	            ldy #$00
.1844					            pr_string_loop:
.1844	48		pha		                pha
.1845	a9 02		lda #$02	                lda #$02
.1847	48		pha		                pha                     ; push the value to the stack
.1848	ab		plb		                plb                     ; pull value from stack to data bank register
.1849	68		pla		                pla
.184a	b1 48		lda ($48),y	                lda (DX),y
.184c	c9 24		cmp #$24	                cmp #'$'
.184e	f0 0d		beq $185d	                beq pr_string_done
.1850	48		pha		                pha
.1851	a9 00		lda #$00	                lda #$00
.1853	48		pha		                pha                     ; push the value to the stack
.1854	ab		plb		                plb                     ; pull value from stack to data bank register
.1855	68		pla		                pla
.1856	20 d2 ff	jsr $ffd2	                jsr $FFD2
.1859	c8		iny		                iny
.185a	4c 44 18	jmp $1844	                jmp pr_string_loop
.185d					            pr_string_done:
.185d	4c 8e 0a	jmp $0a8e	                jmp MAINLOOP_END
.1860	a5 48		lda $48		+       lda DL
.1862	20 d2 ff	jsr $ffd2	        jsr $FFD2
.1865	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.1868					    jcd_exit:
.1868	4c 94 0a	jmp $0a94	        jmp EXIT
.186b					jce:
.186b	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.186e					jcf:
.186e	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1871					jd0:
.1871	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1874					jd1:
.1874	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1877					jd2:
.1877	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.187a					jd3:
.187a	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.187d					jd4:
.187d	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1880					jd5:
.1880	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1883					jd6:
.1883	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1886					jd7:
.1886	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1889					jd8:
.1889	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.188c					jd9:
.188c	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.188f					jda:
.188f	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1892					jdb:
.1892	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1895					jdc:
.1895	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1898					jdd:
.1898	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.189b					jde:
.189b	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.189e					jdf:
.189e	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.18a1					je0:
.18a1	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.18a4					je1:
.18a4	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.18a7					je2:
.18a7	20 ef 0c	jsr $0cef	    jsr GETNEXT
.18aa	48		pha		    pha
.18ab	48		pha		                pha
.18ac	a9 00		lda #$00	                lda #$00
.18ae	48		pha		                pha                     ; push the value to the stack
.18af	ab		plb		                plb                     ; pull value from stack to data bank register
.18b0	68		pla		                pla
.18b1	c2 20		rep #$20	                REP #$20
.18b3	a5 46		lda $46		    lda CX
.18b5	f0 2b		beq $18e2	    beq je2_loopdone
.18b7	c6 46		dec $46		    dec CX
.18b9	e2 20		sep #$20	                SEP #$20
.18bb	68		pla		    pla
.18bc	c9 80		cmp #$80	    cmp #$80
.18be	b0 10		bcs $18d0	    bcs je2_back
.18c0					    je2_forward:
.18c0	85 5e		sta $5e		        sta TMP1
.18c2	c2 20		rep #$20	                REP #$20
.18c4	a5 52		lda $52		        lda IP
.18c6	18		clc		        clc
.18c7	65 5e		adc $5e		        adc TMP1
.18c9	85 52		sta $52		        sta IP
.18cb	e2 20		sep #$20	                SEP #$20
.18cd	4c 73 0a	jmp $0a73	        jmp MAINLOOP
.18d0					    je2_back:
.18d0	49 ff		eor #$ff	        eor #$ff
.18d2	85 5e		sta $5e		        sta TMP1
.18d4	c2 20		rep #$20	                REP #$20
.18d6	a5 52		lda $52		        lda IP
.18d8	38		sec		        sec
.18d9	e5 5e		sbc $5e		        sbc TMP1
.18db	85 52		sta $52		        sta IP
.18dd	e2 20		sep #$20	                SEP #$20
.18df	4c 73 0a	jmp $0a73	        jmp MAINLOOP
.18e2					    je2_loopdone:
.18e2	e2 20		sep #$20	                SEP #$20
.18e4	68		pla		        pla
.18e5	4c 73 0a	jmp $0a73	        jmp MAINLOOP
.18e8					je3:
.18e8	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.18eb					je4:
.18eb	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.18ee					je5:
.18ee	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.18f1					je6:
.18f1	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.18f4					je7:
.18f4	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.18f7					je8:
.18f7	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.18fa					je9:
.18fa	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.18fd					jea:
.18fd	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1900					jeb:
.1900	20 ef 0c	jsr $0cef	    jsr GETNEXT
.1903	48		pha		                pha
.1904	a9 00		lda #$00	                lda #$00
.1906	48		pha		                pha                     ; push the value to the stack
.1907	ab		plb		                plb                     ; pull value from stack to data bank register
.1908	68		pla		                pla
.1909	c9 80		cmp #$80	    cmp #$80
.190b	b0 10		bcs $191d	    bcs jeb_back
.190d					    jeb_forward:
.190d	85 5e		sta $5e		        sta TMP1
.190f	c2 20		rep #$20	                REP #$20
.1911	a5 52		lda $52		        lda IP
.1913	18		clc		        clc
.1914	65 5e		adc $5e		        adc TMP1
.1916	85 52		sta $52		        sta IP
.1918	e2 20		sep #$20	                SEP #$20
.191a	4c 73 0a	jmp $0a73	        jmp MAINLOOP
.191d					    jeb_back:
.191d	49 ff		eor #$ff	        eor #$ff
.191f	85 5e		sta $5e		        sta TMP1
.1921	c2 20		rep #$20	                REP #$20
.1923	a5 52		lda $52		        lda IP
.1925	38		sec		        sec
.1926	e5 5e		sbc $5e		        sbc TMP1
.1928	85 52		sta $52		        sta IP
.192a	e2 20		sep #$20	                SEP #$20
.192c	4c 73 0a	jmp $0a73	        jmp MAINLOOP
.192f					jec:
.192f	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1932					jed:
.1932	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1935					jee:
.1935	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1938					jef:
.1938	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.193b					jf0:
.193b	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.193e					jf1:
.193e	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1941					jf2:
.1941	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1944					jf3:
.1944	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1947					jf4:
.1947	4c 47 19	jmp $1947	    jmp jf4
.194a					jf5:
.194a	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.194d					jf6:
.194d	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1950					jf7:
.1950	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1953					jf8:
.1953	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1956					jf9:
.1956	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1959					jfa:
.1959	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.195c					jfb:
.195c	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.195f					jfc:
.195f	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1962					jfd:
.1962	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1965					jfe:
.1965	20 ef 0c	jsr $0cef	    jsr GETNEXT
.1968	c9 c0		cmp #$c0	    cmp #$c0
.196a	f0 1f		beq $198b	    beq jfe_al
.196c	c9 c4		cmp #$c4	    cmp #$c4
.196e	f0 26		beq $1996	    beq jfe_ah
.1970	c9 c3		cmp #$c3	    cmp #$c3
.1972	f0 2d		beq $19a1	    beq jfe_bl
.1974	c9 c7		cmp #$c7	    cmp #$c7
.1976	f0 34		beq $19ac	    beq jfe_bh
.1978	c9 c1		cmp #$c1	    cmp #$c1
.197a	f0 3b		beq $19b7	    beq jfe_cl
.197c	c9 c5		cmp #$c5	    cmp #$c5
.197e	f0 42		beq $19c2	    beq jfe_ch
.1980	c9 c2		cmp #$c2	    cmp #$c2
.1982	f0 49		beq $19cd	    beq jfe_dl
.1984	c9 c6		cmp #$c6	    cmp #$c6
.1986	f0 50		beq $19d8	    beq jfe_dh
.1988	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.198b					    jfe_al:
.198b	48		pha		                pha
.198c	a9 00		lda #$00	                lda #$00
.198e	48		pha		                pha                     ; push the value to the stack
.198f	ab		plb		                plb                     ; pull value from stack to data bank register
.1990	68		pla		                pla
.1991	e6 42		inc $42		        inc AL
.1993	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.1996					    jfe_ah:
.1996	48		pha		                pha
.1997	a9 00		lda #$00	                lda #$00
.1999	48		pha		                pha                     ; push the value to the stack
.199a	ab		plb		                plb                     ; pull value from stack to data bank register
.199b	68		pla		                pla
.199c	e6 43		inc $43		        inc AH
.199e	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.19a1					    jfe_bl:
.19a1	48		pha		                pha
.19a2	a9 00		lda #$00	                lda #$00
.19a4	48		pha		                pha                     ; push the value to the stack
.19a5	ab		plb		                plb                     ; pull value from stack to data bank register
.19a6	68		pla		                pla
.19a7	e6 44		inc $44		        inc BL
.19a9	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.19ac					    jfe_bh:
.19ac	48		pha		                pha
.19ad	a9 00		lda #$00	                lda #$00
.19af	48		pha		                pha                     ; push the value to the stack
.19b0	ab		plb		                plb                     ; pull value from stack to data bank register
.19b1	68		pla		                pla
.19b2	e6 45		inc $45		        inc BH
.19b4	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.19b7					    jfe_cl:
.19b7	48		pha		                pha
.19b8	a9 00		lda #$00	                lda #$00
.19ba	48		pha		                pha                     ; push the value to the stack
.19bb	ab		plb		                plb                     ; pull value from stack to data bank register
.19bc	68		pla		                pla
.19bd	e6 46		inc $46		        inc CL
.19bf	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.19c2					    jfe_ch:
.19c2	48		pha		                pha
.19c3	a9 00		lda #$00	                lda #$00
.19c5	48		pha		                pha                     ; push the value to the stack
.19c6	ab		plb		                plb                     ; pull value from stack to data bank register
.19c7	68		pla		                pla
.19c8	e6 47		inc $47		        inc CH
.19ca	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.19cd					    jfe_dl:
.19cd	48		pha		                pha
.19ce	a9 00		lda #$00	                lda #$00
.19d0	48		pha		                pha                     ; push the value to the stack
.19d1	ab		plb		                plb                     ; pull value from stack to data bank register
.19d2	68		pla		                pla
.19d3	e6 48		inc $48		        inc DL
.19d5	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.19d8					    jfe_dh:
.19d8	48		pha		                pha
.19d9	a9 00		lda #$00	                lda #$00
.19db	48		pha		                pha                     ; push the value to the stack
.19dc	ab		plb		                plb                     ; pull value from stack to data bank register
.19dd	68		pla		                pla
.19de	e6 49		inc $49		        inc DH
.19e0	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.19e3					jff:
.19e3	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END

;******  End of listing
