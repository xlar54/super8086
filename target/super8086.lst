
; 64tass Turbo Assembler Macro V1.53.1515 listing file
; 64tass -a -l target\super8086.lbl -L target\super8086.lst -o target\super8086 src\super8086.asm
; Sun Mar 20 11:29:52 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: src\super8086.asm


;******  Processing file: src\macros.asm


;******  Return to file: src\super8086.asm

=$020000				BANK = $020000
>0801	0b 08 d5 07			    .word (+), 2005
>0805	9e 32 35 37 35 00		    .null $9e, format("%d",start)
>080b	00 00				 +  .word 0
=$42					AX  = $42   ; the accumulator reg
=$42					AL  = $42
=$43					AH  = $43
=$44					BX  = $44   ; the base addr reg
=$44					BL  = $44
=$45					BH  = $45
=$46					CX  = $46   ; the count reg
=$46					CL  = $46
=$47					CH  = $47
=$48					DX  = $48   ; the data reg
=$48					DL  = $48
=$49					DH  = $49
=$4a					CS  = $4a   ; code segment reg
=$4c					DS  = $4c   ; data segment reg
=$4e					ES  = $4e   ; extra segment reg
=$50					SS  = $50   ; stack segment reg
=$52					IP  = $52   ; instruction pointer
=$54					FR  = $54   ; flags register
=$54					FRH = $54
=$55					FRL = $55
=$56					SP  = $56   ; stack pointer reg
=$58					BP  = $58   ; base pointer reg
=$5a					SI  = $5a   ; source index reg
=$5c					DI  = $5c   ; destination index reg
=$5e					TMP1 = $5e
.080d					JUMPTBL:
>080d	38 0e d2 0e d5 0e d8 0e		    .word j00, j01, j02, j03, j04, j05, j06, j07, j08, j09, j0a, j0b, j0c, j0d, j0e, j0f
>0815	db 0e de 0e e1 0e 04 0f 2b 0f 2e 0f 31 0f 34 0f
>0825	37 0f 3a 0f 3d 0f 60 0f
>082d	87 0f 8a 0f 8d 0f 90 0f		    .word j10, j11, j12, j13, j14, j15, j16, j17, j18, j19, j1a, j1b, j1c, j1d, j1e, j1f
>0835	93 0f 96 0f 99 0f bc 0f e3 0f e6 0f e9 0f ec 0f
>0845	ef 0f f2 0f f5 0f 18 10
>084d	3f 10 42 10 61 11 64 11		    .word j20, j21, j22, j23, j24, j25, j26, j27, j28, j29, j2a, j2b, j2c, j2d, j2e, j2f
>0855	67 11 6a 11 6d 11 70 11 73 11 76 11 79 11 7c 11
>0865	7f 11 82 11 85 11 88 11
>086d	8b 11 8e 11 91 11 94 11		    .word j30, j31, j32, j33, j34, j35, j36, j37, j38, j39, j3a, j3b, j3c, j3d, j3e, j3f
>0875	97 11 9a 11 9d 11 a0 11 a3 11 a6 11 a9 11 ac 11
>0885	af 11 b2 11 b5 11 b8 11
>088d	bb 11 ca 11 d9 11 e8 11		    .word j40, j41, j42, j43, j44, j45, j46, j47, j48, j49, j4a, j4b, j4c, j4d, j4e, j4f
>0895	f7 11 fa 11 fd 11 00 12 03 12 06 12 09 12 0c 12
>08a5	0f 12 12 12 15 12 18 12
>08ad	1b 12 3e 12 61 12 84 12		    .word j50, j51, j52, j53, j54, j55, j56, j57, j58, j59, j5a, j5b, j5c, j5d, j5e, j5f
>08b5	a7 12 aa 12 cd 12 f0 12 13 13 3a 13 61 13 88 13
>08c5	af 13 b2 13 d9 13 00 14
>08cd	27 14 2a 14 2d 14 30 14		    .word j60, j61, j62, j63, j64, j65, j66, j67, j68, j69, j6a, j6b, j6c, j6d, j6e, j6f
>08d5	33 14 36 14 39 14 3c 14 3f 14 42 14 45 14 48 14
>08e5	4b 14 4e 14 51 14 54 14
>08ed	57 14 5a 14 5d 14 60 14		    .word j70, j71, j72, j73, j74, j75, j76, j77, j78, j79, j7a, j7b, j7c, j7d, j7e, j7f
>08f5	63 14 66 14 69 14 6c 14 9e 14 a1 14 a4 14 a7 14
>0905	aa 14 ad 14 b0 14 b3 14
>090d	b6 14 b9 14 bc 14 bf 14		    .word j80, j81, j82, j83, j84, j85, j86, j87, j88, j89, j8a, j8b, j8c, j8d, j8e, j8f
>0915	c2 14 c5 14 c8 14 cb 14 ce 14 d1 14 27 16 2a 16
>0925	2d 16 30 16 33 16 36 16
>092d	39 16 3c 16 3f 16 42 16		    .word j90, j91, j92, j93, j94, j95, j96, j97, j98, j99, j9a, j9b, j9c, j9d, j9e, j9f
>0935	45 16 48 16 4b 16 4e 16 51 16 54 16 57 16 5a 16
>0945	5d 16 80 16 a7 16 b4 16
>094d	c1 16 c4 16 c7 16 ca 16		    .word ja0, ja1, ja2, ja3, ja4, ja5, ja6, ja7, ja8, ja9, jaa, jab, jac, jad, jae, jaf
>0955	cd 16 d0 16 d3 16 d6 16 d9 16 dc 16 df 16 e2 16
>0965	e5 16 e8 16 eb 16 ee 16
>096d	f1 16 ff 16 0d 17 1b 17		    .word jb0, jb1, jb2, jb3, jb4, jb5, jb6, jb7, jb8, jb9, jba, jbb, jbc, jbd, jbe, jbf
>0975	29 17 37 17 45 17 53 17 61 17 7a 17 93 17 ac 17
>0985	c5 17 c8 17 cb 17 ce 17
>098d	d1 17 d4 17 d7 17 da 17		    .word jc0, jc1, jc2, jc3, jc4, jc5, jc6, jc7, jc8, jc9, jca, jcb, jcc, jcd, jce, jcf
>0995	dd 17 e0 17 e3 17 e6 17 e9 17 ec 17 ef 17 f2 17
>09a5	f5 17 f8 17 3b 18 3e 18
>09ad	41 18 44 18 47 18 4a 18		    .word jd0, jd1, jd2, jd3, jd4, jd5, jd6, jd7, jd8, jd9, jda, jdb, jdc, jdd, jde, jdf
>09b5	4d 18 50 18 53 18 56 18 59 18 5c 18 5f 18 62 18
>09c5	65 18 68 18 6b 18 6e 18
>09cd	71 18 74 18 77 18 b8 18		    .word je0, je1, je2, je3, je4, je5, je6, je7, je8, je9, jea, jeb, jec, jed, jee, jef
>09d5	bb 18 be 18 c1 18 c4 18 c7 18 ca 18 cd 18 d0 18
>09e5	ff 18 02 19 05 19 08 19
>09ed	0b 19 0e 19 11 19 14 19		    .word jf0, jf1, jf2, jf3, jf4, jf5, jf6, jf7, jf8, jf9, jfa, jfb, jfc, jfd, jfe, jff
>09f5	17 19 1a 19 1d 19 20 19 23 19 26 19 29 19 2c 19
>0a05	2f 19 32 19 35 19 b3 19
.0a0d					JUMPADDR:
>0a0d	00 00				    .word $0000
.0a0f					start:
.0a0f	a9 48		lda #$48	    lda #<msg1      ; print the startup message
.0a11	85 fe		sta $fe		    sta $fe
.0a13	a9 0d		lda #$0d	    lda #>msg1
.0a15	85 ff		sta $ff		    sta $ff
.0a17	20 12 0d	jsr $0d12	    jsr print
.0a1a	18		clc		                clc
.0a1b	fb		xce		                xce
.0a1c	c2 20		rep #$20	                REP #$20
.0a1e	64 42		stz $42		    stz AX
.0a20	64 44		stz $44		    stz BX
.0a22	64 46		stz $46		    stz CX
.0a24	64 48		stz $48		    stz DX
.0a26	64 4a		stz $4a		    stz CS
.0a28	64 4c		stz $4c		    stz DS
.0a2a	64 4e		stz $4e		    stz ES
.0a2c	64 50		stz $50		    stz SS
.0a2e	64 54		stz $54		    stz FR
.0a30	a9 00 01	lda #$0100	    lda #$0100
.0a33	85 52		sta $52		    sta IP
.0a35	a9 fe ff	lda #$fffe	    lda #$FFFE
.0a38	85 56		sta $56		    sta SP
.0a3a	e2 30		sep #$30	                SEP #$30
.0a3c	a0 00		ldy #$00	    ldy #$00
.0a3e					LOAD:
.0a3e	b9 57 0a	lda $0a57,y	    lda X86PRG,y
.0a41	48		pha		                pha
.0a42	a9 02		lda #$02	                lda #$02
.0a44	48		pha		                pha                     ; push the value to the stack
.0a45	ab		plb		                plb                     ; pull value from stack to data bank register
.0a46	68		pla		                pla
.0a47	91 52		sta ($52),y	    sta (IP),y
.0a49	c8		iny		    iny
.0a4a	c0 2a		cpy #$2a	    cpy #$2a
.0a4c	f0 25		beq $0a73	    beq MAINLOOP
.0a4e	48		pha		                pha
.0a4f	a9 00		lda #$00	                lda #$00
.0a51	48		pha		                pha                     ; push the value to the stack
.0a52	ab		plb		                plb                     ; pull value from stack to data bank register
.0a53	68		pla		                pla
.0a54	4c 3e 0a	jmp $0a3e	    jmp LOAD
.0a57					X86PRG:
>0a57	b0 01				    .byte $b0, $01
>0a59	b3 00				    .byte $b3, $00
>0a5b	00 d8				    .byte $00, $d8
>0a5d	cd 20				    .byte $cd, $20
>0a5f	48 45 4c 4c 4f 20 57 4f		    .text "hello world$"
>0a67	52 4c 44 24
>0a6b	cd 20				    .byte $cd, $20      ; int 21
>0a6d	fe c2				    .byte $fe, $c2      ; inc DL
>0a6f	e2 f8				    .byte $e2, $f8      ; loop 0105
>0a71	cd 20				    .byte $cd, $20      ; int 20
.0a73					MAINLOOP:
.0a73	a9 00		lda #$00	    lda #$00
.0a75	eb		xba		    xba
.0a76	20 09 0d	jsr $0d09	    jsr FETCH_IP
.0a79	48		pha		                pha
.0a7a	a9 00		lda #$00	                lda #$00
.0a7c	48		pha		                pha                     ; push the value to the stack
.0a7d	ab		plb		                plb                     ; pull value from stack to data bank register
.0a7e	68		pla		                pla
.0a7f	c2 30		rep #$30	                REP #$30
.0a81	0a		asl a		    asl
.0a82	a8		tay		    tay
.0a83	b9 0d 08	lda $080d,y	    lda JUMPTBL,y
.0a86	8d 0d 0a	sta $0a0d	    sta JUMPADDR
.0a89	e2 30		sep #$30	                SEP #$30
.0a8b	6c 0d 0a	jmp ($0a0d)	    jmp (JUMPADDR)
.0a8e					MAINLOOP_END:
.0a8e	20 f6 0c	jsr $0cf6	    jsr INC_IP
.0a91	4c 73 0a	jmp $0a73	    jmp MAINLOOP
.0a94					EXIT:
.0a94	e2 30		sep #$30	                SEP #$30
.0a96	48		pha		                pha
.0a97	a9 00		lda #$00	                lda #$00
.0a99	48		pha		                pha                     ; push the value to the stack
.0a9a	ab		plb		                plb                     ; pull value from stack to data bank register
.0a9b	68		pla		                pla
.0a9c	a9 5e		lda #$5e	    lda #<txt_ax      ; print the startup message
.0a9e	85 fe		sta $fe		    sta $fe
.0aa0	a9 0d		lda #$0d	    lda #>txt_ax
.0aa2	85 ff		sta $ff		    sta $ff
.0aa4	20 12 0d	jsr $0d12	    jsr print
.0aa7	a5 43		lda $43		    lda AH
.0aa9	20 20 0d	jsr $0d20	    jsr prhex
.0aac	a5 42		lda $42		    lda AL
.0aae	20 20 0d	jsr $0d20	    jsr prhex
.0ab1	a9 20		lda #$20	    lda #' '
.0ab3	20 d2 ff	jsr $ffd2	    jsr $FFD2
.0ab6	a9 64		lda #$64	    lda #<txt_bx      ; print the startup message
.0ab8	85 fe		sta $fe		    sta $fe
.0aba	a9 0d		lda #$0d	    lda #>txt_bx
.0abc	85 ff		sta $ff		    sta $ff
.0abe	20 12 0d	jsr $0d12	    jsr print
.0ac1	a5 45		lda $45		    lda BH
.0ac3	20 20 0d	jsr $0d20	    jsr prhex
.0ac6	a5 44		lda $44		    lda BL
.0ac8	20 20 0d	jsr $0d20	    jsr prhex
.0acb	a9 20		lda #$20	    lda #' '
.0acd	20 d2 ff	jsr $ffd2	    jsr $FFD2
.0ad0	a9 68		lda #$68	    lda #<txt_cx      ; print the startup message
.0ad2	85 fe		sta $fe		    sta $fe
.0ad4	a9 0d		lda #$0d	    lda #>txt_cx
.0ad6	85 ff		sta $ff		    sta $ff
.0ad8	20 12 0d	jsr $0d12	    jsr print
.0adb	a5 47		lda $47		    lda CH
.0add	20 20 0d	jsr $0d20	    jsr prhex
.0ae0	a5 46		lda $46		    lda CL
.0ae2	20 20 0d	jsr $0d20	    jsr prhex
.0ae5	a9 20		lda #$20	    lda #' '
.0ae7	20 d2 ff	jsr $ffd2	    jsr $FFD2
.0aea	a9 6c		lda #$6c	    lda #<txt_dx      ; print the startup message
.0aec	85 fe		sta $fe		    sta $fe
.0aee	a9 0d		lda #$0d	    lda #>txt_dx
.0af0	85 ff		sta $ff		    sta $ff
.0af2	20 12 0d	jsr $0d12	    jsr print
.0af5	a5 49		lda $49		    lda DH
.0af7	20 20 0d	jsr $0d20	    jsr prhex
.0afa	a5 48		lda $48		    lda DL
.0afc	20 20 0d	jsr $0d20	    jsr prhex
.0aff	a9 70		lda #$70	    lda #<txt_sp      ; print the startup message
.0b01	85 fe		sta $fe		    sta $fe
.0b03	a9 0d		lda #$0d	    lda #>txt_sp
.0b05	85 ff		sta $ff		    sta $ff
.0b07	20 12 0d	jsr $0d12	    jsr print
.0b0a	a5 56		lda $56		    lda SP
.0b0c	20 20 0d	jsr $0d20	    jsr prhex
.0b0f	a5 57		lda $57		    lda SP+1
.0b11	20 20 0d	jsr $0d20	    jsr prhex
.0b14	a9 20		lda #$20	    lda #' '
.0b16	20 d2 ff	jsr $ffd2	    jsr $FFD2
.0b19	a9 75		lda #$75	    lda #<txt_bp      ; print the startup message
.0b1b	85 fe		sta $fe		    sta $fe
.0b1d	a9 0d		lda #$0d	    lda #>txt_bp
.0b1f	85 ff		sta $ff		    sta $ff
.0b21	20 12 0d	jsr $0d12	    jsr print
.0b24	a5 58		lda $58		    lda BP
.0b26	20 20 0d	jsr $0d20	    jsr prhex
.0b29	a5 5a		lda $5a		    lda BP+2
.0b2b	20 20 0d	jsr $0d20	    jsr prhex
.0b2e	a9 20		lda #$20	    lda #' '
.0b30	20 d2 ff	jsr $ffd2	    jsr $FFD2
.0b33	a9 79		lda #$79	    lda #<txt_si      ; print the startup message
.0b35	85 fe		sta $fe		    sta $fe
.0b37	a9 0d		lda #$0d	    lda #>txt_si
.0b39	85 ff		sta $ff		    sta $ff
.0b3b	20 12 0d	jsr $0d12	    jsr print
.0b3e	a5 5a		lda $5a		    lda SI
.0b40	20 20 0d	jsr $0d20	    jsr prhex
.0b43	a5 5c		lda $5c		    lda SI+2
.0b45	20 20 0d	jsr $0d20	    jsr prhex
.0b48	a9 20		lda #$20	    lda #' '
.0b4a	20 d2 ff	jsr $ffd2	    jsr $FFD2
.0b4d	a9 7d		lda #$7d	    lda #<txt_di      ; print the startup message
.0b4f	85 fe		sta $fe		    sta $fe
.0b51	a9 0d		lda #$0d	    lda #>txt_di
.0b53	85 ff		sta $ff		    sta $ff
.0b55	20 12 0d	jsr $0d12	    jsr print
.0b58	a5 5c		lda $5c		    lda DI
.0b5a	20 20 0d	jsr $0d20	    jsr prhex
.0b5d	a5 5e		lda $5e		    lda DI+2
.0b5f	20 20 0d	jsr $0d20	    jsr prhex
.0b62	a9 81		lda #$81	    lda #<txt_ds      ; print the startup message
.0b64	85 fe		sta $fe		    sta $fe
.0b66	a9 0d		lda #$0d	    lda #>txt_ds
.0b68	85 ff		sta $ff		    sta $ff
.0b6a	20 12 0d	jsr $0d12	    jsr print
.0b6d	a5 4c		lda $4c		    lda DS
.0b6f	20 20 0d	jsr $0d20	    jsr prhex
.0b72	a5 4d		lda $4d		    lda DS+1
.0b74	20 20 0d	jsr $0d20	    jsr prhex
.0b77	a9 20		lda #$20	    lda #' '
.0b79	20 d2 ff	jsr $ffd2	    jsr $FFD2
.0b7c	a9 86		lda #$86	    lda #<txt_es      ; print the startup message
.0b7e	85 fe		sta $fe		    sta $fe
.0b80	a9 0d		lda #$0d	    lda #>txt_es
.0b82	85 ff		sta $ff		    sta $ff
.0b84	20 12 0d	jsr $0d12	    jsr print
.0b87	a5 4e		lda $4e		    lda ES
.0b89	20 20 0d	jsr $0d20	    jsr prhex
.0b8c	a5 50		lda $50		    lda ES+2
.0b8e	20 20 0d	jsr $0d20	    jsr prhex
.0b91	a9 20		lda #$20	    lda #' '
.0b93	20 d2 ff	jsr $ffd2	    jsr $FFD2
.0b96	a9 8a		lda #$8a	    lda #<txt_ss      ; print the startup message
.0b98	85 fe		sta $fe		    sta $fe
.0b9a	a9 0d		lda #$0d	    lda #>txt_ss
.0b9c	85 ff		sta $ff		    sta $ff
.0b9e	20 12 0d	jsr $0d12	    jsr print
.0ba1	a5 50		lda $50		    lda SS
.0ba3	20 20 0d	jsr $0d20	    jsr prhex
.0ba6	a5 52		lda $52		    lda SS+2
.0ba8	20 20 0d	jsr $0d20	    jsr prhex
.0bab	a9 20		lda #$20	    lda #' '
.0bad	20 d2 ff	jsr $ffd2	    jsr $FFD2
.0bb0	a9 8e		lda #$8e	    lda #<txt_cs      ; print the startup message
.0bb2	85 fe		sta $fe		    sta $fe
.0bb4	a9 0d		lda #$0d	    lda #>txt_cs
.0bb6	85 ff		sta $ff		    sta $ff
.0bb8	20 12 0d	jsr $0d12	    jsr print
.0bbb	a5 4a		lda $4a		    lda CS
.0bbd	20 20 0d	jsr $0d20	    jsr prhex
.0bc0	a5 4c		lda $4c		    lda CS+2
.0bc2	20 20 0d	jsr $0d20	    jsr prhex
.0bc5	a9 92		lda #$92	    lda #<txt_ip      ; print the startup message
.0bc7	85 fe		sta $fe		    sta $fe
.0bc9	a9 0d		lda #$0d	    lda #>txt_ip
.0bcb	85 ff		sta $ff		    sta $ff
.0bcd	20 12 0d	jsr $0d12	    jsr print
.0bd0	a5 53		lda $53		    lda IP+1
.0bd2	20 20 0d	jsr $0d20	    jsr prhex
.0bd5	a5 52		lda $52		    lda IP
.0bd7	20 20 0d	jsr $0d20	    jsr prhex
.0bda	a9 20		lda #$20	    lda #' '
.0bdc	20 d2 ff	jsr $ffd2	    jsr $FFD2
.0bdf	a9 97		lda #$97	    lda #<txt_fr      ; print the startup message
.0be1	85 fe		sta $fe		    sta $fe
.0be3	a9 0d		lda #$0d	    lda #>txt_fr
.0be5	85 ff		sta $ff		    sta $ff
.0be7	20 12 0d	jsr $0d12	    jsr print
.0bea	a5 54		lda $54		    lda FRH
.0bec	20 20 0d	jsr $0d20	    jsr prhex
.0bef	a5 55		lda $55		    lda FRL
.0bf1	20 20 0d	jsr $0d20	    jsr prhex
.0bf4					fl_ovnv
.0bf4	a5 54		lda $54		    lda FRH
.0bf6	29 08		and #$08	    and #$08
.0bf8	f0 0e		beq $0c08	    beq +
.0bfa	a9 9e		lda #$9e	    lda #<txt_fr_ov      ; print the startup message
.0bfc	85 fe		sta $fe		    sta $fe
.0bfe	a9 0d		lda #$0d	    lda #>txt_fr_ov
.0c00	85 ff		sta $ff		    sta $ff
.0c02	20 12 0d	jsr $0d12	    jsr print
.0c05	4c 13 0c	jmp $0c13	    jmp fl_updn
.0c08	a9 a3		lda #$a3	+   lda #<txt_fr_nv      ; print the startup message
.0c0a	85 fe		sta $fe		    sta $fe
.0c0c	a9 0d		lda #$0d	    lda #>txt_fr_nv
.0c0e	85 ff		sta $ff		    sta $ff
.0c10	20 12 0d	jsr $0d12	    jsr print
.0c13					fl_updn
.0c13	a5 54		lda $54		    lda FRH
.0c15	29 04		and #$04	    and #$04
.0c17	f0 0e		beq $0c27	    beq +
.0c19	a9 ac		lda #$ac	    lda #<txt_fr_dn      ; print the startup message
.0c1b	85 fe		sta $fe		    sta $fe
.0c1d	a9 0d		lda #$0d	    lda #>txt_fr_dn
.0c1f	85 ff		sta $ff		    sta $ff
.0c21	20 12 0d	jsr $0d12	    jsr print
.0c24	4c 32 0c	jmp $0c32	    jmp fl_eidi
.0c27	a9 a8		lda #$a8	+   lda #<txt_fr_up      ; print the startup message
.0c29	85 fe		sta $fe		    sta $fe
.0c2b	a9 0d		lda #$0d	    lda #>txt_fr_up
.0c2d	85 ff		sta $ff		    sta $ff
.0c2f	20 12 0d	jsr $0d12	    jsr print
.0c32					fl_eidi
.0c32	a5 54		lda $54		    lda FRH
.0c34	29 02		and #$02	    and #$02
.0c36	f0 0e		beq $0c46	    beq +
.0c38	a9 b0		lda #$b0	    lda #<txt_fr_ei      ; print the startup message
.0c3a	85 fe		sta $fe		    sta $fe
.0c3c	a9 0d		lda #$0d	    lda #>txt_fr_ei
.0c3e	85 ff		sta $ff		    sta $ff
.0c40	20 12 0d	jsr $0d12	    jsr print
.0c43	4c 51 0c	jmp $0c51	    jmp fl_plng
.0c46	a9 b4		lda #$b4	+   lda #<txt_fr_di      ; print the startup message
.0c48	85 fe		sta $fe		    sta $fe
.0c4a	a9 0d		lda #$0d	    lda #>txt_fr_di
.0c4c	85 ff		sta $ff		    sta $ff
.0c4e	20 12 0d	jsr $0d12	    jsr print
.0c51					fl_plng
.0c51	a5 55		lda $55		    lda FRL
.0c53	29 80		and #$80	    and #$80
.0c55	f0 0e		beq $0c65	    beq +
.0c57	a9 b8		lda #$b8	    lda #<txt_fr_ng      ; print the startup message
.0c59	85 fe		sta $fe		    sta $fe
.0c5b	a9 0d		lda #$0d	    lda #>txt_fr_ng
.0c5d	85 ff		sta $ff		    sta $ff
.0c5f	20 12 0d	jsr $0d12	    jsr print
.0c62	4c 70 0c	jmp $0c70	    jmp fl_zrnz
.0c65	a9 bc		lda #$bc	+   lda #<txt_fr_pl      ; print the startup message
.0c67	85 fe		sta $fe		    sta $fe
.0c69	a9 0d		lda #$0d	    lda #>txt_fr_pl
.0c6b	85 ff		sta $ff		    sta $ff
.0c6d	20 12 0d	jsr $0d12	    jsr print
.0c70					fl_zrnz
.0c70	a5 55		lda $55		    lda FRL
.0c72	29 40		and #$40	    and #$40
.0c74	f0 0e		beq $0c84	    beq +
.0c76	a9 c0		lda #$c0	    lda #<txt_fr_zr      ; print the startup message
.0c78	85 fe		sta $fe		    sta $fe
.0c7a	a9 0d		lda #$0d	    lda #>txt_fr_zr
.0c7c	85 ff		sta $ff		    sta $ff
.0c7e	20 12 0d	jsr $0d12	    jsr print
.0c81	4c 8f 0c	jmp $0c8f	    jmp fl_acna
.0c84	a9 c4		lda #$c4	+   lda #<txt_fr_nz      ; print the startup message
.0c86	85 fe		sta $fe		    sta $fe
.0c88	a9 0d		lda #$0d	    lda #>txt_fr_nz
.0c8a	85 ff		sta $ff		    sta $ff
.0c8c	20 12 0d	jsr $0d12	    jsr print
.0c8f					fl_acna
.0c8f	a5 55		lda $55		    lda FRL
.0c91	29 10		and #$10	    and #$10
.0c93	f0 0e		beq $0ca3	    beq +
.0c95	a9 c8		lda #$c8	    lda #<txt_fr_ac      ; print the startup message
.0c97	85 fe		sta $fe		    sta $fe
.0c99	a9 0d		lda #$0d	    lda #>txt_fr_ac
.0c9b	85 ff		sta $ff		    sta $ff
.0c9d	20 12 0d	jsr $0d12	    jsr print
.0ca0	4c ae 0c	jmp $0cae	    jmp fl_pepo
.0ca3	a9 cc		lda #$cc	+   lda #<txt_fr_na      ; print the startup message
.0ca5	85 fe		sta $fe		    sta $fe
.0ca7	a9 0d		lda #$0d	    lda #>txt_fr_na
.0ca9	85 ff		sta $ff		    sta $ff
.0cab	20 12 0d	jsr $0d12	    jsr print
.0cae					fl_pepo
.0cae	a5 55		lda $55		    lda FRL
.0cb0	29 04		and #$04	    and #$04
.0cb2	f0 0e		beq $0cc2	    beq +
.0cb4	a9 d0		lda #$d0	    lda #<txt_fr_pe      ; print the startup message
.0cb6	85 fe		sta $fe		    sta $fe
.0cb8	a9 0d		lda #$0d	    lda #>txt_fr_pe
.0cba	85 ff		sta $ff		    sta $ff
.0cbc	20 12 0d	jsr $0d12	    jsr print
.0cbf	4c cd 0c	jmp $0ccd	    jmp fl_cync
.0cc2	a9 d4		lda #$d4	+   lda #<txt_fr_po      ; print the startup message
.0cc4	85 fe		sta $fe		    sta $fe
.0cc6	a9 0d		lda #$0d	    lda #>txt_fr_po
.0cc8	85 ff		sta $ff		    sta $ff
.0cca	20 12 0d	jsr $0d12	    jsr print
.0ccd					fl_cync
.0ccd	a5 55		lda $55		    lda FRL
.0ccf	29 01		and #$01	    and #$01
.0cd1	f0 0e		beq $0ce1	    beq +
.0cd3	a9 d8		lda #$d8	    lda #<txt_fr_cy      ; print the startup message
.0cd5	85 fe		sta $fe		    sta $fe
.0cd7	a9 0d		lda #$0d	    lda #>txt_fr_cy
.0cd9	85 ff		sta $ff		    sta $ff
.0cdb	20 12 0d	jsr $0d12	    jsr print
.0cde	4c ec 0c	jmp $0cec	    jmp fl_done
.0ce1	a9 dc		lda #$dc	+   lda #<txt_fr_nc      ; print the startup message
.0ce3	85 fe		sta $fe		    sta $fe
.0ce5	a9 0d		lda #$0d	    lda #>txt_fr_nc
.0ce7	85 ff		sta $ff		    sta $ff
.0ce9	20 12 0d	jsr $0d12	    jsr print
.0cec					fl_done
.0cec	38		sec		                sec
.0ced	fb		xce		                xce
.0cee	60		rts		    rts
.0cef					GETNEXT:
.0cef	20 f6 0c	jsr $0cf6	    jsr INC_IP
.0cf2	20 09 0d	jsr $0d09	    jsr FETCH_IP
.0cf5	60		rts		    rts
.0cf6					INC_IP:
.0cf6	48		pha		                pha
.0cf7	a9 00		lda #$00	                lda #$00
.0cf9	48		pha		                pha                     ; push the value to the stack
.0cfa	ab		plb		                plb                     ; pull value from stack to data bank register
.0cfb	68		pla		                pla
.0cfc	c2 20		rep #$20	                REP #$20
.0cfe	a5 52		lda $52		    lda IP
.0d00	18		clc		    clc
.0d01	69 01 00	adc #$0001	    adc #$01
.0d04	85 52		sta $52		    sta IP      ; increment IP
.0d06	e2 20		sep #$20	                SEP #$20
.0d08	60		rts		    rts
.0d09					FETCH_IP:
.0d09	48		pha		                pha
.0d0a	a9 02		lda #$02	                lda #$02
.0d0c	48		pha		                pha                     ; push the value to the stack
.0d0d	ab		plb		                plb                     ; pull value from stack to data bank register
.0d0e	68		pla		                pla
.0d0f	b2 52		lda ($52)	    lda (IP)    ; get next value
.0d11	60		rts		    rts
.0d12					print:
.0d12	a0 00		ldy #$00	    ldy #$00
.0d14					nextch:
.0d14	b1 fe		lda ($fe),y	    lda ($fe),y
.0d16	f0 07		beq $0d1f	    beq +
.0d18	20 d2 ff	jsr $ffd2	    jsr $FFD2
.0d1b	c8		iny		    iny
.0d1c	4c 14 0d	jmp $0d14	    jmp nextch
.0d1f	60		rts		+   rts
.0d20					prhex
.0d20	48		pha		                pha
.0d21	a9 00		lda #$00	                lda #$00
.0d23	48		pha		                pha                     ; push the value to the stack
.0d24	ab		plb		                plb                     ; pull value from stack to data bank register
.0d25	68		pla		                pla
.0d26	da		phx		        phx                 ; save x
.0d27	20 33 0d	jsr $0d33	        jsr asctwo          ; get hex chars for byte in x (lower) and a (upper)
.0d2a	20 d2 ff	jsr $ffd2	        jsr $ffd2          ; output upper nybble
.0d2d	8a		txa		        txa                 ; transfer lower to a
.0d2e	fa		plx		        plx                 ; restore x
.0d2f	20 d2 ff	jsr $ffd2	        jsr $ffd2          ; output lower nybble
.0d32	60		rts		        rts
.0d33	48		pha		asctwo  pha                 ; save byte
.0d34	20 3d 0d	jsr $0d3d	        jsr ascii           ; do low nybble
.0d37	aa		tax		        tax                 ; save in x
.0d38	68		pla		        pla                 ; restore byte
.0d39	4a		lsr a		        lsr                 ; shift upper nybble down
.0d3a	4a		lsr a		        lsr
.0d3b	4a		lsr a		        lsr
.0d3c	4a		lsr a		        lsr
.0d3d	29 0f		and #$0f	ascii   and #$0f            ; clear upper nibble
.0d3f	c9 0a		cmp #$0a	        cmp #$0a            ; if less than a, skip next step
.0d41	90 02		bcc $0d45	        bcc asc1
.0d43	69 06		adc #$06	        adc #6              ; skip ascii chars between 9 and a
.0d45	69 30		adc #$30	asc1    adc #$30            ; add ascii char 0 to value
.0d47	60		rts		        rts
.0d48					msg1:
>0d48	93 0e d3 55 50 45 52 38		    .text $93,$0e,"Super8086 Emulator",$0d,$00
>0d50	30 38 36 20 c5 4d 55 4c 41 54 4f 52 0d 00
.0d5e					txt_ax:
>0d5e	0d 0d 41 58 3d 00		    .text $0d,$0d,"ax=",$00
.0d64					txt_bx:
>0d64	42 58 3d 00			    .text "bx=",$00
.0d68					txt_cx
>0d68	43 58 3d 00			    .text "cx=",$00
.0d6c					txt_dx
>0d6c	44 58 3d 00			    .text "dx=",$00
.0d70					txt_sp:
>0d70	0d 53 50 3d 00			    .text $0d,"sp=",$00
.0d75					txt_bp:
>0d75	42 50 3d 00			    .text "bp=",$00
.0d79					txt_si
>0d79	53 49 3d 00			    .text "si=",$00
.0d7d					txt_di
>0d7d	44 49 3d 00			    .text "di=",$00
.0d81					txt_ds:
>0d81	0d 44 53 3d 00			    .text $0d,"ds=",$00
.0d86					txt_es:
>0d86	45 53 3d 00			    .text "es=",$00
.0d8a					txt_ss
>0d8a	53 53 3d 00			    .text "ss=",$00
.0d8e					txt_cs
>0d8e	43 53 3d 00			    .text "cs=",$00
.0d92					txt_ip:
>0d92	0d 49 50 3d 00			    .text $0d,"ip=",$00
.0d97					txt_fr:
>0d97	46 4c 41 47 53 3d 00		    .text "flags=",$00
.0d9e					txt_fr_ov:
>0d9e	0d cf d6 20 00			    .text $0d,"OV ",$00
.0da3					txt_fr_nv:
>0da3	0d ce d6 20 00			    .text $0d,"NV ",$00
.0da8					txt_fr_up:
>0da8	d5 d0 20 00			    .text "UP ",$00
.0dac					txt_fr_dn:
>0dac	c4 ce 20 00			    .text "DN ",$00
.0db0					txt_fr_ei:
>0db0	c5 c9 20 00			    .text "EI ",$00
.0db4					txt_fr_di:
>0db4	c4 c9 20 00			    .text "DI ",$00
.0db8					txt_fr_ng:
>0db8	ce c7 20 00			    .text "NG ",$00
.0dbc					txt_fr_pl:
>0dbc	d0 cc 20 00			    .text "PL ",$00
.0dc0					txt_fr_zr:
>0dc0	da d2 20 00			    .text "ZR ",$00
.0dc4					txt_fr_nz:
>0dc4	ce da 20 00			    .text "NZ ",$00
.0dc8					txt_fr_ac:
>0dc8	c1 c3 20 00			    .text "AC ",$00
.0dcc					txt_fr_na:
>0dcc	ce c1 20 00			    .text "NA ",$00
.0dd0					txt_fr_pe:
>0dd0	d0 c5 20 00			    .text "PE ",$00
.0dd4					txt_fr_po:
>0dd4	d0 cf 20 00			    .text "PO ",$00
.0dd8					txt_fr_cy:
>0dd8	c3 d9 20 00			    .text "CY ",$00
.0ddc					txt_fr_nc:
>0ddc	ce c3 20 00			    .text "NC ",$00
.0de0					cflag:
.0de0	08		php		    php
.0de1	90 08		bcc $0deb	    bcc +
.0de3	a5 55		lda $55		    lda FRL
.0de5	09 01		ora #$01	    ora #$01
.0de7	85 55		sta $55		    sta FRL
.0de9	28		plp		    plp
.0dea	60		rts		    rts
.0deb	a5 55		lda $55		+   lda FRL
.0ded	29 fe		and #$fe	    and #$fe
.0def	85 55		sta $55		    sta FRL
.0df1	28		plp		    plp
.0df2	60		rts		    rts
.0df3					zflag:
.0df3	08		php		    php
.0df4	d0 08		bne $0dfe	    bne +
.0df6	a5 55		lda $55		    lda FRL
.0df8	09 40		ora #$40	    ora #$40
.0dfa	85 55		sta $55		    sta FRL
.0dfc	28		plp		    plp
.0dfd	60		rts		    rts
.0dfe	a5 55		lda $55		+   lda FRL
.0e00	29 bf		and #$bf	    and #$bf
.0e02	85 55		sta $55		    sta FRL
.0e04	28		plp		    plp
.0e05	60		rts		    rts
.0e06					sflag:
.0e06	08		php		    php
.0e07	c9 80		cmp #$80	    cmp #$80
.0e09	90 08		bcc $0e13	    bcc +
.0e0b	a5 55		lda $55		    lda FRL
.0e0d	29 7f		and #$7f	    and #$7f
.0e0f	85 55		sta $55		    sta FRL
.0e11	28		plp		    plp
.0e12	60		rts		    rts
.0e13	a5 55		lda $55		+   lda FRL
.0e15	09 80		ora #$80	    ora #$80
.0e17	85 55		sta $55		    sta FRL
.0e19	28		plp		    plp
.0e1a	60		rts		    rts
.0e1b					pflag:
.0e1b	08		php		    php
.0e1c					pflag_loop:
.0e1c	4a		lsr a		    lsr
.0e1d	f0 07		beq $0e26	    beq pflag_done
.0e1f	90 fb		bcc $0e1c	    bcc pflag_loop
.0e21	49 01		eor #$01	    eor #$01
.0e23	4c 1c 0e	jmp $0e1c	    jmp pflag_loop
.0e26					pflag_done:
.0e26	b0 08		bcs $0e30	    bcs +
.0e28	a5 55		lda $55		    lda FRL             ; get the 8086 register flag
.0e2a	09 04		ora #$04	    ora #$04            ; set bit 4
.0e2c	85 55		sta $55		    sta FRL             ; store it
.0e2e	28		plp		    plp
.0e2f	60		rts		    rts
.0e30	a5 55		lda $55		+   lda FRL             ; its an off number. get the 8086 register flag
.0e32	29 fb		and #$fb	    and #$fb            ; clear bit 4
.0e34	85 55		sta $55		    sta FRL             ; store it
.0e36	28		plp		    plp
.0e37	60		rts		    rts
.0e38					j00:
.0e38	20 ef 0c	jsr $0cef	    jsr GETNEXT
.0e3b	48		pha		                pha
.0e3c	a9 00		lda #$00	                lda #$00
.0e3e	48		pha		                pha                     ; push the value to the stack
.0e3f	ab		plb		                plb                     ; pull value from stack to data bank register
.0e40	68		pla		                pla
.0e41	c9 c0		cmp #$c0	    cmp #$c0            ; add al,al
.0e43	d0 0d		bne $0e52	    bne +
.0e45	a5 42		lda $42		    lda AL
.0e47	18		clc		    clc
.0e48	65 42		adc $42		    adc AL
.0e4a	85 42		sta $42		    sta AL
.0e4c	20 e0 0d	jsr $0de0	    jsr cflag
.0e4f	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0e52	c9 d8		cmp #$d8	+   cmp #$d8            ; add al, bl
.0e54	d0 16		bne $0e6c	    bne +
.0e56	a5 44		lda $44		    lda BL
.0e58	18		clc		    clc
.0e59	65 42		adc $42		    adc AL
.0e5b	85 42		sta $42		    sta AL
.0e5d	20 1b 0e	jsr $0e1b	    jsr pflag
.0e60	20 e0 0d	jsr $0de0	    jsr cflag
.0e63	20 06 0e	jsr $0e06	    jsr sflag
.0e66	20 f3 0d	jsr $0df3	    jsr zflag
.0e69	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0e6c	c9 c8		cmp #$c8	+   cmp #$c8
.0e6e	d0 0d		bne $0e7d	    bne +
.0e70	a5 46		lda $46		    lda CL
.0e72	18		clc		    clc
.0e73	65 42		adc $42		    adc AL
.0e75	85 42		sta $42		    sta AL
.0e77	20 e0 0d	jsr $0de0	    jsr cflag
.0e7a	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0e7d	c9 d0		cmp #$d0	+   cmp #$d0
.0e7f	d0 0d		bne $0e8e	    bne +
.0e81	a5 48		lda $48		    lda DL
.0e83	18		clc		    clc
.0e84	65 42		adc $42		    adc AL
.0e86	85 42		sta $42		    sta AL
.0e88	20 e0 0d	jsr $0de0	    jsr cflag
.0e8b	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0e8e	c9 c4		cmp #$c4	+   cmp #$c4
.0e90	d0 0d		bne $0e9f	    bne +
.0e92	a5 42		lda $42		    lda AL
.0e94	18		clc		    clc
.0e95	65 43		adc $43		    adc AH
.0e97	85 43		sta $43		    sta AH
.0e99	20 e0 0d	jsr $0de0	    jsr cflag
.0e9c	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0e9f	c9 dc		cmp #$dc	+   cmp #$dc
.0ea1	d0 0d		bne $0eb0	    bne +
.0ea3	a5 44		lda $44		    lda BL
.0ea5	18		clc		    clc
.0ea6	65 43		adc $43		    adc AH
.0ea8	85 43		sta $43		    sta AH
.0eaa	20 e0 0d	jsr $0de0	    jsr cflag
.0ead	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0eb0	c9 cc		cmp #$cc	+   cmp #$cc
.0eb2	d0 0d		bne $0ec1	    bne +
.0eb4	a5 46		lda $46		    lda CL
.0eb6	18		clc		    clc
.0eb7	65 43		adc $43		    adc AH
.0eb9	85 43		sta $43		    sta AH
.0ebb	20 e0 0d	jsr $0de0	    jsr cflag
.0ebe	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0ec1	c9 d4		cmp #$d4	+   cmp #$d4
.0ec3	d0 0a		bne $0ecf	    bne +
.0ec5	a5 48		lda $48		    lda DL
.0ec7	18		clc		    clc
.0ec8	65 43		adc $43		    adc AH
.0eca	85 43		sta $43		    sta AH
.0ecc	20 e0 0d	jsr $0de0	    jsr cflag
.0ecf	4c 8e 0a	jmp $0a8e	+   jmp MAINLOOP_END
.0ed2					j01:
.0ed2	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0ed5					j02:
.0ed5	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0ed8					j03:
.0ed8	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0edb					j04:
.0edb	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0ede					j05:
.0ede	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0ee1					j06:
.0ee1	48		pha		                pha
.0ee2	a9 00		lda #$00	                lda #$00
.0ee4	48		pha		                pha                     ; push the value to the stack
.0ee5	ab		plb		                plb                     ; pull value from stack to data bank register
.0ee6	68		pla		                pla
.0ee7	c2 20		rep #$20	                REP #$20
.0ee9	a5 56		lda $56		    lda SP
.0eeb	38		sec		    sec
.0eec	e9 02 00	sbc #$0002	    sbc #$02
.0eef	85 56		sta $56		    sta SP
.0ef1	a5 4e		lda $4e		    lda ES
.0ef3	48		pha		                pha
.0ef4	e2 20		sep #$20	                SEP #$20
.0ef6	a9 02		lda #$02	                lda #$02
.0ef8	48		pha		                pha                     ; push the value to the stack
.0ef9	ab		plb		                plb                     ; pull value from stack to data bank register
.0efa	c2 20		rep #$20	                REP #$20
.0efc	68		pla		                pla
.0efd	92 56		sta ($56)	    sta (SP)
.0eff	e2 20		sep #$20	                SEP #$20
.0f01	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0f04					j07:
.0f04	c2 20		rep #$20	                REP #$20
.0f06	48		pha		                pha
.0f07	e2 20		sep #$20	                SEP #$20
.0f09	a9 02		lda #$02	                lda #$02
.0f0b	48		pha		                pha                     ; push the value to the stack
.0f0c	ab		plb		                plb                     ; pull value from stack to data bank register
.0f0d	c2 20		rep #$20	                REP #$20
.0f0f	68		pla		                pla
.0f10	b2 56		lda ($56)	    lda (SP)
.0f12	48		pha		                pha
.0f13	e2 20		sep #$20	                SEP #$20
.0f15	a9 00		lda #$00	                lda #$00
.0f17	48		pha		                pha                     ; push the value to the stack
.0f18	ab		plb		                plb                     ; pull value from stack to data bank register
.0f19	c2 20		rep #$20	                REP #$20
.0f1b	68		pla		                pla
.0f1c	85 4e		sta $4e		    sta ES
.0f1e	a5 56		lda $56		    lda SP
.0f20	18		clc		    clc
.0f21	69 02 00	adc #$0002	    adc #$02
.0f24	85 56		sta $56		    sta SP
.0f26	e2 20		sep #$20	                SEP #$20
.0f28	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0f2b					j08:
.0f2b	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0f2e					j09:
.0f2e	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0f31					j0a:
.0f31	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0f34					j0b:
.0f34	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0f37					j0c:
.0f37	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0f3a					j0d:
.0f3a	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0f3d					j0e:
.0f3d	48		pha		                pha
.0f3e	a9 00		lda #$00	                lda #$00
.0f40	48		pha		                pha                     ; push the value to the stack
.0f41	ab		plb		                plb                     ; pull value from stack to data bank register
.0f42	68		pla		                pla
.0f43	c2 20		rep #$20	                REP #$20
.0f45	a5 56		lda $56		    lda SP
.0f47	38		sec		    sec
.0f48	e9 02 00	sbc #$0002	    sbc #$02
.0f4b	85 56		sta $56		    sta SP
.0f4d	a5 4a		lda $4a		    lda CS
.0f4f	48		pha		                pha
.0f50	e2 20		sep #$20	                SEP #$20
.0f52	a9 02		lda #$02	                lda #$02
.0f54	48		pha		                pha                     ; push the value to the stack
.0f55	ab		plb		                plb                     ; pull value from stack to data bank register
.0f56	c2 20		rep #$20	                REP #$20
.0f58	68		pla		                pla
.0f59	92 56		sta ($56)	    sta (SP)
.0f5b	e2 20		sep #$20	                SEP #$20
.0f5d	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0f60					j0f:
.0f60	c2 20		rep #$20	                REP #$20
.0f62	48		pha		                pha
.0f63	e2 20		sep #$20	                SEP #$20
.0f65	a9 02		lda #$02	                lda #$02
.0f67	48		pha		                pha                     ; push the value to the stack
.0f68	ab		plb		                plb                     ; pull value from stack to data bank register
.0f69	c2 20		rep #$20	                REP #$20
.0f6b	68		pla		                pla
.0f6c	b2 56		lda ($56)	    lda (SP)
.0f6e	48		pha		                pha
.0f6f	e2 20		sep #$20	                SEP #$20
.0f71	a9 00		lda #$00	                lda #$00
.0f73	48		pha		                pha                     ; push the value to the stack
.0f74	ab		plb		                plb                     ; pull value from stack to data bank register
.0f75	c2 20		rep #$20	                REP #$20
.0f77	68		pla		                pla
.0f78	85 4a		sta $4a		    sta CS
.0f7a	a5 56		lda $56		    lda SP
.0f7c	18		clc		    clc
.0f7d	69 02 00	adc #$0002	    adc #$02
.0f80	85 56		sta $56		    sta SP
.0f82	e2 20		sep #$20	                SEP #$20
.0f84	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0f87					j10:
.0f87	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0f8a					j11:
.0f8a	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0f8d					j12:
.0f8d	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0f90					j13:
.0f90	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0f93					j14:
.0f93	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0f96					j15:
.0f96	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0f99					j16:
.0f99	48		pha		                pha
.0f9a	a9 00		lda #$00	                lda #$00
.0f9c	48		pha		                pha                     ; push the value to the stack
.0f9d	ab		plb		                plb                     ; pull value from stack to data bank register
.0f9e	68		pla		                pla
.0f9f	c2 20		rep #$20	                REP #$20
.0fa1	a5 56		lda $56		    lda SP
.0fa3	38		sec		    sec
.0fa4	e9 02 00	sbc #$0002	    sbc #$02
.0fa7	85 56		sta $56		    sta SP
.0fa9	a5 50		lda $50		    lda SS
.0fab	48		pha		                pha
.0fac	e2 20		sep #$20	                SEP #$20
.0fae	a9 02		lda #$02	                lda #$02
.0fb0	48		pha		                pha                     ; push the value to the stack
.0fb1	ab		plb		                plb                     ; pull value from stack to data bank register
.0fb2	c2 20		rep #$20	                REP #$20
.0fb4	68		pla		                pla
.0fb5	92 56		sta ($56)	    sta (SP)
.0fb7	e2 20		sep #$20	                SEP #$20
.0fb9	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0fbc					j17:
.0fbc	c2 20		rep #$20	                REP #$20
.0fbe	48		pha		                pha
.0fbf	e2 20		sep #$20	                SEP #$20
.0fc1	a9 02		lda #$02	                lda #$02
.0fc3	48		pha		                pha                     ; push the value to the stack
.0fc4	ab		plb		                plb                     ; pull value from stack to data bank register
.0fc5	c2 20		rep #$20	                REP #$20
.0fc7	68		pla		                pla
.0fc8	b2 56		lda ($56)	    lda (SP)
.0fca	48		pha		                pha
.0fcb	e2 20		sep #$20	                SEP #$20
.0fcd	a9 00		lda #$00	                lda #$00
.0fcf	48		pha		                pha                     ; push the value to the stack
.0fd0	ab		plb		                plb                     ; pull value from stack to data bank register
.0fd1	c2 20		rep #$20	                REP #$20
.0fd3	68		pla		                pla
.0fd4	85 50		sta $50		    sta SS
.0fd6	a5 56		lda $56		    lda SP
.0fd8	18		clc		    clc
.0fd9	69 02 00	adc #$0002	    adc #$02
.0fdc	85 56		sta $56		    sta SP
.0fde	e2 20		sep #$20	                SEP #$20
.0fe0	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0fe3					j18:
.0fe3	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0fe6					j19:
.0fe6	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0fe9					j1a:
.0fe9	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0fec					j1b:
.0fec	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0fef					j1c:
.0fef	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0ff2					j1d:
.0ff2	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.0ff5					j1e:
.0ff5	48		pha		                pha
.0ff6	a9 00		lda #$00	                lda #$00
.0ff8	48		pha		                pha                     ; push the value to the stack
.0ff9	ab		plb		                plb                     ; pull value from stack to data bank register
.0ffa	68		pla		                pla
.0ffb	c2 20		rep #$20	                REP #$20
.0ffd	a5 56		lda $56		    lda SP
.0fff	38		sec		    sec
.1000	e9 02 00	sbc #$0002	    sbc #$02
.1003	85 56		sta $56		    sta SP
.1005	a5 4e		lda $4e		    lda ES
.1007	48		pha		                pha
.1008	e2 20		sep #$20	                SEP #$20
.100a	a9 02		lda #$02	                lda #$02
.100c	48		pha		                pha                     ; push the value to the stack
.100d	ab		plb		                plb                     ; pull value from stack to data bank register
.100e	c2 20		rep #$20	                REP #$20
.1010	68		pla		                pla
.1011	92 56		sta ($56)	    sta (SP)
.1013	e2 20		sep #$20	                SEP #$20
.1015	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1018					j1f:
.1018	c2 20		rep #$20	                REP #$20
.101a	48		pha		                pha
.101b	e2 20		sep #$20	                SEP #$20
.101d	a9 02		lda #$02	                lda #$02
.101f	48		pha		                pha                     ; push the value to the stack
.1020	ab		plb		                plb                     ; pull value from stack to data bank register
.1021	c2 20		rep #$20	                REP #$20
.1023	68		pla		                pla
.1024	b2 56		lda ($56)	    lda (SP)
.1026	48		pha		                pha
.1027	e2 20		sep #$20	                SEP #$20
.1029	a9 00		lda #$00	                lda #$00
.102b	48		pha		                pha                     ; push the value to the stack
.102c	ab		plb		                plb                     ; pull value from stack to data bank register
.102d	c2 20		rep #$20	                REP #$20
.102f	68		pla		                pla
.1030	85 4c		sta $4c		    sta DS
.1032	a5 56		lda $56		    lda SP
.1034	18		clc		    clc
.1035	69 02 00	adc #$0002	    adc #$02
.1038	85 56		sta $56		    sta SP
.103a	e2 20		sep #$20	                SEP #$20
.103c	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.103f					j20:
.103f	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1042					j21:
.1042	20 ef 0c	jsr $0cef	    jsr GETNEXT
.1045	48		pha		                pha
.1046	a9 00		lda #$00	                lda #$00
.1048	48		pha		                pha                     ; push the value to the stack
.1049	ab		plb		                plb                     ; pull value from stack to data bank register
.104a	68		pla		                pla
.104b	c9 c0		cmp #$c0	    cmp #$c0
.104d	f0 1f		beq $106e	    beq j21_ax_ax
.104f	c9 d8		cmp #$d8	    cmp #$d8
.1051	f0 28		beq $107b	    beq j21_ax_bx
.1053	c9 d8		cmp #$d8	    cmp #$d8
.1055	f0 31		beq $1088	    beq j21_ax_cx
.1057	c9 d8		cmp #$d8	    cmp #$d8
.1059	f0 3a		beq $1095	    beq j21_ax_dx
.105b	c9 d8		cmp #$d8	    cmp #$d8
.105d	f0 43		beq $10a2	    beq j21_bx_ax
.105f	c9 d8		cmp #$d8	    cmp #$d8
.1061	f0 4c		beq $10af	    beq j21_bx_bx
.1063	c9 d8		cmp #$d8	    cmp #$d8
.1065	f0 55		beq $10bc	    beq j21_bx_cx
.1067	c9 d8		cmp #$d8	    cmp #$d8
.1069	f0 5e		beq $10c9	    beq j21_bx_dx
.106b	4c d6 10	jmp $10d6	    jmp j21_cmp2
.106e					    j21_ax_ax:
.106e	c2 20		rep #$20	                REP #$20
.1070	a5 42		lda $42		        lda AX
.1072	25 42		and $42		        and AX
.1074	85 42		sta $42		        sta AX
.1076	e2 20		sep #$20	                SEP #$20
.1078	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.107b					    j21_ax_bx:
.107b	c2 20		rep #$20	                REP #$20
.107d	a5 44		lda $44		        lda BX
.107f	25 42		and $42		        and AX
.1081	85 42		sta $42		        sta AX
.1083	e2 20		sep #$20	                SEP #$20
.1085	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.1088					    j21_ax_cx:
.1088	c2 20		rep #$20	                REP #$20
.108a	a5 46		lda $46		        lda CX
.108c	25 42		and $42		        and AX
.108e	85 42		sta $42		        sta AX
.1090	e2 20		sep #$20	                SEP #$20
.1092	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.1095					    j21_ax_dx:
.1095	c2 20		rep #$20	                REP #$20
.1097	a5 48		lda $48		        lda DX
.1099	25 42		and $42		        and AX
.109b	85 42		sta $42		        sta AX
.109d	e2 20		sep #$20	                SEP #$20
.109f	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.10a2					    j21_bx_ax:
.10a2	c2 20		rep #$20	                REP #$20
.10a4	a5 42		lda $42		        lda AX
.10a6	25 44		and $44		        and BX
.10a8	85 44		sta $44		        sta BX
.10aa	e2 20		sep #$20	                SEP #$20
.10ac	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.10af					    j21_bx_bx:
.10af	c2 20		rep #$20	                REP #$20
.10b1	a5 44		lda $44		        lda BX
.10b3	25 44		and $44		        and BX
.10b5	85 44		sta $44		        sta BX
.10b7	e2 20		sep #$20	                SEP #$20
.10b9	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.10bc					    j21_bx_cx:
.10bc	c2 20		rep #$20	                REP #$20
.10be	a5 46		lda $46		        lda CX
.10c0	25 44		and $44		        and BX
.10c2	85 44		sta $44		        sta BX
.10c4	e2 20		sep #$20	                SEP #$20
.10c6	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.10c9					    j21_bx_dx:
.10c9	c2 20		rep #$20	                REP #$20
.10cb	a5 48		lda $48		        lda DX
.10cd	25 44		and $44		        and BX
.10cf	85 44		sta $44		        sta BX
.10d1	e2 20		sep #$20	                SEP #$20
.10d3	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.10d6					    j21_cmp2:
.10d6	c9 d8		cmp #$d8	        cmp #$d8
.10d8	f0 1f		beq $10f9	        beq j21_cx_ax
.10da	c9 d8		cmp #$d8	        cmp #$d8
.10dc	f0 28		beq $1106	        beq j21_cx_bx
.10de	c9 d8		cmp #$d8	        cmp #$d8
.10e0	f0 31		beq $1113	        beq j21_cx_cx
.10e2	c9 d8		cmp #$d8	        cmp #$d8
.10e4	f0 3a		beq $1120	        beq j21_cx_dx
.10e6	c9 d8		cmp #$d8	        cmp #$d8
.10e8	f0 43		beq $112d	        beq j21_dx_ax
.10ea	c9 d8		cmp #$d8	        cmp #$d8
.10ec	f0 4c		beq $113a	        beq j21_dx_bx
.10ee	c9 d8		cmp #$d8	        cmp #$d8
.10f0	f0 55		beq $1147	        beq j21_dx_cx
.10f2	c9 d8		cmp #$d8	        cmp #$d8
.10f4	f0 5e		beq $1154	        beq j21_dx_dx
.10f6	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.10f9					    j21_cx_ax:
.10f9	c2 20		rep #$20	                REP #$20
.10fb	a5 42		lda $42		        lda AX
.10fd	25 46		and $46		        and CX
.10ff	85 46		sta $46		        sta CX
.1101	e2 20		sep #$20	                SEP #$20
.1103	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.1106					    j21_cx_bx:
.1106	c2 20		rep #$20	                REP #$20
.1108	a5 44		lda $44		        lda BX
.110a	25 46		and $46		        and CX
.110c	85 46		sta $46		        sta CX
.110e	e2 20		sep #$20	                SEP #$20
.1110	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.1113					    j21_cx_cx:
.1113	c2 20		rep #$20	                REP #$20
.1115	a5 46		lda $46		        lda CX
.1117	25 46		and $46		        and CX
.1119	85 46		sta $46		        sta CX
.111b	e2 20		sep #$20	                SEP #$20
.111d	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.1120					    j21_cx_dx:
.1120	c2 20		rep #$20	                REP #$20
.1122	a5 48		lda $48		        lda DX
.1124	25 46		and $46		        and CX
.1126	85 46		sta $46		        sta CX
.1128	e2 20		sep #$20	                SEP #$20
.112a	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.112d					    j21_dx_ax:
.112d	c2 20		rep #$20	                REP #$20
.112f	a5 42		lda $42		        lda AX
.1131	25 48		and $48		        and DX
.1133	85 48		sta $48		        sta DX
.1135	e2 20		sep #$20	                SEP #$20
.1137	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.113a					    j21_dx_bx:
.113a	c2 20		rep #$20	                REP #$20
.113c	a5 44		lda $44		        lda BX
.113e	25 48		and $48		        and DX
.1140	85 48		sta $48		        sta DX
.1142	e2 20		sep #$20	                SEP #$20
.1144	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.1147					    j21_dx_cx:
.1147	c2 20		rep #$20	                REP #$20
.1149	a5 46		lda $46		        lda CX
.114b	25 48		and $48		        and DX
.114d	85 48		sta $48		        sta DX
.114f	e2 20		sep #$20	                SEP #$20
.1151	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.1154					    j21_dx_dx:
.1154	c2 20		rep #$20	                REP #$20
.1156	a5 48		lda $48		        lda DX
.1158	25 48		and $48		        and DX
.115a	85 48		sta $48		        sta DX
.115c	e2 20		sep #$20	                SEP #$20
.115e	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.1161					j22:
.1161	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1164					j23:
.1164	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1167					j24:
.1167	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.116a					j25:
.116a	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.116d					j26:
.116d	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1170					j27:
.1170	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1173					j28:
.1173	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1176					j29:
.1176	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1179					j2a:
.1179	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.117c					j2b:
.117c	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.117f					j2c:
.117f	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1182					j2d:
.1182	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1185					j2e:
.1185	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1188					j2f:
.1188	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.118b					j30:
.118b	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.118e					j31:
.118e	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1191					j32:
.1191	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1194					j33:
.1194	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1197					j34:
.1197	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.119a					j35:
.119a	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.119d					j36:
.119d	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.11a0					j37:
.11a0	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.11a3					j38:
.11a3	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.11a6					j39:
.11a6	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.11a9					j3a:
.11a9	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.11ac					j3b:
.11ac	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.11af					j3c:
.11af	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.11b2					j3d:
.11b2	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.11b5					j3e:
.11b5	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.11b8					j3f:
.11b8	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.11bb					j40:
.11bb	48		pha		                pha
.11bc	a9 00		lda #$00	                lda #$00
.11be	48		pha		                pha                     ; push the value to the stack
.11bf	ab		plb		                plb                     ; pull value from stack to data bank register
.11c0	68		pla		                pla
.11c1	c2 20		rep #$20	                REP #$20
.11c3	e6 42		inc $42		    inc AX
.11c5	e2 20		sep #$20	                SEP #$20
.11c7	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.11ca					j41:
.11ca	48		pha		                pha
.11cb	a9 00		lda #$00	                lda #$00
.11cd	48		pha		                pha                     ; push the value to the stack
.11ce	ab		plb		                plb                     ; pull value from stack to data bank register
.11cf	68		pla		                pla
.11d0	c2 20		rep #$20	                REP #$20
.11d2	e6 46		inc $46		    inc CX
.11d4	e2 20		sep #$20	                SEP #$20
.11d6	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.11d9					j42:
.11d9	48		pha		                pha
.11da	a9 00		lda #$00	                lda #$00
.11dc	48		pha		                pha                     ; push the value to the stack
.11dd	ab		plb		                plb                     ; pull value from stack to data bank register
.11de	68		pla		                pla
.11df	c2 20		rep #$20	                REP #$20
.11e1	e6 48		inc $48		    inc DX
.11e3	e2 20		sep #$20	                SEP #$20
.11e5	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.11e8					j43:
.11e8	48		pha		                pha
.11e9	a9 00		lda #$00	                lda #$00
.11eb	48		pha		                pha                     ; push the value to the stack
.11ec	ab		plb		                plb                     ; pull value from stack to data bank register
.11ed	68		pla		                pla
.11ee	c2 20		rep #$20	                REP #$20
.11f0	e6 44		inc $44		    inc BX
.11f2	e2 20		sep #$20	                SEP #$20
.11f4	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.11f7					j44:
.11f7	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.11fa					j45:
.11fa	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.11fd					j46:
.11fd	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1200					j47:
.1200	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1203					j48:
.1203	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1206					j49:
.1206	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1209					j4a:
.1209	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.120c					j4b:
.120c	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.120f					j4c:
.120f	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1212					j4d:
.1212	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1215					j4e:
.1215	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1218					j4f:
.1218	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.121b					j50:
.121b	48		pha		                pha
.121c	a9 00		lda #$00	                lda #$00
.121e	48		pha		                pha                     ; push the value to the stack
.121f	ab		plb		                plb                     ; pull value from stack to data bank register
.1220	68		pla		                pla
.1221	c2 20		rep #$20	                REP #$20
.1223	a5 56		lda $56		    lda SP
.1225	38		sec		    sec
.1226	e9 02 00	sbc #$0002	    sbc #$02
.1229	85 56		sta $56		    sta SP
.122b	a5 42		lda $42		    lda AX
.122d	48		pha		                pha
.122e	e2 20		sep #$20	                SEP #$20
.1230	a9 02		lda #$02	                lda #$02
.1232	48		pha		                pha                     ; push the value to the stack
.1233	ab		plb		                plb                     ; pull value from stack to data bank register
.1234	c2 20		rep #$20	                REP #$20
.1236	68		pla		                pla
.1237	92 56		sta ($56)	    sta (SP)
.1239	e2 20		sep #$20	                SEP #$20
.123b	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.123e					j51:
.123e	48		pha		                pha
.123f	a9 00		lda #$00	                lda #$00
.1241	48		pha		                pha                     ; push the value to the stack
.1242	ab		plb		                plb                     ; pull value from stack to data bank register
.1243	68		pla		                pla
.1244	c2 20		rep #$20	                REP #$20
.1246	a5 56		lda $56		    lda SP
.1248	38		sec		    sec
.1249	e9 02 00	sbc #$0002	    sbc #$02
.124c	85 56		sta $56		    sta SP
.124e	a5 46		lda $46		    lda CX
.1250	48		pha		                pha
.1251	e2 20		sep #$20	                SEP #$20
.1253	a9 02		lda #$02	                lda #$02
.1255	48		pha		                pha                     ; push the value to the stack
.1256	ab		plb		                plb                     ; pull value from stack to data bank register
.1257	c2 20		rep #$20	                REP #$20
.1259	68		pla		                pla
.125a	92 56		sta ($56)	    sta (SP)
.125c	e2 20		sep #$20	                SEP #$20
.125e	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1261					j52:
.1261	48		pha		                pha
.1262	a9 00		lda #$00	                lda #$00
.1264	48		pha		                pha                     ; push the value to the stack
.1265	ab		plb		                plb                     ; pull value from stack to data bank register
.1266	68		pla		                pla
.1267	c2 20		rep #$20	                REP #$20
.1269	a5 56		lda $56		    lda SP
.126b	38		sec		    sec
.126c	e9 02 00	sbc #$0002	    sbc #$02
.126f	85 56		sta $56		    sta SP
.1271	a5 48		lda $48		    lda DX
.1273	48		pha		                pha
.1274	e2 20		sep #$20	                SEP #$20
.1276	a9 02		lda #$02	                lda #$02
.1278	48		pha		                pha                     ; push the value to the stack
.1279	ab		plb		                plb                     ; pull value from stack to data bank register
.127a	c2 20		rep #$20	                REP #$20
.127c	68		pla		                pla
.127d	92 56		sta ($56)	    sta (SP)
.127f	e2 20		sep #$20	                SEP #$20
.1281	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1284					j53:
.1284	48		pha		                pha
.1285	a9 00		lda #$00	                lda #$00
.1287	48		pha		                pha                     ; push the value to the stack
.1288	ab		plb		                plb                     ; pull value from stack to data bank register
.1289	68		pla		                pla
.128a	c2 20		rep #$20	                REP #$20
.128c	a5 56		lda $56		    lda SP
.128e	38		sec		    sec
.128f	e9 02 00	sbc #$0002	    sbc #$02
.1292	85 56		sta $56		    sta SP
.1294	a5 44		lda $44		    lda BX
.1296	48		pha		                pha
.1297	e2 20		sep #$20	                SEP #$20
.1299	a9 02		lda #$02	                lda #$02
.129b	48		pha		                pha                     ; push the value to the stack
.129c	ab		plb		                plb                     ; pull value from stack to data bank register
.129d	c2 20		rep #$20	                REP #$20
.129f	68		pla		                pla
.12a0	92 56		sta ($56)	    sta (SP)
.12a2	e2 20		sep #$20	                SEP #$20
.12a4	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.12a7					j54:
.12a7	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.12aa					j55:
.12aa	48		pha		                pha
.12ab	a9 00		lda #$00	                lda #$00
.12ad	48		pha		                pha                     ; push the value to the stack
.12ae	ab		plb		                plb                     ; pull value from stack to data bank register
.12af	68		pla		                pla
.12b0	c2 20		rep #$20	                REP #$20
.12b2	a5 56		lda $56		    lda SP
.12b4	38		sec		    sec
.12b5	e9 02 00	sbc #$0002	    sbc #$02
.12b8	85 56		sta $56		    sta SP
.12ba	a5 58		lda $58		    lda BP
.12bc	48		pha		                pha
.12bd	e2 20		sep #$20	                SEP #$20
.12bf	a9 02		lda #$02	                lda #$02
.12c1	48		pha		                pha                     ; push the value to the stack
.12c2	ab		plb		                plb                     ; pull value from stack to data bank register
.12c3	c2 20		rep #$20	                REP #$20
.12c5	68		pla		                pla
.12c6	92 56		sta ($56)	    sta (SP)
.12c8	e2 20		sep #$20	                SEP #$20
.12ca	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.12cd					j56:
.12cd	48		pha		                pha
.12ce	a9 00		lda #$00	                lda #$00
.12d0	48		pha		                pha                     ; push the value to the stack
.12d1	ab		plb		                plb                     ; pull value from stack to data bank register
.12d2	68		pla		                pla
.12d3	c2 20		rep #$20	                REP #$20
.12d5	a5 56		lda $56		    lda SP
.12d7	38		sec		    sec
.12d8	e9 02 00	sbc #$0002	    sbc #$02
.12db	85 56		sta $56		    sta SP
.12dd	a5 5a		lda $5a		    lda SI
.12df	48		pha		                pha
.12e0	e2 20		sep #$20	                SEP #$20
.12e2	a9 02		lda #$02	                lda #$02
.12e4	48		pha		                pha                     ; push the value to the stack
.12e5	ab		plb		                plb                     ; pull value from stack to data bank register
.12e6	c2 20		rep #$20	                REP #$20
.12e8	68		pla		                pla
.12e9	92 56		sta ($56)	    sta (SP)
.12eb	e2 20		sep #$20	                SEP #$20
.12ed	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.12f0					j57:
.12f0	48		pha		                pha
.12f1	a9 00		lda #$00	                lda #$00
.12f3	48		pha		                pha                     ; push the value to the stack
.12f4	ab		plb		                plb                     ; pull value from stack to data bank register
.12f5	68		pla		                pla
.12f6	c2 20		rep #$20	                REP #$20
.12f8	a5 56		lda $56		    lda SP
.12fa	38		sec		    sec
.12fb	e9 02 00	sbc #$0002	    sbc #$02
.12fe	85 56		sta $56		    sta SP
.1300	a5 5c		lda $5c		    lda DI
.1302	48		pha		                pha
.1303	e2 20		sep #$20	                SEP #$20
.1305	a9 02		lda #$02	                lda #$02
.1307	48		pha		                pha                     ; push the value to the stack
.1308	ab		plb		                plb                     ; pull value from stack to data bank register
.1309	c2 20		rep #$20	                REP #$20
.130b	68		pla		                pla
.130c	92 56		sta ($56)	    sta (SP)
.130e	e2 20		sep #$20	                SEP #$20
.1310	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1313					j58:
.1313	c2 20		rep #$20	                REP #$20
.1315	48		pha		                pha
.1316	e2 20		sep #$20	                SEP #$20
.1318	a9 02		lda #$02	                lda #$02
.131a	48		pha		                pha                     ; push the value to the stack
.131b	ab		plb		                plb                     ; pull value from stack to data bank register
.131c	c2 20		rep #$20	                REP #$20
.131e	68		pla		                pla
.131f	b2 56		lda ($56)	    lda (SP)
.1321	48		pha		                pha
.1322	e2 20		sep #$20	                SEP #$20
.1324	a9 00		lda #$00	                lda #$00
.1326	48		pha		                pha                     ; push the value to the stack
.1327	ab		plb		                plb                     ; pull value from stack to data bank register
.1328	c2 20		rep #$20	                REP #$20
.132a	68		pla		                pla
.132b	85 42		sta $42		    sta AX
.132d	a5 56		lda $56		    lda SP
.132f	18		clc		    clc
.1330	69 02 00	adc #$0002	    adc #$02
.1333	85 56		sta $56		    sta SP
.1335	e2 20		sep #$20	                SEP #$20
.1337	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.133a					j59:
.133a	c2 20		rep #$20	                REP #$20
.133c	48		pha		                pha
.133d	e2 20		sep #$20	                SEP #$20
.133f	a9 02		lda #$02	                lda #$02
.1341	48		pha		                pha                     ; push the value to the stack
.1342	ab		plb		                plb                     ; pull value from stack to data bank register
.1343	c2 20		rep #$20	                REP #$20
.1345	68		pla		                pla
.1346	b2 56		lda ($56)	    lda (SP)
.1348	48		pha		                pha
.1349	e2 20		sep #$20	                SEP #$20
.134b	a9 00		lda #$00	                lda #$00
.134d	48		pha		                pha                     ; push the value to the stack
.134e	ab		plb		                plb                     ; pull value from stack to data bank register
.134f	c2 20		rep #$20	                REP #$20
.1351	68		pla		                pla
.1352	85 46		sta $46		    sta CX
.1354	a5 56		lda $56		    lda SP
.1356	18		clc		    clc
.1357	69 02 00	adc #$0002	    adc #$02
.135a	85 56		sta $56		    sta SP
.135c	e2 20		sep #$20	                SEP #$20
.135e	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1361					j5a:
.1361	c2 20		rep #$20	                REP #$20
.1363	48		pha		                pha
.1364	e2 20		sep #$20	                SEP #$20
.1366	a9 02		lda #$02	                lda #$02
.1368	48		pha		                pha                     ; push the value to the stack
.1369	ab		plb		                plb                     ; pull value from stack to data bank register
.136a	c2 20		rep #$20	                REP #$20
.136c	68		pla		                pla
.136d	b2 56		lda ($56)	    lda (SP)
.136f	48		pha		                pha
.1370	e2 20		sep #$20	                SEP #$20
.1372	a9 00		lda #$00	                lda #$00
.1374	48		pha		                pha                     ; push the value to the stack
.1375	ab		plb		                plb                     ; pull value from stack to data bank register
.1376	c2 20		rep #$20	                REP #$20
.1378	68		pla		                pla
.1379	85 48		sta $48		    sta DX
.137b	a5 56		lda $56		    lda SP
.137d	18		clc		    clc
.137e	69 02 00	adc #$0002	    adc #$02
.1381	85 56		sta $56		    sta SP
.1383	e2 20		sep #$20	                SEP #$20
.1385	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1388					j5b:
.1388	c2 20		rep #$20	                REP #$20
.138a	48		pha		                pha
.138b	e2 20		sep #$20	                SEP #$20
.138d	a9 02		lda #$02	                lda #$02
.138f	48		pha		                pha                     ; push the value to the stack
.1390	ab		plb		                plb                     ; pull value from stack to data bank register
.1391	c2 20		rep #$20	                REP #$20
.1393	68		pla		                pla
.1394	b2 56		lda ($56)	    lda (SP)
.1396	48		pha		                pha
.1397	e2 20		sep #$20	                SEP #$20
.1399	a9 00		lda #$00	                lda #$00
.139b	48		pha		                pha                     ; push the value to the stack
.139c	ab		plb		                plb                     ; pull value from stack to data bank register
.139d	c2 20		rep #$20	                REP #$20
.139f	68		pla		                pla
.13a0	85 44		sta $44		    sta BX
.13a2	a5 56		lda $56		    lda SP
.13a4	18		clc		    clc
.13a5	69 02 00	adc #$0002	    adc #$02
.13a8	85 56		sta $56		    sta SP
.13aa	e2 20		sep #$20	                SEP #$20
.13ac	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.13af					j5c:
.13af	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.13b2					j5d:
.13b2	c2 20		rep #$20	                REP #$20
.13b4	48		pha		                pha
.13b5	e2 20		sep #$20	                SEP #$20
.13b7	a9 02		lda #$02	                lda #$02
.13b9	48		pha		                pha                     ; push the value to the stack
.13ba	ab		plb		                plb                     ; pull value from stack to data bank register
.13bb	c2 20		rep #$20	                REP #$20
.13bd	68		pla		                pla
.13be	b2 56		lda ($56)	    lda (SP)
.13c0	48		pha		                pha
.13c1	e2 20		sep #$20	                SEP #$20
.13c3	a9 00		lda #$00	                lda #$00
.13c5	48		pha		                pha                     ; push the value to the stack
.13c6	ab		plb		                plb                     ; pull value from stack to data bank register
.13c7	c2 20		rep #$20	                REP #$20
.13c9	68		pla		                pla
.13ca	85 58		sta $58		    sta BP
.13cc	a5 56		lda $56		    lda SP
.13ce	18		clc		    clc
.13cf	69 02 00	adc #$0002	    adc #$02
.13d2	85 56		sta $56		    sta SP
.13d4	e2 20		sep #$20	                SEP #$20
.13d6	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.13d9					j5e:
.13d9	c2 20		rep #$20	                REP #$20
.13db	48		pha		                pha
.13dc	e2 20		sep #$20	                SEP #$20
.13de	a9 02		lda #$02	                lda #$02
.13e0	48		pha		                pha                     ; push the value to the stack
.13e1	ab		plb		                plb                     ; pull value from stack to data bank register
.13e2	c2 20		rep #$20	                REP #$20
.13e4	68		pla		                pla
.13e5	b2 56		lda ($56)	    lda (SP)
.13e7	48		pha		                pha
.13e8	e2 20		sep #$20	                SEP #$20
.13ea	a9 00		lda #$00	                lda #$00
.13ec	48		pha		                pha                     ; push the value to the stack
.13ed	ab		plb		                plb                     ; pull value from stack to data bank register
.13ee	c2 20		rep #$20	                REP #$20
.13f0	68		pla		                pla
.13f1	85 5a		sta $5a		    sta SI
.13f3	a5 56		lda $56		    lda SP
.13f5	18		clc		    clc
.13f6	69 02 00	adc #$0002	    adc #$02
.13f9	85 56		sta $56		    sta SP
.13fb	e2 20		sep #$20	                SEP #$20
.13fd	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1400					j5f:
.1400	c2 20		rep #$20	                REP #$20
.1402	48		pha		                pha
.1403	e2 20		sep #$20	                SEP #$20
.1405	a9 02		lda #$02	                lda #$02
.1407	48		pha		                pha                     ; push the value to the stack
.1408	ab		plb		                plb                     ; pull value from stack to data bank register
.1409	c2 20		rep #$20	                REP #$20
.140b	68		pla		                pla
.140c	b2 56		lda ($56)	    lda (SP)
.140e	48		pha		                pha
.140f	e2 20		sep #$20	                SEP #$20
.1411	a9 00		lda #$00	                lda #$00
.1413	48		pha		                pha                     ; push the value to the stack
.1414	ab		plb		                plb                     ; pull value from stack to data bank register
.1415	c2 20		rep #$20	                REP #$20
.1417	68		pla		                pla
.1418	85 5c		sta $5c		    sta DI
.141a	a5 56		lda $56		    lda SP
.141c	18		clc		    clc
.141d	69 02 00	adc #$0002	    adc #$02
.1420	85 56		sta $56		    sta SP
.1422	e2 20		sep #$20	                SEP #$20
.1424	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1427					j60:
.1427	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.142a					j61:
.142a	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.142d					j62:
.142d	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1430					j63:
.1430	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1433					j64:
.1433	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1436					j65:
.1436	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1439					j66:
.1439	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.143c					j67:
.143c	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.143f					j68:
.143f	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1442					j69:
.1442	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1445					j6a:
.1445	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1448					j6b:
.1448	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.144b					j6c:
.144b	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.144e					j6d:
.144e	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1451					j6e:
.1451	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1454					j6f:
.1454	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1457					j70:
.1457	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.145a					j71:
.145a	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.145d					j72:
.145d	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1460					j73:
.1460	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1463					j74:
.1463	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1466					j75:
.1466	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1469					j76:
.1469	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.146c					j77:
.146c	20 ef 0c	jsr $0cef	    jsr GETNEXT
.146f	c9 80		cmp #$80	    cmp #$80
.1471	b0 10		bcs $1483	    bcs j77_back
.1473					    j77_forward:
.1473	85 5e		sta $5e		        sta TMP1
.1475	c2 20		rep #$20	                REP #$20
.1477	a5 52		lda $52		        lda IP
.1479	18		clc		        clc
.147a	65 5e		adc $5e		        adc TMP1
.147c	85 52		sta $52		        sta IP
.147e	e2 20		sep #$20	                SEP #$20
.1480	4c 73 0a	jmp $0a73	        jmp MAINLOOP
.1483					    j77_back:
.1483	49 ff		eor #$ff	        eor #$ff
.1485	85 5e		sta $5e		        sta TMP1
.1487	c2 20		rep #$20	                REP #$20
.1489	a5 52		lda $52		        lda IP
.148b	38		sec		        sec
.148c	e5 5e		sbc $5e		        sbc TMP1
.148e	85 52		sta $52		        sta IP
.1490	e2 20		sep #$20	                SEP #$20
.1492	4c 73 0a	jmp $0a73	        jmp MAINLOOP
.1495	48		pha		                pha
.1496	a9 00		lda #$00	                lda #$00
.1498	48		pha		                pha                     ; push the value to the stack
.1499	ab		plb		                plb                     ; pull value from stack to data bank register
.149a	68		pla		                pla
.149b					    a
.149b	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.149e					j78:
.149e	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.14a1					j79:
.14a1	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.14a4					j7a:
.14a4	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.14a7					j7b:
.14a7	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.14aa					j7c:
.14aa	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.14ad					j7d:
.14ad	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.14b0					j7e:
.14b0	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.14b3					j7f:
.14b3	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.14b6					j80:
.14b6	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.14b9					j81:
.14b9	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.14bc					j82:
.14bc	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.14bf					j83:
.14bf	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.14c2					j84:
.14c2	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.14c5					j85:
.14c5	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.14c8					j86:
.14c8	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.14cb					j87:
.14cb	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.14ce					j88:
.14ce	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.14d1					j89:
.14d1	20 ef 0c	jsr $0cef	    jsr GETNEXT
.14d4	c9 c0		cmp #$c0	    cmp #$c0
.14d6	d0 11		bne $14e9	    bne +
.14d8	48		pha		                pha
.14d9	a9 00		lda #$00	                lda #$00
.14db	48		pha		                pha                     ; push the value to the stack
.14dc	ab		plb		                plb                     ; pull value from stack to data bank register
.14dd	68		pla		                pla
.14de	c2 20		rep #$20	                REP #$20
.14e0	a5 42		lda $42		        lda AX
.14e2	85 42		sta $42		        sta AX
.14e4	e2 20		sep #$20	                SEP #$20
.14e6	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.14e9	c9 d8		cmp #$d8	+   cmp #$d8
.14eb	d0 11		bne $14fe	    bne +
.14ed	48		pha		                pha
.14ee	a9 00		lda #$00	                lda #$00
.14f0	48		pha		                pha                     ; push the value to the stack
.14f1	ab		plb		                plb                     ; pull value from stack to data bank register
.14f2	68		pla		                pla
.14f3	c2 20		rep #$20	                REP #$20
.14f5	a5 44		lda $44		        lda BX
.14f7	85 42		sta $42		        sta AX
.14f9	e2 20		sep #$20	                SEP #$20
.14fb	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.14fe	c9 c8		cmp #$c8	+   cmp #$c8
.1500	d0 11		bne $1513	    bne +
.1502	48		pha		                pha
.1503	a9 00		lda #$00	                lda #$00
.1505	48		pha		                pha                     ; push the value to the stack
.1506	ab		plb		                plb                     ; pull value from stack to data bank register
.1507	68		pla		                pla
.1508	c2 20		rep #$20	                REP #$20
.150a	a5 46		lda $46		        lda CX
.150c	85 42		sta $42		        sta AX
.150e	e2 20		sep #$20	                SEP #$20
.1510	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.1513	c9 d0		cmp #$d0	+   cmp #$d0
.1515	d0 11		bne $1528	    bne +
.1517	48		pha		                pha
.1518	a9 00		lda #$00	                lda #$00
.151a	48		pha		                pha                     ; push the value to the stack
.151b	ab		plb		                plb                     ; pull value from stack to data bank register
.151c	68		pla		                pla
.151d	c2 20		rep #$20	                REP #$20
.151f	a5 48		lda $48		        lda DX
.1521	85 42		sta $42		        sta AX
.1523	e2 20		sep #$20	                SEP #$20
.1525	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.1528	c9 c3		cmp #$c3	+   cmp #$c3
.152a	d0 11		bne $153d	    bne +
.152c	48		pha		                pha
.152d	a9 00		lda #$00	                lda #$00
.152f	48		pha		                pha                     ; push the value to the stack
.1530	ab		plb		                plb                     ; pull value from stack to data bank register
.1531	68		pla		                pla
.1532	c2 20		rep #$20	                REP #$20
.1534	a5 42		lda $42		        lda AX
.1536	85 44		sta $44		        sta BX
.1538	e2 20		sep #$20	                SEP #$20
.153a	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.153d	c9 db		cmp #$db	+   cmp #$db
.153f	d0 11		bne $1552	    bne +
.1541	48		pha		                pha
.1542	a9 00		lda #$00	                lda #$00
.1544	48		pha		                pha                     ; push the value to the stack
.1545	ab		plb		                plb                     ; pull value from stack to data bank register
.1546	68		pla		                pla
.1547	c2 20		rep #$20	                REP #$20
.1549	a5 44		lda $44		        lda BX
.154b	85 44		sta $44		        sta BX
.154d	e2 20		sep #$20	                SEP #$20
.154f	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.1552	c9 cb		cmp #$cb	+   cmp #$cb
.1554	d0 11		bne $1567	    bne +
.1556	48		pha		                pha
.1557	a9 00		lda #$00	                lda #$00
.1559	48		pha		                pha                     ; push the value to the stack
.155a	ab		plb		                plb                     ; pull value from stack to data bank register
.155b	68		pla		                pla
.155c	c2 20		rep #$20	                REP #$20
.155e	a5 46		lda $46		        lda CX
.1560	85 44		sta $44		        sta BX
.1562	e2 20		sep #$20	                SEP #$20
.1564	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.1567	c9 d3		cmp #$d3	+   cmp #$d3
.1569	d0 11		bne $157c	    bne +
.156b	48		pha		                pha
.156c	a9 00		lda #$00	                lda #$00
.156e	48		pha		                pha                     ; push the value to the stack
.156f	ab		plb		                plb                     ; pull value from stack to data bank register
.1570	68		pla		                pla
.1571	c2 20		rep #$20	                REP #$20
.1573	a5 48		lda $48		        lda DX
.1575	85 44		sta $44		        sta BX
.1577	e2 20		sep #$20	                SEP #$20
.1579	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.157c	c9 c1		cmp #$c1	+   cmp #$c1
.157e	d0 11		bne $1591	    bne +
.1580	48		pha		                pha
.1581	a9 00		lda #$00	                lda #$00
.1583	48		pha		                pha                     ; push the value to the stack
.1584	ab		plb		                plb                     ; pull value from stack to data bank register
.1585	68		pla		                pla
.1586	c2 20		rep #$20	                REP #$20
.1588	a5 42		lda $42		        lda AX
.158a	85 46		sta $46		        sta CX
.158c	e2 20		sep #$20	                SEP #$20
.158e	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.1591	c9 d9		cmp #$d9	+   cmp #$d9
.1593	d0 11		bne $15a6	    bne +
.1595	48		pha		                pha
.1596	a9 00		lda #$00	                lda #$00
.1598	48		pha		                pha                     ; push the value to the stack
.1599	ab		plb		                plb                     ; pull value from stack to data bank register
.159a	68		pla		                pla
.159b	c2 20		rep #$20	                REP #$20
.159d	a5 44		lda $44		        lda BX
.159f	85 46		sta $46		        sta CX
.15a1	e2 20		sep #$20	                SEP #$20
.15a3	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.15a6	c9 c9		cmp #$c9	+   cmp #$c9
.15a8	d0 11		bne $15bb	    bne +
.15aa	48		pha		                pha
.15ab	a9 00		lda #$00	                lda #$00
.15ad	48		pha		                pha                     ; push the value to the stack
.15ae	ab		plb		                plb                     ; pull value from stack to data bank register
.15af	68		pla		                pla
.15b0	c2 20		rep #$20	                REP #$20
.15b2	a5 46		lda $46		        lda CX
.15b4	85 46		sta $46		        sta CX
.15b6	e2 20		sep #$20	                SEP #$20
.15b8	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.15bb	c9 d1		cmp #$d1	+   cmp #$d1
.15bd	d0 11		bne $15d0	    bne +
.15bf	48		pha		                pha
.15c0	a9 00		lda #$00	                lda #$00
.15c2	48		pha		                pha                     ; push the value to the stack
.15c3	ab		plb		                plb                     ; pull value from stack to data bank register
.15c4	68		pla		                pla
.15c5	c2 20		rep #$20	                REP #$20
.15c7	a5 48		lda $48		        lda DX
.15c9	85 46		sta $46		        sta CX
.15cb	e2 20		sep #$20	                SEP #$20
.15cd	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.15d0	c9 c2		cmp #$c2	+   cmp #$c2
.15d2	d0 11		bne $15e5	    bne +
.15d4	48		pha		                pha
.15d5	a9 00		lda #$00	                lda #$00
.15d7	48		pha		                pha                     ; push the value to the stack
.15d8	ab		plb		                plb                     ; pull value from stack to data bank register
.15d9	68		pla		                pla
.15da	c2 20		rep #$20	                REP #$20
.15dc	a5 42		lda $42		        lda AX
.15de	85 48		sta $48		        sta DX
.15e0	e2 20		sep #$20	                SEP #$20
.15e2	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.15e5	c9 da		cmp #$da	+   cmp #$da
.15e7	d0 11		bne $15fa	    bne +
.15e9	48		pha		                pha
.15ea	a9 00		lda #$00	                lda #$00
.15ec	48		pha		                pha                     ; push the value to the stack
.15ed	ab		plb		                plb                     ; pull value from stack to data bank register
.15ee	68		pla		                pla
.15ef	c2 20		rep #$20	                REP #$20
.15f1	a5 44		lda $44		        lda BX
.15f3	85 48		sta $48		        sta DX
.15f5	e2 20		sep #$20	                SEP #$20
.15f7	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.15fa	c9 ca		cmp #$ca	+   cmp #$ca
.15fc	d0 11		bne $160f	    bne +
.15fe	48		pha		                pha
.15ff	a9 00		lda #$00	                lda #$00
.1601	48		pha		                pha                     ; push the value to the stack
.1602	ab		plb		                plb                     ; pull value from stack to data bank register
.1603	68		pla		                pla
.1604	c2 20		rep #$20	                REP #$20
.1606	a5 46		lda $46		        lda CX
.1608	85 48		sta $48		        sta DX
.160a	e2 20		sep #$20	                SEP #$20
.160c	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.160f	c9 d2		cmp #$d2	+   cmp #$d2
.1611	d0 11		bne $1624	    bne +
.1613	48		pha		                pha
.1614	a9 00		lda #$00	                lda #$00
.1616	48		pha		                pha                     ; push the value to the stack
.1617	ab		plb		                plb                     ; pull value from stack to data bank register
.1618	68		pla		                pla
.1619	c2 20		rep #$20	                REP #$20
.161b	a5 48		lda $48		        lda DX
.161d	85 48		sta $48		        sta DX
.161f	e2 20		sep #$20	                SEP #$20
.1621	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.1624	4c 8e 0a	jmp $0a8e	+    jmp MAINLOOP_END
.1627					j8a:
.1627	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.162a					j8b:
.162a	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.162d					j8c:
.162d	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1630					j8d:
.1630	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1633					j8e:
.1633	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1636					j8f:
.1636	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1639					j90:
.1639	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.163c					j91:
.163c	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.163f					j92:
.163f	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1642					j93:
.1642	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1645					j94:
.1645	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1648					j95:
.1648	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.164b					j96:
.164b	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.164e					j97:
.164e	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1651					j98:
.1651	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1654					j99:
.1654	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1657					j9a:
.1657	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.165a					j9b:
.165a	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.165d					j9c:
.165d	48		pha		                pha
.165e	a9 00		lda #$00	                lda #$00
.1660	48		pha		                pha                     ; push the value to the stack
.1661	ab		plb		                plb                     ; pull value from stack to data bank register
.1662	68		pla		                pla
.1663	c2 20		rep #$20	                REP #$20
.1665	a5 56		lda $56		    lda SP
.1667	38		sec		    sec
.1668	e9 02 00	sbc #$0002	    sbc #$02
.166b	85 56		sta $56		    sta SP
.166d	a5 54		lda $54		    lda FR
.166f	48		pha		                pha
.1670	e2 20		sep #$20	                SEP #$20
.1672	a9 02		lda #$02	                lda #$02
.1674	48		pha		                pha                     ; push the value to the stack
.1675	ab		plb		                plb                     ; pull value from stack to data bank register
.1676	c2 20		rep #$20	                REP #$20
.1678	68		pla		                pla
.1679	92 56		sta ($56)	    sta (SP)
.167b	e2 20		sep #$20	                SEP #$20
.167d	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1680					j9d:
.1680	c2 20		rep #$20	                REP #$20
.1682	48		pha		                pha
.1683	e2 20		sep #$20	                SEP #$20
.1685	a9 02		lda #$02	                lda #$02
.1687	48		pha		                pha                     ; push the value to the stack
.1688	ab		plb		                plb                     ; pull value from stack to data bank register
.1689	c2 20		rep #$20	                REP #$20
.168b	68		pla		                pla
.168c	b2 56		lda ($56)	    lda (SP)
.168e	48		pha		                pha
.168f	e2 20		sep #$20	                SEP #$20
.1691	a9 00		lda #$00	                lda #$00
.1693	48		pha		                pha                     ; push the value to the stack
.1694	ab		plb		                plb                     ; pull value from stack to data bank register
.1695	c2 20		rep #$20	                REP #$20
.1697	68		pla		                pla
.1698	85 54		sta $54		    sta FR
.169a	a5 56		lda $56		    lda SP
.169c	18		clc		    clc
.169d	69 02 00	adc #$0002	    adc #$02
.16a0	85 56		sta $56		    sta SP
.16a2	e2 20		sep #$20	                SEP #$20
.16a4	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.16a7					j9e:
.16a7	48		pha		                pha
.16a8	a9 00		lda #$00	                lda #$00
.16aa	48		pha		                pha                     ; push the value to the stack
.16ab	ab		plb		                plb                     ; pull value from stack to data bank register
.16ac	68		pla		                pla
.16ad	a5 43		lda $43		    lda AH
.16af	85 55		sta $55		    sta FRL
.16b1	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.16b4					j9f:
.16b4	48		pha		                pha
.16b5	a9 00		lda #$00	                lda #$00
.16b7	48		pha		                pha                     ; push the value to the stack
.16b8	ab		plb		                plb                     ; pull value from stack to data bank register
.16b9	68		pla		                pla
.16ba	85 55		sta $55		    sta FRL
.16bc	a5 43		lda $43		    lda AH
.16be	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.16c1					ja0:
.16c1	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.16c4					ja1:
.16c4	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.16c7					ja2:
.16c7	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.16ca					ja3:
.16ca	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.16cd					ja4:
.16cd	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.16d0					ja5:
.16d0	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.16d3					ja6:
.16d3	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.16d6					ja7:
.16d6	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.16d9					ja8:
.16d9	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.16dc					ja9:
.16dc	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.16df					jaa:
.16df	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.16e2					jab:
.16e2	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.16e5					jac:
.16e5	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.16e8					jad:
.16e8	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.16eb					jae:
.16eb	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.16ee					jaf:
.16ee	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.16f1					jb0:
.16f1	20 ef 0c	jsr $0cef	    jsr GETNEXT
.16f4	48		pha		                pha
.16f5	a9 00		lda #$00	                lda #$00
.16f7	48		pha		                pha                     ; push the value to the stack
.16f8	ab		plb		                plb                     ; pull value from stack to data bank register
.16f9	68		pla		                pla
.16fa	85 42		sta $42		    sta AL
.16fc	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.16ff					jb1:
.16ff	20 ef 0c	jsr $0cef	    jsr GETNEXT
.1702	48		pha		                pha
.1703	a9 00		lda #$00	                lda #$00
.1705	48		pha		                pha                     ; push the value to the stack
.1706	ab		plb		                plb                     ; pull value from stack to data bank register
.1707	68		pla		                pla
.1708	85 46		sta $46		    sta CL
.170a	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.170d					jb2:
.170d	20 ef 0c	jsr $0cef	    jsr GETNEXT
.1710	48		pha		                pha
.1711	a9 00		lda #$00	                lda #$00
.1713	48		pha		                pha                     ; push the value to the stack
.1714	ab		plb		                plb                     ; pull value from stack to data bank register
.1715	68		pla		                pla
.1716	85 48		sta $48		    sta DL      ; store it
.1718	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.171b					jb3:
.171b	20 ef 0c	jsr $0cef	    jsr GETNEXT
.171e	48		pha		                pha
.171f	a9 00		lda #$00	                lda #$00
.1721	48		pha		                pha                     ; push the value to the stack
.1722	ab		plb		                plb                     ; pull value from stack to data bank register
.1723	68		pla		                pla
.1724	85 44		sta $44		    sta BL
.1726	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1729					jb4:
.1729	20 ef 0c	jsr $0cef	    jsr GETNEXT
.172c	48		pha		                pha
.172d	a9 00		lda #$00	                lda #$00
.172f	48		pha		                pha                     ; push the value to the stack
.1730	ab		plb		                plb                     ; pull value from stack to data bank register
.1731	68		pla		                pla
.1732	85 43		sta $43		    sta AH      ; store it
.1734	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1737					jb5:
.1737	20 ef 0c	jsr $0cef	    jsr GETNEXT
.173a	48		pha		                pha
.173b	a9 00		lda #$00	                lda #$00
.173d	48		pha		                pha                     ; push the value to the stack
.173e	ab		plb		                plb                     ; pull value from stack to data bank register
.173f	68		pla		                pla
.1740	85 47		sta $47		    sta CH
.1742	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1745					jb6:
.1745	20 ef 0c	jsr $0cef	    jsr GETNEXT
.1748	48		pha		                pha
.1749	a9 00		lda #$00	                lda #$00
.174b	48		pha		                pha                     ; push the value to the stack
.174c	ab		plb		                plb                     ; pull value from stack to data bank register
.174d	68		pla		                pla
.174e	85 49		sta $49		    sta DH
.1750	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1753					jb7:
.1753	20 ef 0c	jsr $0cef	    jsr GETNEXT
.1756	48		pha		                pha
.1757	a9 00		lda #$00	                lda #$00
.1759	48		pha		                pha                     ; push the value to the stack
.175a	ab		plb		                plb                     ; pull value from stack to data bank register
.175b	68		pla		                pla
.175c	85 45		sta $45		    sta BH
.175e	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1761					jb8:
.1761	20 ef 0c	jsr $0cef	    jsr GETNEXT
.1764	48		pha		                pha
.1765	a9 00		lda #$00	                lda #$00
.1767	48		pha		                pha                     ; push the value to the stack
.1768	ab		plb		                plb                     ; pull value from stack to data bank register
.1769	68		pla		                pla
.176a	85 42		sta $42		    sta AL
.176c	20 ef 0c	jsr $0cef	    jsr GETNEXT
.176f	48		pha		                pha
.1770	a9 00		lda #$00	                lda #$00
.1772	48		pha		                pha                     ; push the value to the stack
.1773	ab		plb		                plb                     ; pull value from stack to data bank register
.1774	68		pla		                pla
.1775	85 43		sta $43		    sta AH
.1777	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.177a					jb9:
.177a	20 ef 0c	jsr $0cef	    jsr GETNEXT
.177d	48		pha		                pha
.177e	a9 00		lda #$00	                lda #$00
.1780	48		pha		                pha                     ; push the value to the stack
.1781	ab		plb		                plb                     ; pull value from stack to data bank register
.1782	68		pla		                pla
.1783	85 46		sta $46		    sta CL
.1785	20 ef 0c	jsr $0cef	    jsr GETNEXT
.1788	48		pha		                pha
.1789	a9 00		lda #$00	                lda #$00
.178b	48		pha		                pha                     ; push the value to the stack
.178c	ab		plb		                plb                     ; pull value from stack to data bank register
.178d	68		pla		                pla
.178e	85 47		sta $47		    sta CH
.1790	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1793					jba:
.1793	20 ef 0c	jsr $0cef	    jsr GETNEXT
.1796	48		pha		                pha
.1797	a9 00		lda #$00	                lda #$00
.1799	48		pha		                pha                     ; push the value to the stack
.179a	ab		plb		                plb                     ; pull value from stack to data bank register
.179b	68		pla		                pla
.179c	85 48		sta $48		    sta DL
.179e	20 ef 0c	jsr $0cef	    jsr GETNEXT
.17a1	48		pha		                pha
.17a2	a9 00		lda #$00	                lda #$00
.17a4	48		pha		                pha                     ; push the value to the stack
.17a5	ab		plb		                plb                     ; pull value from stack to data bank register
.17a6	68		pla		                pla
.17a7	85 49		sta $49		    sta DH
.17a9	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.17ac					jbb:
.17ac	20 ef 0c	jsr $0cef	    jsr GETNEXT
.17af	48		pha		                pha
.17b0	a9 00		lda #$00	                lda #$00
.17b2	48		pha		                pha                     ; push the value to the stack
.17b3	ab		plb		                plb                     ; pull value from stack to data bank register
.17b4	68		pla		                pla
.17b5	85 44		sta $44		    sta BL
.17b7	20 ef 0c	jsr $0cef	    jsr GETNEXT
.17ba	48		pha		                pha
.17bb	a9 00		lda #$00	                lda #$00
.17bd	48		pha		                pha                     ; push the value to the stack
.17be	ab		plb		                plb                     ; pull value from stack to data bank register
.17bf	68		pla		                pla
.17c0	85 45		sta $45		    sta BH
.17c2	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.17c5					jbc:
.17c5	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.17c8					jbd:
.17c8	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.17cb					jbe:
.17cb	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.17ce					jbf:
.17ce	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.17d1					jc0:
.17d1	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.17d4					jc1:
.17d4	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.17d7					jc2:
.17d7	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.17da					jc3:
.17da	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.17dd					jc4:
.17dd	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.17e0					jc5:
.17e0	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.17e3					jc6:
.17e3	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.17e6					jc7:
.17e6	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.17e9					jc8:
.17e9	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.17ec					jc9:
.17ec	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.17ef					jca:
.17ef	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.17f2					jcb:
.17f2	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.17f5					jcc:
.17f5	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.17f8					jcd:
.17f8	20 ef 0c	jsr $0cef	    jsr GETNEXT
.17fb	c9 21		cmp #$21	    cmp #$21
.17fd	f0 07		beq $1806	    beq jcd_putc
.17ff	c9 20		cmp #$20	    cmp #$20
.1801	f0 35		beq $1838	    beq jcd_exit
.1803	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1806					    jcd_putc:
.1806	48		pha		                pha
.1807	a9 00		lda #$00	                lda #$00
.1809	48		pha		                pha                     ; push the value to the stack
.180a	ab		plb		                plb                     ; pull value from stack to data bank register
.180b	68		pla		                pla
.180c	a5 43		lda $43		        lda AH
.180e	c9 09		cmp #$09	        cmp #$09
.1810	d0 1e		bne $1830	        bne +
.1812	a0 00		ldy #$00	            ldy #$00
.1814					            pr_string_loop:
.1814	48		pha		                pha
.1815	a9 02		lda #$02	                lda #$02
.1817	48		pha		                pha                     ; push the value to the stack
.1818	ab		plb		                plb                     ; pull value from stack to data bank register
.1819	68		pla		                pla
.181a	b1 48		lda ($48),y	                lda (DX),y
.181c	c9 24		cmp #$24	                cmp #'$'
.181e	f0 0d		beq $182d	                beq pr_string_done
.1820	48		pha		                pha
.1821	a9 00		lda #$00	                lda #$00
.1823	48		pha		                pha                     ; push the value to the stack
.1824	ab		plb		                plb                     ; pull value from stack to data bank register
.1825	68		pla		                pla
.1826	20 d2 ff	jsr $ffd2	                jsr $FFD2
.1829	c8		iny		                iny
.182a	4c 14 18	jmp $1814	                jmp pr_string_loop
.182d					            pr_string_done:
.182d	4c 8e 0a	jmp $0a8e	                jmp MAINLOOP_END
.1830	a5 48		lda $48		+       lda DL
.1832	20 d2 ff	jsr $ffd2	        jsr $FFD2
.1835	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.1838					    jcd_exit:
.1838	4c 94 0a	jmp $0a94	        jmp EXIT
.183b					jce:
.183b	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.183e					jcf:
.183e	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1841					jd0:
.1841	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1844					jd1:
.1844	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1847					jd2:
.1847	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.184a					jd3:
.184a	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.184d					jd4:
.184d	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1850					jd5:
.1850	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1853					jd6:
.1853	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1856					jd7:
.1856	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1859					jd8:
.1859	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.185c					jd9:
.185c	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.185f					jda:
.185f	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1862					jdb:
.1862	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1865					jdc:
.1865	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1868					jdd:
.1868	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.186b					jde:
.186b	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.186e					jdf:
.186e	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1871					je0:
.1871	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1874					je1:
.1874	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1877					je2:
.1877	20 ef 0c	jsr $0cef	    jsr GETNEXT
.187a	48		pha		    pha
.187b	48		pha		                pha
.187c	a9 00		lda #$00	                lda #$00
.187e	48		pha		                pha                     ; push the value to the stack
.187f	ab		plb		                plb                     ; pull value from stack to data bank register
.1880	68		pla		                pla
.1881	c2 20		rep #$20	                REP #$20
.1883	a5 46		lda $46		    lda CX
.1885	f0 2b		beq $18b2	    beq je2_loopdone
.1887	c6 46		dec $46		    dec CX
.1889	e2 20		sep #$20	                SEP #$20
.188b	68		pla		    pla
.188c	c9 80		cmp #$80	    cmp #$80
.188e	b0 10		bcs $18a0	    bcs je2_back
.1890					    je2_forward:
.1890	85 5e		sta $5e		        sta TMP1
.1892	c2 20		rep #$20	                REP #$20
.1894	a5 52		lda $52		        lda IP
.1896	18		clc		        clc
.1897	65 5e		adc $5e		        adc TMP1
.1899	85 52		sta $52		        sta IP
.189b	e2 20		sep #$20	                SEP #$20
.189d	4c 73 0a	jmp $0a73	        jmp MAINLOOP
.18a0					    je2_back:
.18a0	49 ff		eor #$ff	        eor #$ff
.18a2	85 5e		sta $5e		        sta TMP1
.18a4	c2 20		rep #$20	                REP #$20
.18a6	a5 52		lda $52		        lda IP
.18a8	38		sec		        sec
.18a9	e5 5e		sbc $5e		        sbc TMP1
.18ab	85 52		sta $52		        sta IP
.18ad	e2 20		sep #$20	                SEP #$20
.18af	4c 73 0a	jmp $0a73	        jmp MAINLOOP
.18b2					    je2_loopdone:
.18b2	e2 20		sep #$20	                SEP #$20
.18b4	68		pla		        pla
.18b5	4c 73 0a	jmp $0a73	        jmp MAINLOOP
.18b8					je3:
.18b8	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.18bb					je4:
.18bb	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.18be					je5:
.18be	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.18c1					je6:
.18c1	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.18c4					je7:
.18c4	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.18c7					je8:
.18c7	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.18ca					je9:
.18ca	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.18cd					jea:
.18cd	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.18d0					jeb:
.18d0	20 ef 0c	jsr $0cef	    jsr GETNEXT
.18d3	48		pha		                pha
.18d4	a9 00		lda #$00	                lda #$00
.18d6	48		pha		                pha                     ; push the value to the stack
.18d7	ab		plb		                plb                     ; pull value from stack to data bank register
.18d8	68		pla		                pla
.18d9	c9 80		cmp #$80	    cmp #$80
.18db	b0 10		bcs $18ed	    bcs jeb_back
.18dd					    jeb_forward:
.18dd	85 5e		sta $5e		        sta TMP1
.18df	c2 20		rep #$20	                REP #$20
.18e1	a5 52		lda $52		        lda IP
.18e3	18		clc		        clc
.18e4	65 5e		adc $5e		        adc TMP1
.18e6	85 52		sta $52		        sta IP
.18e8	e2 20		sep #$20	                SEP #$20
.18ea	4c 73 0a	jmp $0a73	        jmp MAINLOOP
.18ed					    jeb_back:
.18ed	49 ff		eor #$ff	        eor #$ff
.18ef	85 5e		sta $5e		        sta TMP1
.18f1	c2 20		rep #$20	                REP #$20
.18f3	a5 52		lda $52		        lda IP
.18f5	38		sec		        sec
.18f6	e5 5e		sbc $5e		        sbc TMP1
.18f8	85 52		sta $52		        sta IP
.18fa	e2 20		sep #$20	                SEP #$20
.18fc	4c 73 0a	jmp $0a73	        jmp MAINLOOP
.18ff					jec:
.18ff	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1902					jed:
.1902	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1905					jee:
.1905	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1908					jef:
.1908	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.190b					jf0:
.190b	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.190e					jf1:
.190e	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1911					jf2:
.1911	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1914					jf3:
.1914	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1917					jf4:
.1917	4c 17 19	jmp $1917	    jmp jf4
.191a					jf5:
.191a	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.191d					jf6:
.191d	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1920					jf7:
.1920	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1923					jf8:
.1923	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1926					jf9:
.1926	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1929					jfa:
.1929	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.192c					jfb:
.192c	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.192f					jfc:
.192f	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1932					jfd:
.1932	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.1935					jfe:
.1935	20 ef 0c	jsr $0cef	    jsr GETNEXT
.1938	c9 c0		cmp #$c0	    cmp #$c0
.193a	f0 1f		beq $195b	    beq jfe_al
.193c	c9 c4		cmp #$c4	    cmp #$c4
.193e	f0 26		beq $1966	    beq jfe_ah
.1940	c9 c3		cmp #$c3	    cmp #$c3
.1942	f0 2d		beq $1971	    beq jfe_bl
.1944	c9 c7		cmp #$c7	    cmp #$c7
.1946	f0 34		beq $197c	    beq jfe_bh
.1948	c9 c1		cmp #$c1	    cmp #$c1
.194a	f0 3b		beq $1987	    beq jfe_cl
.194c	c9 c5		cmp #$c5	    cmp #$c5
.194e	f0 42		beq $1992	    beq jfe_ch
.1950	c9 c2		cmp #$c2	    cmp #$c2
.1952	f0 49		beq $199d	    beq jfe_dl
.1954	c9 c6		cmp #$c6	    cmp #$c6
.1956	f0 50		beq $19a8	    beq jfe_dh
.1958	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END
.195b					    jfe_al:
.195b	48		pha		                pha
.195c	a9 00		lda #$00	                lda #$00
.195e	48		pha		                pha                     ; push the value to the stack
.195f	ab		plb		                plb                     ; pull value from stack to data bank register
.1960	68		pla		                pla
.1961	e6 42		inc $42		        inc AL
.1963	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.1966					    jfe_ah:
.1966	48		pha		                pha
.1967	a9 00		lda #$00	                lda #$00
.1969	48		pha		                pha                     ; push the value to the stack
.196a	ab		plb		                plb                     ; pull value from stack to data bank register
.196b	68		pla		                pla
.196c	e6 43		inc $43		        inc AH
.196e	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.1971					    jfe_bl:
.1971	48		pha		                pha
.1972	a9 00		lda #$00	                lda #$00
.1974	48		pha		                pha                     ; push the value to the stack
.1975	ab		plb		                plb                     ; pull value from stack to data bank register
.1976	68		pla		                pla
.1977	e6 44		inc $44		        inc BL
.1979	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.197c					    jfe_bh:
.197c	48		pha		                pha
.197d	a9 00		lda #$00	                lda #$00
.197f	48		pha		                pha                     ; push the value to the stack
.1980	ab		plb		                plb                     ; pull value from stack to data bank register
.1981	68		pla		                pla
.1982	e6 45		inc $45		        inc BH
.1984	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.1987					    jfe_cl:
.1987	48		pha		                pha
.1988	a9 00		lda #$00	                lda #$00
.198a	48		pha		                pha                     ; push the value to the stack
.198b	ab		plb		                plb                     ; pull value from stack to data bank register
.198c	68		pla		                pla
.198d	e6 46		inc $46		        inc CL
.198f	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.1992					    jfe_ch:
.1992	48		pha		                pha
.1993	a9 00		lda #$00	                lda #$00
.1995	48		pha		                pha                     ; push the value to the stack
.1996	ab		plb		                plb                     ; pull value from stack to data bank register
.1997	68		pla		                pla
.1998	e6 47		inc $47		        inc CH
.199a	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.199d					    jfe_dl:
.199d	48		pha		                pha
.199e	a9 00		lda #$00	                lda #$00
.19a0	48		pha		                pha                     ; push the value to the stack
.19a1	ab		plb		                plb                     ; pull value from stack to data bank register
.19a2	68		pla		                pla
.19a3	e6 48		inc $48		        inc DL
.19a5	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.19a8					    jfe_dh:
.19a8	48		pha		                pha
.19a9	a9 00		lda #$00	                lda #$00
.19ab	48		pha		                pha                     ; push the value to the stack
.19ac	ab		plb		                plb                     ; pull value from stack to data bank register
.19ad	68		pla		                pla
.19ae	e6 49		inc $49		        inc DH
.19b0	4c 8e 0a	jmp $0a8e	        jmp MAINLOOP_END
.19b3					jff:
.19b3	4c 8e 0a	jmp $0a8e	    jmp MAINLOOP_END

;******  End of listing
